// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inou/firrtl/firrtl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_inou_2ffirrtl_2ffirrtl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_inou_2ffirrtl_2ffirrtl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_inou_2ffirrtl_2ffirrtl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[53]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto;
namespace firrtl {
class FirrtlPB;
class FirrtlPBDefaultTypeInternal;
extern FirrtlPBDefaultTypeInternal _FirrtlPB_default_instance_;
class FirrtlPB_BigInt;
class FirrtlPB_BigIntDefaultTypeInternal;
extern FirrtlPB_BigIntDefaultTypeInternal _FirrtlPB_BigInt_default_instance_;
class FirrtlPB_Circuit;
class FirrtlPB_CircuitDefaultTypeInternal;
extern FirrtlPB_CircuitDefaultTypeInternal _FirrtlPB_Circuit_default_instance_;
class FirrtlPB_Expression;
class FirrtlPB_ExpressionDefaultTypeInternal;
extern FirrtlPB_ExpressionDefaultTypeInternal _FirrtlPB_Expression_default_instance_;
class FirrtlPB_Expression_FixedLiteral;
class FirrtlPB_Expression_FixedLiteralDefaultTypeInternal;
extern FirrtlPB_Expression_FixedLiteralDefaultTypeInternal _FirrtlPB_Expression_FixedLiteral_default_instance_;
class FirrtlPB_Expression_IntegerLiteral;
class FirrtlPB_Expression_IntegerLiteralDefaultTypeInternal;
extern FirrtlPB_Expression_IntegerLiteralDefaultTypeInternal _FirrtlPB_Expression_IntegerLiteral_default_instance_;
class FirrtlPB_Expression_Mux;
class FirrtlPB_Expression_MuxDefaultTypeInternal;
extern FirrtlPB_Expression_MuxDefaultTypeInternal _FirrtlPB_Expression_Mux_default_instance_;
class FirrtlPB_Expression_PrimOp;
class FirrtlPB_Expression_PrimOpDefaultTypeInternal;
extern FirrtlPB_Expression_PrimOpDefaultTypeInternal _FirrtlPB_Expression_PrimOp_default_instance_;
class FirrtlPB_Expression_Reference;
class FirrtlPB_Expression_ReferenceDefaultTypeInternal;
extern FirrtlPB_Expression_ReferenceDefaultTypeInternal _FirrtlPB_Expression_Reference_default_instance_;
class FirrtlPB_Expression_SIntLiteral;
class FirrtlPB_Expression_SIntLiteralDefaultTypeInternal;
extern FirrtlPB_Expression_SIntLiteralDefaultTypeInternal _FirrtlPB_Expression_SIntLiteral_default_instance_;
class FirrtlPB_Expression_SubAccess;
class FirrtlPB_Expression_SubAccessDefaultTypeInternal;
extern FirrtlPB_Expression_SubAccessDefaultTypeInternal _FirrtlPB_Expression_SubAccess_default_instance_;
class FirrtlPB_Expression_SubField;
class FirrtlPB_Expression_SubFieldDefaultTypeInternal;
extern FirrtlPB_Expression_SubFieldDefaultTypeInternal _FirrtlPB_Expression_SubField_default_instance_;
class FirrtlPB_Expression_SubIndex;
class FirrtlPB_Expression_SubIndexDefaultTypeInternal;
extern FirrtlPB_Expression_SubIndexDefaultTypeInternal _FirrtlPB_Expression_SubIndex_default_instance_;
class FirrtlPB_Expression_UIntLiteral;
class FirrtlPB_Expression_UIntLiteralDefaultTypeInternal;
extern FirrtlPB_Expression_UIntLiteralDefaultTypeInternal _FirrtlPB_Expression_UIntLiteral_default_instance_;
class FirrtlPB_Expression_ValidIf;
class FirrtlPB_Expression_ValidIfDefaultTypeInternal;
extern FirrtlPB_Expression_ValidIfDefaultTypeInternal _FirrtlPB_Expression_ValidIf_default_instance_;
class FirrtlPB_Module;
class FirrtlPB_ModuleDefaultTypeInternal;
extern FirrtlPB_ModuleDefaultTypeInternal _FirrtlPB_Module_default_instance_;
class FirrtlPB_Module_ExternalModule;
class FirrtlPB_Module_ExternalModuleDefaultTypeInternal;
extern FirrtlPB_Module_ExternalModuleDefaultTypeInternal _FirrtlPB_Module_ExternalModule_default_instance_;
class FirrtlPB_Module_ExternalModule_Parameter;
class FirrtlPB_Module_ExternalModule_ParameterDefaultTypeInternal;
extern FirrtlPB_Module_ExternalModule_ParameterDefaultTypeInternal _FirrtlPB_Module_ExternalModule_Parameter_default_instance_;
class FirrtlPB_Module_UserModule;
class FirrtlPB_Module_UserModuleDefaultTypeInternal;
extern FirrtlPB_Module_UserModuleDefaultTypeInternal _FirrtlPB_Module_UserModule_default_instance_;
class FirrtlPB_Port;
class FirrtlPB_PortDefaultTypeInternal;
extern FirrtlPB_PortDefaultTypeInternal _FirrtlPB_Port_default_instance_;
class FirrtlPB_SourceInfo;
class FirrtlPB_SourceInfoDefaultTypeInternal;
extern FirrtlPB_SourceInfoDefaultTypeInternal _FirrtlPB_SourceInfo_default_instance_;
class FirrtlPB_SourceInfo_None;
class FirrtlPB_SourceInfo_NoneDefaultTypeInternal;
extern FirrtlPB_SourceInfo_NoneDefaultTypeInternal _FirrtlPB_SourceInfo_None_default_instance_;
class FirrtlPB_SourceInfo_Position;
class FirrtlPB_SourceInfo_PositionDefaultTypeInternal;
extern FirrtlPB_SourceInfo_PositionDefaultTypeInternal _FirrtlPB_SourceInfo_Position_default_instance_;
class FirrtlPB_Statement;
class FirrtlPB_StatementDefaultTypeInternal;
extern FirrtlPB_StatementDefaultTypeInternal _FirrtlPB_Statement_default_instance_;
class FirrtlPB_Statement_Attach;
class FirrtlPB_Statement_AttachDefaultTypeInternal;
extern FirrtlPB_Statement_AttachDefaultTypeInternal _FirrtlPB_Statement_Attach_default_instance_;
class FirrtlPB_Statement_CMemory;
class FirrtlPB_Statement_CMemoryDefaultTypeInternal;
extern FirrtlPB_Statement_CMemoryDefaultTypeInternal _FirrtlPB_Statement_CMemory_default_instance_;
class FirrtlPB_Statement_CMemory_TypeAndDepth;
class FirrtlPB_Statement_CMemory_TypeAndDepthDefaultTypeInternal;
extern FirrtlPB_Statement_CMemory_TypeAndDepthDefaultTypeInternal _FirrtlPB_Statement_CMemory_TypeAndDepth_default_instance_;
class FirrtlPB_Statement_Connect;
class FirrtlPB_Statement_ConnectDefaultTypeInternal;
extern FirrtlPB_Statement_ConnectDefaultTypeInternal _FirrtlPB_Statement_Connect_default_instance_;
class FirrtlPB_Statement_Instance;
class FirrtlPB_Statement_InstanceDefaultTypeInternal;
extern FirrtlPB_Statement_InstanceDefaultTypeInternal _FirrtlPB_Statement_Instance_default_instance_;
class FirrtlPB_Statement_IsInvalid;
class FirrtlPB_Statement_IsInvalidDefaultTypeInternal;
extern FirrtlPB_Statement_IsInvalidDefaultTypeInternal _FirrtlPB_Statement_IsInvalid_default_instance_;
class FirrtlPB_Statement_Memory;
class FirrtlPB_Statement_MemoryDefaultTypeInternal;
extern FirrtlPB_Statement_MemoryDefaultTypeInternal _FirrtlPB_Statement_Memory_default_instance_;
class FirrtlPB_Statement_MemoryPort;
class FirrtlPB_Statement_MemoryPortDefaultTypeInternal;
extern FirrtlPB_Statement_MemoryPortDefaultTypeInternal _FirrtlPB_Statement_MemoryPort_default_instance_;
class FirrtlPB_Statement_Node;
class FirrtlPB_Statement_NodeDefaultTypeInternal;
extern FirrtlPB_Statement_NodeDefaultTypeInternal _FirrtlPB_Statement_Node_default_instance_;
class FirrtlPB_Statement_PartialConnect;
class FirrtlPB_Statement_PartialConnectDefaultTypeInternal;
extern FirrtlPB_Statement_PartialConnectDefaultTypeInternal _FirrtlPB_Statement_PartialConnect_default_instance_;
class FirrtlPB_Statement_Printf;
class FirrtlPB_Statement_PrintfDefaultTypeInternal;
extern FirrtlPB_Statement_PrintfDefaultTypeInternal _FirrtlPB_Statement_Printf_default_instance_;
class FirrtlPB_Statement_Register;
class FirrtlPB_Statement_RegisterDefaultTypeInternal;
extern FirrtlPB_Statement_RegisterDefaultTypeInternal _FirrtlPB_Statement_Register_default_instance_;
class FirrtlPB_Statement_Skip;
class FirrtlPB_Statement_SkipDefaultTypeInternal;
extern FirrtlPB_Statement_SkipDefaultTypeInternal _FirrtlPB_Statement_Skip_default_instance_;
class FirrtlPB_Statement_Stop;
class FirrtlPB_Statement_StopDefaultTypeInternal;
extern FirrtlPB_Statement_StopDefaultTypeInternal _FirrtlPB_Statement_Stop_default_instance_;
class FirrtlPB_Statement_When;
class FirrtlPB_Statement_WhenDefaultTypeInternal;
extern FirrtlPB_Statement_WhenDefaultTypeInternal _FirrtlPB_Statement_When_default_instance_;
class FirrtlPB_Statement_Wire;
class FirrtlPB_Statement_WireDefaultTypeInternal;
extern FirrtlPB_Statement_WireDefaultTypeInternal _FirrtlPB_Statement_Wire_default_instance_;
class FirrtlPB_Top;
class FirrtlPB_TopDefaultTypeInternal;
extern FirrtlPB_TopDefaultTypeInternal _FirrtlPB_Top_default_instance_;
class FirrtlPB_Type;
class FirrtlPB_TypeDefaultTypeInternal;
extern FirrtlPB_TypeDefaultTypeInternal _FirrtlPB_Type_default_instance_;
class FirrtlPB_Type_AnalogType;
class FirrtlPB_Type_AnalogTypeDefaultTypeInternal;
extern FirrtlPB_Type_AnalogTypeDefaultTypeInternal _FirrtlPB_Type_AnalogType_default_instance_;
class FirrtlPB_Type_AsyncResetType;
class FirrtlPB_Type_AsyncResetTypeDefaultTypeInternal;
extern FirrtlPB_Type_AsyncResetTypeDefaultTypeInternal _FirrtlPB_Type_AsyncResetType_default_instance_;
class FirrtlPB_Type_BundleType;
class FirrtlPB_Type_BundleTypeDefaultTypeInternal;
extern FirrtlPB_Type_BundleTypeDefaultTypeInternal _FirrtlPB_Type_BundleType_default_instance_;
class FirrtlPB_Type_BundleType_Field;
class FirrtlPB_Type_BundleType_FieldDefaultTypeInternal;
extern FirrtlPB_Type_BundleType_FieldDefaultTypeInternal _FirrtlPB_Type_BundleType_Field_default_instance_;
class FirrtlPB_Type_ClockType;
class FirrtlPB_Type_ClockTypeDefaultTypeInternal;
extern FirrtlPB_Type_ClockTypeDefaultTypeInternal _FirrtlPB_Type_ClockType_default_instance_;
class FirrtlPB_Type_FixedType;
class FirrtlPB_Type_FixedTypeDefaultTypeInternal;
extern FirrtlPB_Type_FixedTypeDefaultTypeInternal _FirrtlPB_Type_FixedType_default_instance_;
class FirrtlPB_Type_ResetType;
class FirrtlPB_Type_ResetTypeDefaultTypeInternal;
extern FirrtlPB_Type_ResetTypeDefaultTypeInternal _FirrtlPB_Type_ResetType_default_instance_;
class FirrtlPB_Type_SIntType;
class FirrtlPB_Type_SIntTypeDefaultTypeInternal;
extern FirrtlPB_Type_SIntTypeDefaultTypeInternal _FirrtlPB_Type_SIntType_default_instance_;
class FirrtlPB_Type_UIntType;
class FirrtlPB_Type_UIntTypeDefaultTypeInternal;
extern FirrtlPB_Type_UIntTypeDefaultTypeInternal _FirrtlPB_Type_UIntType_default_instance_;
class FirrtlPB_Type_VectorType;
class FirrtlPB_Type_VectorTypeDefaultTypeInternal;
extern FirrtlPB_Type_VectorTypeDefaultTypeInternal _FirrtlPB_Type_VectorType_default_instance_;
class FirrtlPB_Width;
class FirrtlPB_WidthDefaultTypeInternal;
extern FirrtlPB_WidthDefaultTypeInternal _FirrtlPB_Width_default_instance_;
}  // namespace firrtl
PROTOBUF_NAMESPACE_OPEN
template<> ::firrtl::FirrtlPB* Arena::CreateMaybeMessage<::firrtl::FirrtlPB>(Arena*);
template<> ::firrtl::FirrtlPB_BigInt* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_BigInt>(Arena*);
template<> ::firrtl::FirrtlPB_Circuit* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Circuit>(Arena*);
template<> ::firrtl::FirrtlPB_Expression* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(Arena*);
template<> ::firrtl::FirrtlPB_Expression_FixedLiteral* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Expression_FixedLiteral>(Arena*);
template<> ::firrtl::FirrtlPB_Expression_IntegerLiteral* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Expression_IntegerLiteral>(Arena*);
template<> ::firrtl::FirrtlPB_Expression_Mux* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Expression_Mux>(Arena*);
template<> ::firrtl::FirrtlPB_Expression_PrimOp* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Expression_PrimOp>(Arena*);
template<> ::firrtl::FirrtlPB_Expression_Reference* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Expression_Reference>(Arena*);
template<> ::firrtl::FirrtlPB_Expression_SIntLiteral* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Expression_SIntLiteral>(Arena*);
template<> ::firrtl::FirrtlPB_Expression_SubAccess* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Expression_SubAccess>(Arena*);
template<> ::firrtl::FirrtlPB_Expression_SubField* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Expression_SubField>(Arena*);
template<> ::firrtl::FirrtlPB_Expression_SubIndex* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Expression_SubIndex>(Arena*);
template<> ::firrtl::FirrtlPB_Expression_UIntLiteral* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Expression_UIntLiteral>(Arena*);
template<> ::firrtl::FirrtlPB_Expression_ValidIf* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Expression_ValidIf>(Arena*);
template<> ::firrtl::FirrtlPB_Module* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Module>(Arena*);
template<> ::firrtl::FirrtlPB_Module_ExternalModule* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Module_ExternalModule>(Arena*);
template<> ::firrtl::FirrtlPB_Module_ExternalModule_Parameter* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Module_ExternalModule_Parameter>(Arena*);
template<> ::firrtl::FirrtlPB_Module_UserModule* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Module_UserModule>(Arena*);
template<> ::firrtl::FirrtlPB_Port* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Port>(Arena*);
template<> ::firrtl::FirrtlPB_SourceInfo* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_SourceInfo>(Arena*);
template<> ::firrtl::FirrtlPB_SourceInfo_None* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_SourceInfo_None>(Arena*);
template<> ::firrtl::FirrtlPB_SourceInfo_Position* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_SourceInfo_Position>(Arena*);
template<> ::firrtl::FirrtlPB_Statement* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_Attach* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_Attach>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_CMemory* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_CMemory>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_Connect* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_Connect>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_Instance* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_Instance>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_IsInvalid* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_IsInvalid>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_Memory* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_Memory>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_MemoryPort* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_MemoryPort>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_Node* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_Node>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_PartialConnect* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_PartialConnect>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_Printf* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_Printf>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_Register* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_Register>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_Skip* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_Skip>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_Stop* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_Stop>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_When* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_When>(Arena*);
template<> ::firrtl::FirrtlPB_Statement_Wire* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Statement_Wire>(Arena*);
template<> ::firrtl::FirrtlPB_Top* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Top>(Arena*);
template<> ::firrtl::FirrtlPB_Type* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Type>(Arena*);
template<> ::firrtl::FirrtlPB_Type_AnalogType* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Type_AnalogType>(Arena*);
template<> ::firrtl::FirrtlPB_Type_AsyncResetType* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Type_AsyncResetType>(Arena*);
template<> ::firrtl::FirrtlPB_Type_BundleType* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Type_BundleType>(Arena*);
template<> ::firrtl::FirrtlPB_Type_BundleType_Field* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Type_BundleType_Field>(Arena*);
template<> ::firrtl::FirrtlPB_Type_ClockType* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Type_ClockType>(Arena*);
template<> ::firrtl::FirrtlPB_Type_FixedType* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Type_FixedType>(Arena*);
template<> ::firrtl::FirrtlPB_Type_ResetType* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Type_ResetType>(Arena*);
template<> ::firrtl::FirrtlPB_Type_SIntType* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Type_SIntType>(Arena*);
template<> ::firrtl::FirrtlPB_Type_UIntType* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Type_UIntType>(Arena*);
template<> ::firrtl::FirrtlPB_Type_VectorType* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Type_VectorType>(Arena*);
template<> ::firrtl::FirrtlPB_Width* Arena::CreateMaybeMessage<::firrtl::FirrtlPB_Width>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace firrtl {

enum FirrtlPB_SourceInfo_None_Reason : int {
  FirrtlPB_SourceInfo_None_Reason_NONE_SOURCE_INFO_REASON_UNKNOWN = 0,
  FirrtlPB_SourceInfo_None_Reason_NONE_SOURCE_INFO_REASON_UNLOCATABLE = 1,
  FirrtlPB_SourceInfo_None_Reason_NONE_SOURCE_INFO_REASON_SUPPRESSED = 2,
  FirrtlPB_SourceInfo_None_Reason_NONE_SOURCE_INFO_REASON_DEPRECATED = 3,
  FirrtlPB_SourceInfo_None_Reason_FirrtlPB_SourceInfo_None_Reason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FirrtlPB_SourceInfo_None_Reason_FirrtlPB_SourceInfo_None_Reason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FirrtlPB_SourceInfo_None_Reason_IsValid(int value);
constexpr FirrtlPB_SourceInfo_None_Reason FirrtlPB_SourceInfo_None_Reason_Reason_MIN = FirrtlPB_SourceInfo_None_Reason_NONE_SOURCE_INFO_REASON_UNKNOWN;
constexpr FirrtlPB_SourceInfo_None_Reason FirrtlPB_SourceInfo_None_Reason_Reason_MAX = FirrtlPB_SourceInfo_None_Reason_NONE_SOURCE_INFO_REASON_DEPRECATED;
constexpr int FirrtlPB_SourceInfo_None_Reason_Reason_ARRAYSIZE = FirrtlPB_SourceInfo_None_Reason_Reason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirrtlPB_SourceInfo_None_Reason_descriptor();
template<typename T>
inline const std::string& FirrtlPB_SourceInfo_None_Reason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FirrtlPB_SourceInfo_None_Reason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FirrtlPB_SourceInfo_None_Reason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FirrtlPB_SourceInfo_None_Reason_descriptor(), enum_t_value);
}
inline bool FirrtlPB_SourceInfo_None_Reason_Parse(
    const std::string& name, FirrtlPB_SourceInfo_None_Reason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FirrtlPB_SourceInfo_None_Reason>(
    FirrtlPB_SourceInfo_None_Reason_descriptor(), name, value);
}
enum FirrtlPB_Statement_MemoryPort_Direction : int {
  FirrtlPB_Statement_MemoryPort_Direction_MEMORY_PORT_DIRECTION_UNKNOWN = 0,
  FirrtlPB_Statement_MemoryPort_Direction_MEMORY_PORT_DIRECTION_INFER = 1,
  FirrtlPB_Statement_MemoryPort_Direction_MEMORY_PORT_DIRECTION_READ = 2,
  FirrtlPB_Statement_MemoryPort_Direction_MEMORY_PORT_DIRECTION_WRITE = 3,
  FirrtlPB_Statement_MemoryPort_Direction_MEMORY_PORT_DIRECTION_READ_WRITE = 4,
  FirrtlPB_Statement_MemoryPort_Direction_FirrtlPB_Statement_MemoryPort_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FirrtlPB_Statement_MemoryPort_Direction_FirrtlPB_Statement_MemoryPort_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FirrtlPB_Statement_MemoryPort_Direction_IsValid(int value);
constexpr FirrtlPB_Statement_MemoryPort_Direction FirrtlPB_Statement_MemoryPort_Direction_Direction_MIN = FirrtlPB_Statement_MemoryPort_Direction_MEMORY_PORT_DIRECTION_UNKNOWN;
constexpr FirrtlPB_Statement_MemoryPort_Direction FirrtlPB_Statement_MemoryPort_Direction_Direction_MAX = FirrtlPB_Statement_MemoryPort_Direction_MEMORY_PORT_DIRECTION_READ_WRITE;
constexpr int FirrtlPB_Statement_MemoryPort_Direction_Direction_ARRAYSIZE = FirrtlPB_Statement_MemoryPort_Direction_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirrtlPB_Statement_MemoryPort_Direction_descriptor();
template<typename T>
inline const std::string& FirrtlPB_Statement_MemoryPort_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FirrtlPB_Statement_MemoryPort_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FirrtlPB_Statement_MemoryPort_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FirrtlPB_Statement_MemoryPort_Direction_descriptor(), enum_t_value);
}
inline bool FirrtlPB_Statement_MemoryPort_Direction_Parse(
    const std::string& name, FirrtlPB_Statement_MemoryPort_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FirrtlPB_Statement_MemoryPort_Direction>(
    FirrtlPB_Statement_MemoryPort_Direction_descriptor(), name, value);
}
enum FirrtlPB_Statement_ReadUnderWrite : int {
  FirrtlPB_Statement_ReadUnderWrite_UNDEFINED = 0,
  FirrtlPB_Statement_ReadUnderWrite_OLD = 1,
  FirrtlPB_Statement_ReadUnderWrite_NEW = 2,
  FirrtlPB_Statement_ReadUnderWrite_FirrtlPB_Statement_ReadUnderWrite_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FirrtlPB_Statement_ReadUnderWrite_FirrtlPB_Statement_ReadUnderWrite_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FirrtlPB_Statement_ReadUnderWrite_IsValid(int value);
constexpr FirrtlPB_Statement_ReadUnderWrite FirrtlPB_Statement_ReadUnderWrite_ReadUnderWrite_MIN = FirrtlPB_Statement_ReadUnderWrite_UNDEFINED;
constexpr FirrtlPB_Statement_ReadUnderWrite FirrtlPB_Statement_ReadUnderWrite_ReadUnderWrite_MAX = FirrtlPB_Statement_ReadUnderWrite_NEW;
constexpr int FirrtlPB_Statement_ReadUnderWrite_ReadUnderWrite_ARRAYSIZE = FirrtlPB_Statement_ReadUnderWrite_ReadUnderWrite_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirrtlPB_Statement_ReadUnderWrite_descriptor();
template<typename T>
inline const std::string& FirrtlPB_Statement_ReadUnderWrite_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FirrtlPB_Statement_ReadUnderWrite>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FirrtlPB_Statement_ReadUnderWrite_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FirrtlPB_Statement_ReadUnderWrite_descriptor(), enum_t_value);
}
inline bool FirrtlPB_Statement_ReadUnderWrite_Parse(
    const std::string& name, FirrtlPB_Statement_ReadUnderWrite* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FirrtlPB_Statement_ReadUnderWrite>(
    FirrtlPB_Statement_ReadUnderWrite_descriptor(), name, value);
}
enum FirrtlPB_Port_Direction : int {
  FirrtlPB_Port_Direction_PORT_DIRECTION_UNKNOWN = 0,
  FirrtlPB_Port_Direction_PORT_DIRECTION_IN = 1,
  FirrtlPB_Port_Direction_PORT_DIRECTION_OUT = 2,
  FirrtlPB_Port_Direction_FirrtlPB_Port_Direction_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FirrtlPB_Port_Direction_FirrtlPB_Port_Direction_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FirrtlPB_Port_Direction_IsValid(int value);
constexpr FirrtlPB_Port_Direction FirrtlPB_Port_Direction_Direction_MIN = FirrtlPB_Port_Direction_PORT_DIRECTION_UNKNOWN;
constexpr FirrtlPB_Port_Direction FirrtlPB_Port_Direction_Direction_MAX = FirrtlPB_Port_Direction_PORT_DIRECTION_OUT;
constexpr int FirrtlPB_Port_Direction_Direction_ARRAYSIZE = FirrtlPB_Port_Direction_Direction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirrtlPB_Port_Direction_descriptor();
template<typename T>
inline const std::string& FirrtlPB_Port_Direction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FirrtlPB_Port_Direction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FirrtlPB_Port_Direction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FirrtlPB_Port_Direction_descriptor(), enum_t_value);
}
inline bool FirrtlPB_Port_Direction_Parse(
    const std::string& name, FirrtlPB_Port_Direction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FirrtlPB_Port_Direction>(
    FirrtlPB_Port_Direction_descriptor(), name, value);
}
enum FirrtlPB_Expression_PrimOp_Op : int {
  FirrtlPB_Expression_PrimOp_Op_OP_UNKNOWN = 0,
  FirrtlPB_Expression_PrimOp_Op_OP_ADD = 1,
  FirrtlPB_Expression_PrimOp_Op_OP_SUB = 2,
  FirrtlPB_Expression_PrimOp_Op_OP_TAIL = 3,
  FirrtlPB_Expression_PrimOp_Op_OP_HEAD = 4,
  FirrtlPB_Expression_PrimOp_Op_OP_TIMES = 5,
  FirrtlPB_Expression_PrimOp_Op_OP_DIVIDE = 6,
  FirrtlPB_Expression_PrimOp_Op_OP_REM = 7,
  FirrtlPB_Expression_PrimOp_Op_OP_SHIFT_LEFT = 8,
  FirrtlPB_Expression_PrimOp_Op_OP_SHIFT_RIGHT = 9,
  FirrtlPB_Expression_PrimOp_Op_OP_DYNAMIC_SHIFT_LEFT = 10,
  FirrtlPB_Expression_PrimOp_Op_OP_DYNAMIC_SHIFT_RIGHT = 11,
  FirrtlPB_Expression_PrimOp_Op_OP_BIT_AND = 12,
  FirrtlPB_Expression_PrimOp_Op_OP_BIT_OR = 13,
  FirrtlPB_Expression_PrimOp_Op_OP_BIT_XOR = 14,
  FirrtlPB_Expression_PrimOp_Op_OP_BIT_NOT = 15,
  FirrtlPB_Expression_PrimOp_Op_OP_CONCAT = 16,
  FirrtlPB_Expression_PrimOp_Op_OP_LESS = 17,
  FirrtlPB_Expression_PrimOp_Op_OP_LESS_EQ = 18,
  FirrtlPB_Expression_PrimOp_Op_OP_GREATER = 19,
  FirrtlPB_Expression_PrimOp_Op_OP_GREATER_EQ = 20,
  FirrtlPB_Expression_PrimOp_Op_OP_EQUAL = 21,
  FirrtlPB_Expression_PrimOp_Op_OP_PAD = 22,
  FirrtlPB_Expression_PrimOp_Op_OP_NOT_EQUAL = 23,
  FirrtlPB_Expression_PrimOp_Op_OP_NEG = 24,
  FirrtlPB_Expression_PrimOp_Op_OP_XOR_REDUCE = 26,
  FirrtlPB_Expression_PrimOp_Op_OP_CONVERT = 27,
  FirrtlPB_Expression_PrimOp_Op_OP_AS_UINT = 28,
  FirrtlPB_Expression_PrimOp_Op_OP_AS_SINT = 29,
  FirrtlPB_Expression_PrimOp_Op_OP_EXTRACT_BITS = 30,
  FirrtlPB_Expression_PrimOp_Op_OP_AS_CLOCK = 31,
  FirrtlPB_Expression_PrimOp_Op_OP_AS_FIXED_POINT = 32,
  FirrtlPB_Expression_PrimOp_Op_OP_AND_REDUCE = 33,
  FirrtlPB_Expression_PrimOp_Op_OP_OR_REDUCE = 34,
  FirrtlPB_Expression_PrimOp_Op_OP_INCREASE_PRECISION = 35,
  FirrtlPB_Expression_PrimOp_Op_OP_DECREASE_PRECISION = 36,
  FirrtlPB_Expression_PrimOp_Op_OP_SET_PRECISION = 37,
  FirrtlPB_Expression_PrimOp_Op_OP_AS_ASYNC_RESET = 38,
  FirrtlPB_Expression_PrimOp_Op_OP_WRAP = 39,
  FirrtlPB_Expression_PrimOp_Op_OP_CLIP = 40,
  FirrtlPB_Expression_PrimOp_Op_OP_SQUEEZE = 41,
  FirrtlPB_Expression_PrimOp_Op_OP_AS_INTERVAL = 42,
  FirrtlPB_Expression_PrimOp_Op_FirrtlPB_Expression_PrimOp_Op_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  FirrtlPB_Expression_PrimOp_Op_FirrtlPB_Expression_PrimOp_Op_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool FirrtlPB_Expression_PrimOp_Op_IsValid(int value);
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp_Op_Op_MIN = FirrtlPB_Expression_PrimOp_Op_OP_UNKNOWN;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp_Op_Op_MAX = FirrtlPB_Expression_PrimOp_Op_OP_AS_INTERVAL;
constexpr int FirrtlPB_Expression_PrimOp_Op_Op_ARRAYSIZE = FirrtlPB_Expression_PrimOp_Op_Op_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirrtlPB_Expression_PrimOp_Op_descriptor();
template<typename T>
inline const std::string& FirrtlPB_Expression_PrimOp_Op_Name(T enum_t_value) {
  static_assert(::std::is_same<T, FirrtlPB_Expression_PrimOp_Op>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function FirrtlPB_Expression_PrimOp_Op_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    FirrtlPB_Expression_PrimOp_Op_descriptor(), enum_t_value);
}
inline bool FirrtlPB_Expression_PrimOp_Op_Parse(
    const std::string& name, FirrtlPB_Expression_PrimOp_Op* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<FirrtlPB_Expression_PrimOp_Op>(
    FirrtlPB_Expression_PrimOp_Op_descriptor(), name, value);
}
// ===================================================================

class FirrtlPB_SourceInfo_None :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.SourceInfo.None) */ {
 public:
  FirrtlPB_SourceInfo_None();
  virtual ~FirrtlPB_SourceInfo_None();

  FirrtlPB_SourceInfo_None(const FirrtlPB_SourceInfo_None& from);
  FirrtlPB_SourceInfo_None(FirrtlPB_SourceInfo_None&& from) noexcept
    : FirrtlPB_SourceInfo_None() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_SourceInfo_None& operator=(const FirrtlPB_SourceInfo_None& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_SourceInfo_None& operator=(FirrtlPB_SourceInfo_None&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_SourceInfo_None& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_SourceInfo_None* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_SourceInfo_None*>(
               &_FirrtlPB_SourceInfo_None_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FirrtlPB_SourceInfo_None& a, FirrtlPB_SourceInfo_None& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_SourceInfo_None* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_SourceInfo_None* New() const final {
    return CreateMaybeMessage<FirrtlPB_SourceInfo_None>(nullptr);
  }

  FirrtlPB_SourceInfo_None* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_SourceInfo_None>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_SourceInfo_None& from);
  void MergeFrom(const FirrtlPB_SourceInfo_None& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_SourceInfo_None* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.SourceInfo.None";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_SourceInfo_None_Reason Reason;
  static constexpr Reason NONE_SOURCE_INFO_REASON_UNKNOWN =
    FirrtlPB_SourceInfo_None_Reason_NONE_SOURCE_INFO_REASON_UNKNOWN;
  static constexpr Reason NONE_SOURCE_INFO_REASON_UNLOCATABLE =
    FirrtlPB_SourceInfo_None_Reason_NONE_SOURCE_INFO_REASON_UNLOCATABLE;
  static constexpr Reason NONE_SOURCE_INFO_REASON_SUPPRESSED =
    FirrtlPB_SourceInfo_None_Reason_NONE_SOURCE_INFO_REASON_SUPPRESSED;
  static constexpr Reason NONE_SOURCE_INFO_REASON_DEPRECATED =
    FirrtlPB_SourceInfo_None_Reason_NONE_SOURCE_INFO_REASON_DEPRECATED;
  static inline bool Reason_IsValid(int value) {
    return FirrtlPB_SourceInfo_None_Reason_IsValid(value);
  }
  static constexpr Reason Reason_MIN =
    FirrtlPB_SourceInfo_None_Reason_Reason_MIN;
  static constexpr Reason Reason_MAX =
    FirrtlPB_SourceInfo_None_Reason_Reason_MAX;
  static constexpr int Reason_ARRAYSIZE =
    FirrtlPB_SourceInfo_None_Reason_Reason_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Reason_descriptor() {
    return FirrtlPB_SourceInfo_None_Reason_descriptor();
  }
  template<typename T>
  static inline const std::string& Reason_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Reason>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Reason_Name.");
    return FirrtlPB_SourceInfo_None_Reason_Name(enum_t_value);
  }
  static inline bool Reason_Parse(const std::string& name,
      Reason* value) {
    return FirrtlPB_SourceInfo_None_Reason_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 1,
  };
  // .firrtl.FirrtlPB.SourceInfo.None.Reason reason = 1;
  void clear_reason();
  ::firrtl::FirrtlPB_SourceInfo_None_Reason reason() const;
  void set_reason(::firrtl::FirrtlPB_SourceInfo_None_Reason value);
  private:
  ::firrtl::FirrtlPB_SourceInfo_None_Reason _internal_reason() const;
  void _internal_set_reason(::firrtl::FirrtlPB_SourceInfo_None_Reason value);
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.SourceInfo.None)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_SourceInfo_Position :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.SourceInfo.Position) */ {
 public:
  FirrtlPB_SourceInfo_Position();
  virtual ~FirrtlPB_SourceInfo_Position();

  FirrtlPB_SourceInfo_Position(const FirrtlPB_SourceInfo_Position& from);
  FirrtlPB_SourceInfo_Position(FirrtlPB_SourceInfo_Position&& from) noexcept
    : FirrtlPB_SourceInfo_Position() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_SourceInfo_Position& operator=(const FirrtlPB_SourceInfo_Position& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_SourceInfo_Position& operator=(FirrtlPB_SourceInfo_Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_SourceInfo_Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_SourceInfo_Position* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_SourceInfo_Position*>(
               &_FirrtlPB_SourceInfo_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(FirrtlPB_SourceInfo_Position& a, FirrtlPB_SourceInfo_Position& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_SourceInfo_Position* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_SourceInfo_Position* New() const final {
    return CreateMaybeMessage<FirrtlPB_SourceInfo_Position>(nullptr);
  }

  FirrtlPB_SourceInfo_Position* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_SourceInfo_Position>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_SourceInfo_Position& from);
  void MergeFrom(const FirrtlPB_SourceInfo_Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_SourceInfo_Position* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.SourceInfo.Position";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
    kLineFieldNumber = 2,
    kColumnFieldNumber = 3,
  };
  // string filename = 1;
  void clear_filename();
  const std::string& filename() const;
  void set_filename(const std::string& value);
  void set_filename(std::string&& value);
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  std::string* mutable_filename();
  std::string* release_filename();
  void set_allocated_filename(std::string* filename);
  private:
  const std::string& _internal_filename() const;
  void _internal_set_filename(const std::string& value);
  std::string* _internal_mutable_filename();
  public:

  // uint32 line = 2;
  void clear_line();
  ::PROTOBUF_NAMESPACE_ID::uint32 line() const;
  void set_line(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_line() const;
  void _internal_set_line(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 column = 3;
  void clear_column();
  ::PROTOBUF_NAMESPACE_ID::uint32 column() const;
  void set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_column() const;
  void _internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.SourceInfo.Position)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr filename_;
  ::PROTOBUF_NAMESPACE_ID::uint32 line_;
  ::PROTOBUF_NAMESPACE_ID::uint32 column_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_SourceInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.SourceInfo) */ {
 public:
  FirrtlPB_SourceInfo();
  virtual ~FirrtlPB_SourceInfo();

  FirrtlPB_SourceInfo(const FirrtlPB_SourceInfo& from);
  FirrtlPB_SourceInfo(FirrtlPB_SourceInfo&& from) noexcept
    : FirrtlPB_SourceInfo() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_SourceInfo& operator=(const FirrtlPB_SourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_SourceInfo& operator=(FirrtlPB_SourceInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_SourceInfo& default_instance();

  enum SourceInfoCase {
    kNone = 1,
    kPosition = 2,
    kText = 3,
    SOURCE_INFO_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_SourceInfo* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_SourceInfo*>(
               &_FirrtlPB_SourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(FirrtlPB_SourceInfo& a, FirrtlPB_SourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_SourceInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_SourceInfo* New() const final {
    return CreateMaybeMessage<FirrtlPB_SourceInfo>(nullptr);
  }

  FirrtlPB_SourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_SourceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_SourceInfo& from);
  void MergeFrom(const FirrtlPB_SourceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_SourceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.SourceInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_SourceInfo_None None;
  typedef FirrtlPB_SourceInfo_Position Position;

  // accessors -------------------------------------------------------

  enum : int {
    kNoneFieldNumber = 1,
    kPositionFieldNumber = 2,
    kTextFieldNumber = 3,
  };
  // .firrtl.FirrtlPB.SourceInfo.None none = 1;
  bool has_none() const;
  private:
  bool _internal_has_none() const;
  public:
  void clear_none();
  const ::firrtl::FirrtlPB_SourceInfo_None& none() const;
  ::firrtl::FirrtlPB_SourceInfo_None* release_none();
  ::firrtl::FirrtlPB_SourceInfo_None* mutable_none();
  void set_allocated_none(::firrtl::FirrtlPB_SourceInfo_None* none);
  private:
  const ::firrtl::FirrtlPB_SourceInfo_None& _internal_none() const;
  ::firrtl::FirrtlPB_SourceInfo_None* _internal_mutable_none();
  public:

  // .firrtl.FirrtlPB.SourceInfo.Position position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::firrtl::FirrtlPB_SourceInfo_Position& position() const;
  ::firrtl::FirrtlPB_SourceInfo_Position* release_position();
  ::firrtl::FirrtlPB_SourceInfo_Position* mutable_position();
  void set_allocated_position(::firrtl::FirrtlPB_SourceInfo_Position* position);
  private:
  const ::firrtl::FirrtlPB_SourceInfo_Position& _internal_position() const;
  ::firrtl::FirrtlPB_SourceInfo_Position* _internal_mutable_position();
  public:

  // string text = 3;
  private:
  bool _internal_has_text() const;
  public:
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  void clear_source_info();
  SourceInfoCase source_info_case() const;
  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.SourceInfo)
 private:
  class _Internal;
  void set_has_none();
  void set_has_position();
  void set_has_text();

  inline bool has_source_info() const;
  inline void clear_has_source_info();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union SourceInfoUnion {
    SourceInfoUnion() {}
    ::firrtl::FirrtlPB_SourceInfo_None* none_;
    ::firrtl::FirrtlPB_SourceInfo_Position* position_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  } source_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_BigInt :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.BigInt) */ {
 public:
  FirrtlPB_BigInt();
  virtual ~FirrtlPB_BigInt();

  FirrtlPB_BigInt(const FirrtlPB_BigInt& from);
  FirrtlPB_BigInt(FirrtlPB_BigInt&& from) noexcept
    : FirrtlPB_BigInt() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_BigInt& operator=(const FirrtlPB_BigInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_BigInt& operator=(FirrtlPB_BigInt&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_BigInt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_BigInt* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_BigInt*>(
               &_FirrtlPB_BigInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FirrtlPB_BigInt& a, FirrtlPB_BigInt& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_BigInt* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_BigInt* New() const final {
    return CreateMaybeMessage<FirrtlPB_BigInt>(nullptr);
  }

  FirrtlPB_BigInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_BigInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_BigInt& from);
  void MergeFrom(const FirrtlPB_BigInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_BigInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.BigInt";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // bytes value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.BigInt)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Top :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Top) */ {
 public:
  FirrtlPB_Top();
  virtual ~FirrtlPB_Top();

  FirrtlPB_Top(const FirrtlPB_Top& from);
  FirrtlPB_Top(FirrtlPB_Top&& from) noexcept
    : FirrtlPB_Top() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Top& operator=(const FirrtlPB_Top& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Top& operator=(FirrtlPB_Top&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Top& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Top* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Top*>(
               &_FirrtlPB_Top_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(FirrtlPB_Top& a, FirrtlPB_Top& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Top* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Top* New() const final {
    return CreateMaybeMessage<FirrtlPB_Top>(nullptr);
  }

  FirrtlPB_Top* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Top>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Top& from);
  void MergeFrom(const FirrtlPB_Top& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Top* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Top";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Top)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Circuit :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Circuit) */ {
 public:
  FirrtlPB_Circuit();
  virtual ~FirrtlPB_Circuit();

  FirrtlPB_Circuit(const FirrtlPB_Circuit& from);
  FirrtlPB_Circuit(FirrtlPB_Circuit&& from) noexcept
    : FirrtlPB_Circuit() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Circuit& operator=(const FirrtlPB_Circuit& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Circuit& operator=(FirrtlPB_Circuit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Circuit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Circuit* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Circuit*>(
               &_FirrtlPB_Circuit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(FirrtlPB_Circuit& a, FirrtlPB_Circuit& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Circuit* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Circuit* New() const final {
    return CreateMaybeMessage<FirrtlPB_Circuit>(nullptr);
  }

  FirrtlPB_Circuit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Circuit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Circuit& from);
  void MergeFrom(const FirrtlPB_Circuit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Circuit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Circuit";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleFieldNumber = 1,
    kTopFieldNumber = 2,
  };
  // repeated .firrtl.FirrtlPB.Module module = 1;
  int module_size() const;
  private:
  int _internal_module_size() const;
  public:
  void clear_module();
  ::firrtl::FirrtlPB_Module* mutable_module(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Module >*
      mutable_module();
  private:
  const ::firrtl::FirrtlPB_Module& _internal_module(int index) const;
  ::firrtl::FirrtlPB_Module* _internal_add_module();
  public:
  const ::firrtl::FirrtlPB_Module& module(int index) const;
  ::firrtl::FirrtlPB_Module* add_module();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Module >&
      module() const;

  // repeated .firrtl.FirrtlPB.Top top = 2;
  int top_size() const;
  private:
  int _internal_top_size() const;
  public:
  void clear_top();
  ::firrtl::FirrtlPB_Top* mutable_top(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Top >*
      mutable_top();
  private:
  const ::firrtl::FirrtlPB_Top& _internal_top(int index) const;
  ::firrtl::FirrtlPB_Top* _internal_add_top();
  public:
  const ::firrtl::FirrtlPB_Top& top(int index) const;
  ::firrtl::FirrtlPB_Top* add_top();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Top >&
      top() const;

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Circuit)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Module > module_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Top > top_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Module_ExternalModule_Parameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Module.ExternalModule.Parameter) */ {
 public:
  FirrtlPB_Module_ExternalModule_Parameter();
  virtual ~FirrtlPB_Module_ExternalModule_Parameter();

  FirrtlPB_Module_ExternalModule_Parameter(const FirrtlPB_Module_ExternalModule_Parameter& from);
  FirrtlPB_Module_ExternalModule_Parameter(FirrtlPB_Module_ExternalModule_Parameter&& from) noexcept
    : FirrtlPB_Module_ExternalModule_Parameter() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Module_ExternalModule_Parameter& operator=(const FirrtlPB_Module_ExternalModule_Parameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Module_ExternalModule_Parameter& operator=(FirrtlPB_Module_ExternalModule_Parameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Module_ExternalModule_Parameter& default_instance();

  enum ValueCase {
    kInteger = 2,
    kDouble = 3,
    kString = 4,
    kRawString = 5,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Module_ExternalModule_Parameter* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Module_ExternalModule_Parameter*>(
               &_FirrtlPB_Module_ExternalModule_Parameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(FirrtlPB_Module_ExternalModule_Parameter& a, FirrtlPB_Module_ExternalModule_Parameter& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Module_ExternalModule_Parameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Module_ExternalModule_Parameter* New() const final {
    return CreateMaybeMessage<FirrtlPB_Module_ExternalModule_Parameter>(nullptr);
  }

  FirrtlPB_Module_ExternalModule_Parameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Module_ExternalModule_Parameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Module_ExternalModule_Parameter& from);
  void MergeFrom(const FirrtlPB_Module_ExternalModule_Parameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Module_ExternalModule_Parameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Module.ExternalModule.Parameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIntegerFieldNumber = 2,
    kDoubleFieldNumber = 3,
    kStringFieldNumber = 4,
    kRawStringFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .firrtl.FirrtlPB.BigInt integer = 2;
  bool has_integer() const;
  private:
  bool _internal_has_integer() const;
  public:
  void clear_integer();
  const ::firrtl::FirrtlPB_BigInt& integer() const;
  ::firrtl::FirrtlPB_BigInt* release_integer();
  ::firrtl::FirrtlPB_BigInt* mutable_integer();
  void set_allocated_integer(::firrtl::FirrtlPB_BigInt* integer);
  private:
  const ::firrtl::FirrtlPB_BigInt& _internal_integer() const;
  ::firrtl::FirrtlPB_BigInt* _internal_mutable_integer();
  public:

  // double double = 3;
  private:
  bool _internal_has_double_() const;
  public:
  void clear_double_();
  double double_() const;
  void set_double_(double value);
  private:
  double _internal_double_() const;
  void _internal_set_double_(double value);
  public:

  // string string = 4;
  private:
  bool _internal_has_string() const;
  public:
  void clear_string();
  const std::string& string() const;
  void set_string(const std::string& value);
  void set_string(std::string&& value);
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  std::string* mutable_string();
  std::string* release_string();
  void set_allocated_string(std::string* string);
  private:
  const std::string& _internal_string() const;
  void _internal_set_string(const std::string& value);
  std::string* _internal_mutable_string();
  public:

  // string raw_string = 5;
  private:
  bool _internal_has_raw_string() const;
  public:
  void clear_raw_string();
  const std::string& raw_string() const;
  void set_raw_string(const std::string& value);
  void set_raw_string(std::string&& value);
  void set_raw_string(const char* value);
  void set_raw_string(const char* value, size_t size);
  std::string* mutable_raw_string();
  std::string* release_raw_string();
  void set_allocated_raw_string(std::string* raw_string);
  private:
  const std::string& _internal_raw_string() const;
  void _internal_set_raw_string(const std::string& value);
  std::string* _internal_mutable_raw_string();
  public:

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
 private:
  class _Internal;
  void set_has_integer();
  void set_has_double_();
  void set_has_string();
  void set_has_raw_string();

  inline bool has_value() const;
  inline void clear_has_value();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  union ValueUnion {
    ValueUnion() {}
    ::firrtl::FirrtlPB_BigInt* integer_;
    double double__;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_string_;
  } value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Module_ExternalModule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Module.ExternalModule) */ {
 public:
  FirrtlPB_Module_ExternalModule();
  virtual ~FirrtlPB_Module_ExternalModule();

  FirrtlPB_Module_ExternalModule(const FirrtlPB_Module_ExternalModule& from);
  FirrtlPB_Module_ExternalModule(FirrtlPB_Module_ExternalModule&& from) noexcept
    : FirrtlPB_Module_ExternalModule() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Module_ExternalModule& operator=(const FirrtlPB_Module_ExternalModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Module_ExternalModule& operator=(FirrtlPB_Module_ExternalModule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Module_ExternalModule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Module_ExternalModule* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Module_ExternalModule*>(
               &_FirrtlPB_Module_ExternalModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(FirrtlPB_Module_ExternalModule& a, FirrtlPB_Module_ExternalModule& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Module_ExternalModule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Module_ExternalModule* New() const final {
    return CreateMaybeMessage<FirrtlPB_Module_ExternalModule>(nullptr);
  }

  FirrtlPB_Module_ExternalModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Module_ExternalModule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Module_ExternalModule& from);
  void MergeFrom(const FirrtlPB_Module_ExternalModule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Module_ExternalModule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Module.ExternalModule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_Module_ExternalModule_Parameter Parameter;

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 2,
    kParameterFieldNumber = 4,
    kIdFieldNumber = 1,
    kDefinedNameFieldNumber = 3,
  };
  // repeated .firrtl.FirrtlPB.Port port = 2;
  int port_size() const;
  private:
  int _internal_port_size() const;
  public:
  void clear_port();
  ::firrtl::FirrtlPB_Port* mutable_port(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Port >*
      mutable_port();
  private:
  const ::firrtl::FirrtlPB_Port& _internal_port(int index) const;
  ::firrtl::FirrtlPB_Port* _internal_add_port();
  public:
  const ::firrtl::FirrtlPB_Port& port(int index) const;
  ::firrtl::FirrtlPB_Port* add_port();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Port >&
      port() const;

  // repeated .firrtl.FirrtlPB.Module.ExternalModule.Parameter parameter = 4;
  int parameter_size() const;
  private:
  int _internal_parameter_size() const;
  public:
  void clear_parameter();
  ::firrtl::FirrtlPB_Module_ExternalModule_Parameter* mutable_parameter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Module_ExternalModule_Parameter >*
      mutable_parameter();
  private:
  const ::firrtl::FirrtlPB_Module_ExternalModule_Parameter& _internal_parameter(int index) const;
  ::firrtl::FirrtlPB_Module_ExternalModule_Parameter* _internal_add_parameter();
  public:
  const ::firrtl::FirrtlPB_Module_ExternalModule_Parameter& parameter(int index) const;
  ::firrtl::FirrtlPB_Module_ExternalModule_Parameter* add_parameter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Module_ExternalModule_Parameter >&
      parameter() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string defined_name = 3;
  void clear_defined_name();
  const std::string& defined_name() const;
  void set_defined_name(const std::string& value);
  void set_defined_name(std::string&& value);
  void set_defined_name(const char* value);
  void set_defined_name(const char* value, size_t size);
  std::string* mutable_defined_name();
  std::string* release_defined_name();
  void set_allocated_defined_name(std::string* defined_name);
  private:
  const std::string& _internal_defined_name() const;
  void _internal_set_defined_name(const std::string& value);
  std::string* _internal_mutable_defined_name();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Module.ExternalModule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Port > port_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Module_ExternalModule_Parameter > parameter_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr defined_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Module_UserModule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Module.UserModule) */ {
 public:
  FirrtlPB_Module_UserModule();
  virtual ~FirrtlPB_Module_UserModule();

  FirrtlPB_Module_UserModule(const FirrtlPB_Module_UserModule& from);
  FirrtlPB_Module_UserModule(FirrtlPB_Module_UserModule&& from) noexcept
    : FirrtlPB_Module_UserModule() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Module_UserModule& operator=(const FirrtlPB_Module_UserModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Module_UserModule& operator=(FirrtlPB_Module_UserModule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Module_UserModule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Module_UserModule* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Module_UserModule*>(
               &_FirrtlPB_Module_UserModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(FirrtlPB_Module_UserModule& a, FirrtlPB_Module_UserModule& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Module_UserModule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Module_UserModule* New() const final {
    return CreateMaybeMessage<FirrtlPB_Module_UserModule>(nullptr);
  }

  FirrtlPB_Module_UserModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Module_UserModule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Module_UserModule& from);
  void MergeFrom(const FirrtlPB_Module_UserModule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Module_UserModule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Module.UserModule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortFieldNumber = 2,
    kStatementFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .firrtl.FirrtlPB.Port port = 2;
  int port_size() const;
  private:
  int _internal_port_size() const;
  public:
  void clear_port();
  ::firrtl::FirrtlPB_Port* mutable_port(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Port >*
      mutable_port();
  private:
  const ::firrtl::FirrtlPB_Port& _internal_port(int index) const;
  ::firrtl::FirrtlPB_Port* _internal_add_port();
  public:
  const ::firrtl::FirrtlPB_Port& port(int index) const;
  ::firrtl::FirrtlPB_Port* add_port();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Port >&
      port() const;

  // repeated .firrtl.FirrtlPB.Statement statement = 3;
  int statement_size() const;
  private:
  int _internal_statement_size() const;
  public:
  void clear_statement();
  ::firrtl::FirrtlPB_Statement* mutable_statement(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement >*
      mutable_statement();
  private:
  const ::firrtl::FirrtlPB_Statement& _internal_statement(int index) const;
  ::firrtl::FirrtlPB_Statement* _internal_add_statement();
  public:
  const ::firrtl::FirrtlPB_Statement& statement(int index) const;
  ::firrtl::FirrtlPB_Statement* add_statement();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement >&
      statement() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Module.UserModule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Port > port_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement > statement_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Module :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Module) */ {
 public:
  FirrtlPB_Module();
  virtual ~FirrtlPB_Module();

  FirrtlPB_Module(const FirrtlPB_Module& from);
  FirrtlPB_Module(FirrtlPB_Module&& from) noexcept
    : FirrtlPB_Module() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Module& operator=(const FirrtlPB_Module& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Module& operator=(FirrtlPB_Module&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Module& default_instance();

  enum ModuleCase {
    kExternalModule = 1,
    kUserModule = 2,
    MODULE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Module* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Module*>(
               &_FirrtlPB_Module_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(FirrtlPB_Module& a, FirrtlPB_Module& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Module* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Module* New() const final {
    return CreateMaybeMessage<FirrtlPB_Module>(nullptr);
  }

  FirrtlPB_Module* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Module>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Module& from);
  void MergeFrom(const FirrtlPB_Module& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Module* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Module";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_Module_ExternalModule ExternalModule;
  typedef FirrtlPB_Module_UserModule UserModule;

  // accessors -------------------------------------------------------

  enum : int {
    kExternalModuleFieldNumber = 1,
    kUserModuleFieldNumber = 2,
  };
  // .firrtl.FirrtlPB.Module.ExternalModule external_module = 1;
  bool has_external_module() const;
  private:
  bool _internal_has_external_module() const;
  public:
  void clear_external_module();
  const ::firrtl::FirrtlPB_Module_ExternalModule& external_module() const;
  ::firrtl::FirrtlPB_Module_ExternalModule* release_external_module();
  ::firrtl::FirrtlPB_Module_ExternalModule* mutable_external_module();
  void set_allocated_external_module(::firrtl::FirrtlPB_Module_ExternalModule* external_module);
  private:
  const ::firrtl::FirrtlPB_Module_ExternalModule& _internal_external_module() const;
  ::firrtl::FirrtlPB_Module_ExternalModule* _internal_mutable_external_module();
  public:

  // .firrtl.FirrtlPB.Module.UserModule user_module = 2;
  bool has_user_module() const;
  private:
  bool _internal_has_user_module() const;
  public:
  void clear_user_module();
  const ::firrtl::FirrtlPB_Module_UserModule& user_module() const;
  ::firrtl::FirrtlPB_Module_UserModule* release_user_module();
  ::firrtl::FirrtlPB_Module_UserModule* mutable_user_module();
  void set_allocated_user_module(::firrtl::FirrtlPB_Module_UserModule* user_module);
  private:
  const ::firrtl::FirrtlPB_Module_UserModule& _internal_user_module() const;
  ::firrtl::FirrtlPB_Module_UserModule* _internal_mutable_user_module();
  public:

  void clear_module();
  ModuleCase module_case() const;
  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Module)
 private:
  class _Internal;
  void set_has_external_module();
  void set_has_user_module();

  inline bool has_module() const;
  inline void clear_has_module();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ModuleUnion {
    ModuleUnion() {}
    ::firrtl::FirrtlPB_Module_ExternalModule* external_module_;
    ::firrtl::FirrtlPB_Module_UserModule* user_module_;
  } module_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_Wire :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.Wire) */ {
 public:
  FirrtlPB_Statement_Wire();
  virtual ~FirrtlPB_Statement_Wire();

  FirrtlPB_Statement_Wire(const FirrtlPB_Statement_Wire& from);
  FirrtlPB_Statement_Wire(FirrtlPB_Statement_Wire&& from) noexcept
    : FirrtlPB_Statement_Wire() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_Wire& operator=(const FirrtlPB_Statement_Wire& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_Wire& operator=(FirrtlPB_Statement_Wire&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_Wire& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_Wire* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_Wire*>(
               &_FirrtlPB_Statement_Wire_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(FirrtlPB_Statement_Wire& a, FirrtlPB_Statement_Wire& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_Wire* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_Wire* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Wire>(nullptr);
  }

  FirrtlPB_Statement_Wire* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Wire>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_Wire& from);
  void MergeFrom(const FirrtlPB_Statement_Wire& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_Wire* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.Wire";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .firrtl.FirrtlPB.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::firrtl::FirrtlPB_Type& type() const;
  ::firrtl::FirrtlPB_Type* release_type();
  ::firrtl::FirrtlPB_Type* mutable_type();
  void set_allocated_type(::firrtl::FirrtlPB_Type* type);
  private:
  const ::firrtl::FirrtlPB_Type& _internal_type() const;
  ::firrtl::FirrtlPB_Type* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.Wire)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::firrtl::FirrtlPB_Type* type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_Register :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.Register) */ {
 public:
  FirrtlPB_Statement_Register();
  virtual ~FirrtlPB_Statement_Register();

  FirrtlPB_Statement_Register(const FirrtlPB_Statement_Register& from);
  FirrtlPB_Statement_Register(FirrtlPB_Statement_Register&& from) noexcept
    : FirrtlPB_Statement_Register() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_Register& operator=(const FirrtlPB_Statement_Register& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_Register& operator=(FirrtlPB_Statement_Register&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_Register& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_Register* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_Register*>(
               &_FirrtlPB_Statement_Register_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(FirrtlPB_Statement_Register& a, FirrtlPB_Statement_Register& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_Register* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_Register* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Register>(nullptr);
  }

  FirrtlPB_Statement_Register* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Register>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_Register& from);
  void MergeFrom(const FirrtlPB_Statement_Register& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_Register* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.Register";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kClockFieldNumber = 3,
    kResetFieldNumber = 4,
    kInitFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .firrtl.FirrtlPB.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::firrtl::FirrtlPB_Type& type() const;
  ::firrtl::FirrtlPB_Type* release_type();
  ::firrtl::FirrtlPB_Type* mutable_type();
  void set_allocated_type(::firrtl::FirrtlPB_Type* type);
  private:
  const ::firrtl::FirrtlPB_Type& _internal_type() const;
  ::firrtl::FirrtlPB_Type* _internal_mutable_type();
  public:

  // .firrtl.FirrtlPB.Expression clock = 3;
  bool has_clock() const;
  private:
  bool _internal_has_clock() const;
  public:
  void clear_clock();
  const ::firrtl::FirrtlPB_Expression& clock() const;
  ::firrtl::FirrtlPB_Expression* release_clock();
  ::firrtl::FirrtlPB_Expression* mutable_clock();
  void set_allocated_clock(::firrtl::FirrtlPB_Expression* clock);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_clock() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_clock();
  public:

  // .firrtl.FirrtlPB.Expression reset = 4;
  bool has_reset() const;
  private:
  bool _internal_has_reset() const;
  public:
  void clear_reset();
  const ::firrtl::FirrtlPB_Expression& reset() const;
  ::firrtl::FirrtlPB_Expression* release_reset();
  ::firrtl::FirrtlPB_Expression* mutable_reset();
  void set_allocated_reset(::firrtl::FirrtlPB_Expression* reset);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_reset() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_reset();
  public:

  // .firrtl.FirrtlPB.Expression init = 5;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  const ::firrtl::FirrtlPB_Expression& init() const;
  ::firrtl::FirrtlPB_Expression* release_init();
  ::firrtl::FirrtlPB_Expression* mutable_init();
  void set_allocated_init(::firrtl::FirrtlPB_Expression* init);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_init() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_init();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.Register)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::firrtl::FirrtlPB_Type* type_;
  ::firrtl::FirrtlPB_Expression* clock_;
  ::firrtl::FirrtlPB_Expression* reset_;
  ::firrtl::FirrtlPB_Expression* init_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_Memory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.Memory) */ {
 public:
  FirrtlPB_Statement_Memory();
  virtual ~FirrtlPB_Statement_Memory();

  FirrtlPB_Statement_Memory(const FirrtlPB_Statement_Memory& from);
  FirrtlPB_Statement_Memory(FirrtlPB_Statement_Memory&& from) noexcept
    : FirrtlPB_Statement_Memory() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_Memory& operator=(const FirrtlPB_Statement_Memory& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_Memory& operator=(FirrtlPB_Statement_Memory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_Memory& default_instance();

  enum DepthCase {
    kUintDepth = 3,
    kBigintDepth = 9,
    DEPTH_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_Memory* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_Memory*>(
               &_FirrtlPB_Statement_Memory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(FirrtlPB_Statement_Memory& a, FirrtlPB_Statement_Memory& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_Memory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_Memory* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Memory>(nullptr);
  }

  FirrtlPB_Statement_Memory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Memory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_Memory& from);
  void MergeFrom(const FirrtlPB_Statement_Memory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_Memory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.Memory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReaderIdFieldNumber = 6,
    kWriterIdFieldNumber = 7,
    kReadwriterIdFieldNumber = 8,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 2,
    kWriteLatencyFieldNumber = 4,
    kReadLatencyFieldNumber = 5,
    kReadUnderWriteFieldNumber = 10,
    kUintDepthFieldNumber = 3,
    kBigintDepthFieldNumber = 9,
  };
  // repeated string reader_id = 6;
  int reader_id_size() const;
  private:
  int _internal_reader_id_size() const;
  public:
  void clear_reader_id();
  const std::string& reader_id(int index) const;
  std::string* mutable_reader_id(int index);
  void set_reader_id(int index, const std::string& value);
  void set_reader_id(int index, std::string&& value);
  void set_reader_id(int index, const char* value);
  void set_reader_id(int index, const char* value, size_t size);
  std::string* add_reader_id();
  void add_reader_id(const std::string& value);
  void add_reader_id(std::string&& value);
  void add_reader_id(const char* value);
  void add_reader_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& reader_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_reader_id();
  private:
  const std::string& _internal_reader_id(int index) const;
  std::string* _internal_add_reader_id();
  public:

  // repeated string writer_id = 7;
  int writer_id_size() const;
  private:
  int _internal_writer_id_size() const;
  public:
  void clear_writer_id();
  const std::string& writer_id(int index) const;
  std::string* mutable_writer_id(int index);
  void set_writer_id(int index, const std::string& value);
  void set_writer_id(int index, std::string&& value);
  void set_writer_id(int index, const char* value);
  void set_writer_id(int index, const char* value, size_t size);
  std::string* add_writer_id();
  void add_writer_id(const std::string& value);
  void add_writer_id(std::string&& value);
  void add_writer_id(const char* value);
  void add_writer_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& writer_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_writer_id();
  private:
  const std::string& _internal_writer_id(int index) const;
  std::string* _internal_add_writer_id();
  public:

  // repeated string readwriter_id = 8;
  int readwriter_id_size() const;
  private:
  int _internal_readwriter_id_size() const;
  public:
  void clear_readwriter_id();
  const std::string& readwriter_id(int index) const;
  std::string* mutable_readwriter_id(int index);
  void set_readwriter_id(int index, const std::string& value);
  void set_readwriter_id(int index, std::string&& value);
  void set_readwriter_id(int index, const char* value);
  void set_readwriter_id(int index, const char* value, size_t size);
  std::string* add_readwriter_id();
  void add_readwriter_id(const std::string& value);
  void add_readwriter_id(std::string&& value);
  void add_readwriter_id(const char* value);
  void add_readwriter_id(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& readwriter_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_readwriter_id();
  private:
  const std::string& _internal_readwriter_id(int index) const;
  std::string* _internal_add_readwriter_id();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .firrtl.FirrtlPB.Type type = 2;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::firrtl::FirrtlPB_Type& type() const;
  ::firrtl::FirrtlPB_Type* release_type();
  ::firrtl::FirrtlPB_Type* mutable_type();
  void set_allocated_type(::firrtl::FirrtlPB_Type* type);
  private:
  const ::firrtl::FirrtlPB_Type& _internal_type() const;
  ::firrtl::FirrtlPB_Type* _internal_mutable_type();
  public:

  // uint32 write_latency = 4;
  void clear_write_latency();
  ::PROTOBUF_NAMESPACE_ID::uint32 write_latency() const;
  void set_write_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_write_latency() const;
  void _internal_set_write_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 read_latency = 5;
  void clear_read_latency();
  ::PROTOBUF_NAMESPACE_ID::uint32 read_latency() const;
  void set_read_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_read_latency() const;
  void _internal_set_read_latency(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .firrtl.FirrtlPB.Statement.ReadUnderWrite read_under_write = 10;
  void clear_read_under_write();
  ::firrtl::FirrtlPB_Statement_ReadUnderWrite read_under_write() const;
  void set_read_under_write(::firrtl::FirrtlPB_Statement_ReadUnderWrite value);
  private:
  ::firrtl::FirrtlPB_Statement_ReadUnderWrite _internal_read_under_write() const;
  void _internal_set_read_under_write(::firrtl::FirrtlPB_Statement_ReadUnderWrite value);
  public:

  // uint32 uint_depth = 3;
  private:
  bool _internal_has_uint_depth() const;
  public:
  void clear_uint_depth();
  ::PROTOBUF_NAMESPACE_ID::uint32 uint_depth() const;
  void set_uint_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_uint_depth() const;
  void _internal_set_uint_depth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .firrtl.FirrtlPB.BigInt bigint_depth = 9;
  bool has_bigint_depth() const;
  private:
  bool _internal_has_bigint_depth() const;
  public:
  void clear_bigint_depth();
  const ::firrtl::FirrtlPB_BigInt& bigint_depth() const;
  ::firrtl::FirrtlPB_BigInt* release_bigint_depth();
  ::firrtl::FirrtlPB_BigInt* mutable_bigint_depth();
  void set_allocated_bigint_depth(::firrtl::FirrtlPB_BigInt* bigint_depth);
  private:
  const ::firrtl::FirrtlPB_BigInt& _internal_bigint_depth() const;
  ::firrtl::FirrtlPB_BigInt* _internal_mutable_bigint_depth();
  public:

  void clear_depth();
  DepthCase depth_case() const;
  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.Memory)
 private:
  class _Internal;
  void set_has_uint_depth();
  void set_has_bigint_depth();

  inline bool has_depth() const;
  inline void clear_has_depth();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> reader_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> writer_id_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> readwriter_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::firrtl::FirrtlPB_Type* type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 write_latency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 read_latency_;
  int read_under_write_;
  union DepthUnion {
    DepthUnion() {}
    ::PROTOBUF_NAMESPACE_ID::uint32 uint_depth_;
    ::firrtl::FirrtlPB_BigInt* bigint_depth_;
  } depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_CMemory_TypeAndDepth :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth) */ {
 public:
  FirrtlPB_Statement_CMemory_TypeAndDepth();
  virtual ~FirrtlPB_Statement_CMemory_TypeAndDepth();

  FirrtlPB_Statement_CMemory_TypeAndDepth(const FirrtlPB_Statement_CMemory_TypeAndDepth& from);
  FirrtlPB_Statement_CMemory_TypeAndDepth(FirrtlPB_Statement_CMemory_TypeAndDepth&& from) noexcept
    : FirrtlPB_Statement_CMemory_TypeAndDepth() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_CMemory_TypeAndDepth& operator=(const FirrtlPB_Statement_CMemory_TypeAndDepth& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_CMemory_TypeAndDepth& operator=(FirrtlPB_Statement_CMemory_TypeAndDepth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_CMemory_TypeAndDepth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_CMemory_TypeAndDepth* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_CMemory_TypeAndDepth*>(
               &_FirrtlPB_Statement_CMemory_TypeAndDepth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(FirrtlPB_Statement_CMemory_TypeAndDepth& a, FirrtlPB_Statement_CMemory_TypeAndDepth& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_CMemory_TypeAndDepth* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_CMemory_TypeAndDepth* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_CMemory_TypeAndDepth>(nullptr);
  }

  FirrtlPB_Statement_CMemory_TypeAndDepth* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_CMemory_TypeAndDepth>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_CMemory_TypeAndDepth& from);
  void MergeFrom(const FirrtlPB_Statement_CMemory_TypeAndDepth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_CMemory_TypeAndDepth* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataTypeFieldNumber = 1,
    kDepthFieldNumber = 2,
  };
  // .firrtl.FirrtlPB.Type data_type = 1;
  bool has_data_type() const;
  private:
  bool _internal_has_data_type() const;
  public:
  void clear_data_type();
  const ::firrtl::FirrtlPB_Type& data_type() const;
  ::firrtl::FirrtlPB_Type* release_data_type();
  ::firrtl::FirrtlPB_Type* mutable_data_type();
  void set_allocated_data_type(::firrtl::FirrtlPB_Type* data_type);
  private:
  const ::firrtl::FirrtlPB_Type& _internal_data_type() const;
  ::firrtl::FirrtlPB_Type* _internal_mutable_data_type();
  public:

  // .firrtl.FirrtlPB.BigInt depth = 2;
  bool has_depth() const;
  private:
  bool _internal_has_depth() const;
  public:
  void clear_depth();
  const ::firrtl::FirrtlPB_BigInt& depth() const;
  ::firrtl::FirrtlPB_BigInt* release_depth();
  ::firrtl::FirrtlPB_BigInt* mutable_depth();
  void set_allocated_depth(::firrtl::FirrtlPB_BigInt* depth);
  private:
  const ::firrtl::FirrtlPB_BigInt& _internal_depth() const;
  ::firrtl::FirrtlPB_BigInt* _internal_mutable_depth();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Type* data_type_;
  ::firrtl::FirrtlPB_BigInt* depth_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_CMemory :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.CMemory) */ {
 public:
  FirrtlPB_Statement_CMemory();
  virtual ~FirrtlPB_Statement_CMemory();

  FirrtlPB_Statement_CMemory(const FirrtlPB_Statement_CMemory& from);
  FirrtlPB_Statement_CMemory(FirrtlPB_Statement_CMemory&& from) noexcept
    : FirrtlPB_Statement_CMemory() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_CMemory& operator=(const FirrtlPB_Statement_CMemory& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_CMemory& operator=(FirrtlPB_Statement_CMemory&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_CMemory& default_instance();

  enum TypeCase {
    kVectorType = 2,
    kTypeAndDepth = 4,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_CMemory* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_CMemory*>(
               &_FirrtlPB_Statement_CMemory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(FirrtlPB_Statement_CMemory& a, FirrtlPB_Statement_CMemory& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_CMemory* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_CMemory* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_CMemory>(nullptr);
  }

  FirrtlPB_Statement_CMemory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_CMemory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_CMemory& from);
  void MergeFrom(const FirrtlPB_Statement_CMemory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_CMemory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.CMemory";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_Statement_CMemory_TypeAndDepth TypeAndDepth;

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSyncReadFieldNumber = 3,
    kReadUnderWriteFieldNumber = 5,
    kVectorTypeFieldNumber = 2,
    kTypeAndDepthFieldNumber = 4,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool sync_read = 3;
  void clear_sync_read();
  bool sync_read() const;
  void set_sync_read(bool value);
  private:
  bool _internal_sync_read() const;
  void _internal_set_sync_read(bool value);
  public:

  // .firrtl.FirrtlPB.Statement.ReadUnderWrite read_under_write = 5;
  void clear_read_under_write();
  ::firrtl::FirrtlPB_Statement_ReadUnderWrite read_under_write() const;
  void set_read_under_write(::firrtl::FirrtlPB_Statement_ReadUnderWrite value);
  private:
  ::firrtl::FirrtlPB_Statement_ReadUnderWrite _internal_read_under_write() const;
  void _internal_set_read_under_write(::firrtl::FirrtlPB_Statement_ReadUnderWrite value);
  public:

  // .firrtl.FirrtlPB.Type.VectorType vector_type = 2;
  bool has_vector_type() const;
  private:
  bool _internal_has_vector_type() const;
  public:
  void clear_vector_type();
  const ::firrtl::FirrtlPB_Type_VectorType& vector_type() const;
  ::firrtl::FirrtlPB_Type_VectorType* release_vector_type();
  ::firrtl::FirrtlPB_Type_VectorType* mutable_vector_type();
  void set_allocated_vector_type(::firrtl::FirrtlPB_Type_VectorType* vector_type);
  private:
  const ::firrtl::FirrtlPB_Type_VectorType& _internal_vector_type() const;
  ::firrtl::FirrtlPB_Type_VectorType* _internal_mutable_vector_type();
  public:

  // .firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth type_and_depth = 4;
  bool has_type_and_depth() const;
  private:
  bool _internal_has_type_and_depth() const;
  public:
  void clear_type_and_depth();
  const ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth& type_and_depth() const;
  ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* release_type_and_depth();
  ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* mutable_type_and_depth();
  void set_allocated_type_and_depth(::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* type_and_depth);
  private:
  const ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth& _internal_type_and_depth() const;
  ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* _internal_mutable_type_and_depth();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.CMemory)
 private:
  class _Internal;
  void set_has_vector_type();
  void set_has_type_and_depth();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool sync_read_;
  int read_under_write_;
  union TypeUnion {
    TypeUnion() {}
    ::firrtl::FirrtlPB_Type_VectorType* vector_type_;
    ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* type_and_depth_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_Instance :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.Instance) */ {
 public:
  FirrtlPB_Statement_Instance();
  virtual ~FirrtlPB_Statement_Instance();

  FirrtlPB_Statement_Instance(const FirrtlPB_Statement_Instance& from);
  FirrtlPB_Statement_Instance(FirrtlPB_Statement_Instance&& from) noexcept
    : FirrtlPB_Statement_Instance() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_Instance& operator=(const FirrtlPB_Statement_Instance& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_Instance& operator=(FirrtlPB_Statement_Instance&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_Instance& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_Instance* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_Instance*>(
               &_FirrtlPB_Statement_Instance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(FirrtlPB_Statement_Instance& a, FirrtlPB_Statement_Instance& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_Instance* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_Instance* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Instance>(nullptr);
  }

  FirrtlPB_Statement_Instance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Instance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_Instance& from);
  void MergeFrom(const FirrtlPB_Statement_Instance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_Instance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.Instance";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kModuleIdFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string module_id = 2;
  void clear_module_id();
  const std::string& module_id() const;
  void set_module_id(const std::string& value);
  void set_module_id(std::string&& value);
  void set_module_id(const char* value);
  void set_module_id(const char* value, size_t size);
  std::string* mutable_module_id();
  std::string* release_module_id();
  void set_allocated_module_id(std::string* module_id);
  private:
  const std::string& _internal_module_id() const;
  void _internal_set_module_id(const std::string& value);
  std::string* _internal_mutable_module_id();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.Instance)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_Node :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.Node) */ {
 public:
  FirrtlPB_Statement_Node();
  virtual ~FirrtlPB_Statement_Node();

  FirrtlPB_Statement_Node(const FirrtlPB_Statement_Node& from);
  FirrtlPB_Statement_Node(FirrtlPB_Statement_Node&& from) noexcept
    : FirrtlPB_Statement_Node() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_Node& operator=(const FirrtlPB_Statement_Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_Node& operator=(FirrtlPB_Statement_Node&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_Node& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_Node* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_Node*>(
               &_FirrtlPB_Statement_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(FirrtlPB_Statement_Node& a, FirrtlPB_Statement_Node& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_Node* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_Node* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Node>(nullptr);
  }

  FirrtlPB_Statement_Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Node>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_Node& from);
  void MergeFrom(const FirrtlPB_Statement_Node& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_Node* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.Node";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kExpressionFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .firrtl.FirrtlPB.Expression expression = 2;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::firrtl::FirrtlPB_Expression& expression() const;
  ::firrtl::FirrtlPB_Expression* release_expression();
  ::firrtl::FirrtlPB_Expression* mutable_expression();
  void set_allocated_expression(::firrtl::FirrtlPB_Expression* expression);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_expression() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_expression();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.Node)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::firrtl::FirrtlPB_Expression* expression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_When :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.When) */ {
 public:
  FirrtlPB_Statement_When();
  virtual ~FirrtlPB_Statement_When();

  FirrtlPB_Statement_When(const FirrtlPB_Statement_When& from);
  FirrtlPB_Statement_When(FirrtlPB_Statement_When&& from) noexcept
    : FirrtlPB_Statement_When() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_When& operator=(const FirrtlPB_Statement_When& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_When& operator=(FirrtlPB_Statement_When&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_When& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_When* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_When*>(
               &_FirrtlPB_Statement_When_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(FirrtlPB_Statement_When& a, FirrtlPB_Statement_When& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_When* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_When* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_When>(nullptr);
  }

  FirrtlPB_Statement_When* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_When>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_When& from);
  void MergeFrom(const FirrtlPB_Statement_When& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_When* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.When";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConsequentFieldNumber = 2,
    kOtherwiseFieldNumber = 3,
    kPredicateFieldNumber = 1,
  };
  // repeated .firrtl.FirrtlPB.Statement consequent = 2;
  int consequent_size() const;
  private:
  int _internal_consequent_size() const;
  public:
  void clear_consequent();
  ::firrtl::FirrtlPB_Statement* mutable_consequent(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement >*
      mutable_consequent();
  private:
  const ::firrtl::FirrtlPB_Statement& _internal_consequent(int index) const;
  ::firrtl::FirrtlPB_Statement* _internal_add_consequent();
  public:
  const ::firrtl::FirrtlPB_Statement& consequent(int index) const;
  ::firrtl::FirrtlPB_Statement* add_consequent();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement >&
      consequent() const;

  // repeated .firrtl.FirrtlPB.Statement otherwise = 3;
  int otherwise_size() const;
  private:
  int _internal_otherwise_size() const;
  public:
  void clear_otherwise();
  ::firrtl::FirrtlPB_Statement* mutable_otherwise(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement >*
      mutable_otherwise();
  private:
  const ::firrtl::FirrtlPB_Statement& _internal_otherwise(int index) const;
  ::firrtl::FirrtlPB_Statement* _internal_add_otherwise();
  public:
  const ::firrtl::FirrtlPB_Statement& otherwise(int index) const;
  ::firrtl::FirrtlPB_Statement* add_otherwise();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement >&
      otherwise() const;

  // .firrtl.FirrtlPB.Expression predicate = 1;
  bool has_predicate() const;
  private:
  bool _internal_has_predicate() const;
  public:
  void clear_predicate();
  const ::firrtl::FirrtlPB_Expression& predicate() const;
  ::firrtl::FirrtlPB_Expression* release_predicate();
  ::firrtl::FirrtlPB_Expression* mutable_predicate();
  void set_allocated_predicate(::firrtl::FirrtlPB_Expression* predicate);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_predicate() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_predicate();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.When)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement > consequent_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement > otherwise_;
  ::firrtl::FirrtlPB_Expression* predicate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_Stop :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.Stop) */ {
 public:
  FirrtlPB_Statement_Stop();
  virtual ~FirrtlPB_Statement_Stop();

  FirrtlPB_Statement_Stop(const FirrtlPB_Statement_Stop& from);
  FirrtlPB_Statement_Stop(FirrtlPB_Statement_Stop&& from) noexcept
    : FirrtlPB_Statement_Stop() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_Stop& operator=(const FirrtlPB_Statement_Stop& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_Stop& operator=(FirrtlPB_Statement_Stop&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_Stop& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_Stop* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_Stop*>(
               &_FirrtlPB_Statement_Stop_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(FirrtlPB_Statement_Stop& a, FirrtlPB_Statement_Stop& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_Stop* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_Stop* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Stop>(nullptr);
  }

  FirrtlPB_Statement_Stop* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Stop>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_Stop& from);
  void MergeFrom(const FirrtlPB_Statement_Stop& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_Stop* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.Stop";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClkFieldNumber = 2,
    kEnFieldNumber = 3,
    kReturnValueFieldNumber = 1,
  };
  // .firrtl.FirrtlPB.Expression clk = 2;
  bool has_clk() const;
  private:
  bool _internal_has_clk() const;
  public:
  void clear_clk();
  const ::firrtl::FirrtlPB_Expression& clk() const;
  ::firrtl::FirrtlPB_Expression* release_clk();
  ::firrtl::FirrtlPB_Expression* mutable_clk();
  void set_allocated_clk(::firrtl::FirrtlPB_Expression* clk);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_clk() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_clk();
  public:

  // .firrtl.FirrtlPB.Expression en = 3;
  bool has_en() const;
  private:
  bool _internal_has_en() const;
  public:
  void clear_en();
  const ::firrtl::FirrtlPB_Expression& en() const;
  ::firrtl::FirrtlPB_Expression* release_en();
  ::firrtl::FirrtlPB_Expression* mutable_en();
  void set_allocated_en(::firrtl::FirrtlPB_Expression* en);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_en() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_en();
  public:

  // int32 return_value = 1;
  void clear_return_value();
  ::PROTOBUF_NAMESPACE_ID::int32 return_value() const;
  void set_return_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_return_value() const;
  void _internal_set_return_value(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.Stop)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Expression* clk_;
  ::firrtl::FirrtlPB_Expression* en_;
  ::PROTOBUF_NAMESPACE_ID::int32 return_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_Printf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.Printf) */ {
 public:
  FirrtlPB_Statement_Printf();
  virtual ~FirrtlPB_Statement_Printf();

  FirrtlPB_Statement_Printf(const FirrtlPB_Statement_Printf& from);
  FirrtlPB_Statement_Printf(FirrtlPB_Statement_Printf&& from) noexcept
    : FirrtlPB_Statement_Printf() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_Printf& operator=(const FirrtlPB_Statement_Printf& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_Printf& operator=(FirrtlPB_Statement_Printf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_Printf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_Printf* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_Printf*>(
               &_FirrtlPB_Statement_Printf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(FirrtlPB_Statement_Printf& a, FirrtlPB_Statement_Printf& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_Printf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_Printf* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Printf>(nullptr);
  }

  FirrtlPB_Statement_Printf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Printf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_Printf& from);
  void MergeFrom(const FirrtlPB_Statement_Printf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_Printf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.Printf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 2,
    kValueFieldNumber = 1,
    kClkFieldNumber = 3,
    kEnFieldNumber = 4,
  };
  // repeated .firrtl.FirrtlPB.Expression arg = 2;
  int arg_size() const;
  private:
  int _internal_arg_size() const;
  public:
  void clear_arg();
  ::firrtl::FirrtlPB_Expression* mutable_arg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression >*
      mutable_arg();
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_arg(int index) const;
  ::firrtl::FirrtlPB_Expression* _internal_add_arg();
  public:
  const ::firrtl::FirrtlPB_Expression& arg(int index) const;
  ::firrtl::FirrtlPB_Expression* add_arg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression >&
      arg() const;

  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .firrtl.FirrtlPB.Expression clk = 3;
  bool has_clk() const;
  private:
  bool _internal_has_clk() const;
  public:
  void clear_clk();
  const ::firrtl::FirrtlPB_Expression& clk() const;
  ::firrtl::FirrtlPB_Expression* release_clk();
  ::firrtl::FirrtlPB_Expression* mutable_clk();
  void set_allocated_clk(::firrtl::FirrtlPB_Expression* clk);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_clk() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_clk();
  public:

  // .firrtl.FirrtlPB.Expression en = 4;
  bool has_en() const;
  private:
  bool _internal_has_en() const;
  public:
  void clear_en();
  const ::firrtl::FirrtlPB_Expression& en() const;
  ::firrtl::FirrtlPB_Expression* release_en();
  ::firrtl::FirrtlPB_Expression* mutable_en();
  void set_allocated_en(::firrtl::FirrtlPB_Expression* en);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_en() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_en();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.Printf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression > arg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::firrtl::FirrtlPB_Expression* clk_;
  ::firrtl::FirrtlPB_Expression* en_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_Skip :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.Skip) */ {
 public:
  FirrtlPB_Statement_Skip();
  virtual ~FirrtlPB_Statement_Skip();

  FirrtlPB_Statement_Skip(const FirrtlPB_Statement_Skip& from);
  FirrtlPB_Statement_Skip(FirrtlPB_Statement_Skip&& from) noexcept
    : FirrtlPB_Statement_Skip() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_Skip& operator=(const FirrtlPB_Statement_Skip& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_Skip& operator=(FirrtlPB_Statement_Skip&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_Skip& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_Skip* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_Skip*>(
               &_FirrtlPB_Statement_Skip_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(FirrtlPB_Statement_Skip& a, FirrtlPB_Statement_Skip& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_Skip* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_Skip* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Skip>(nullptr);
  }

  FirrtlPB_Statement_Skip* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Skip>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_Skip& from);
  void MergeFrom(const FirrtlPB_Statement_Skip& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_Skip* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.Skip";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.Skip)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_Connect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.Connect) */ {
 public:
  FirrtlPB_Statement_Connect();
  virtual ~FirrtlPB_Statement_Connect();

  FirrtlPB_Statement_Connect(const FirrtlPB_Statement_Connect& from);
  FirrtlPB_Statement_Connect(FirrtlPB_Statement_Connect&& from) noexcept
    : FirrtlPB_Statement_Connect() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_Connect& operator=(const FirrtlPB_Statement_Connect& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_Connect& operator=(FirrtlPB_Statement_Connect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_Connect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_Connect* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_Connect*>(
               &_FirrtlPB_Statement_Connect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(FirrtlPB_Statement_Connect& a, FirrtlPB_Statement_Connect& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_Connect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_Connect* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Connect>(nullptr);
  }

  FirrtlPB_Statement_Connect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Connect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_Connect& from);
  void MergeFrom(const FirrtlPB_Statement_Connect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_Connect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.Connect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kExpressionFieldNumber = 2,
  };
  // .firrtl.FirrtlPB.Expression location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::firrtl::FirrtlPB_Expression& location() const;
  ::firrtl::FirrtlPB_Expression* release_location();
  ::firrtl::FirrtlPB_Expression* mutable_location();
  void set_allocated_location(::firrtl::FirrtlPB_Expression* location);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_location() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_location();
  public:

  // .firrtl.FirrtlPB.Expression expression = 2;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::firrtl::FirrtlPB_Expression& expression() const;
  ::firrtl::FirrtlPB_Expression* release_expression();
  ::firrtl::FirrtlPB_Expression* mutable_expression();
  void set_allocated_expression(::firrtl::FirrtlPB_Expression* expression);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_expression() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_expression();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.Connect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Expression* location_;
  ::firrtl::FirrtlPB_Expression* expression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_PartialConnect :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.PartialConnect) */ {
 public:
  FirrtlPB_Statement_PartialConnect();
  virtual ~FirrtlPB_Statement_PartialConnect();

  FirrtlPB_Statement_PartialConnect(const FirrtlPB_Statement_PartialConnect& from);
  FirrtlPB_Statement_PartialConnect(FirrtlPB_Statement_PartialConnect&& from) noexcept
    : FirrtlPB_Statement_PartialConnect() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_PartialConnect& operator=(const FirrtlPB_Statement_PartialConnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_PartialConnect& operator=(FirrtlPB_Statement_PartialConnect&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_PartialConnect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_PartialConnect* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_PartialConnect*>(
               &_FirrtlPB_Statement_PartialConnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(FirrtlPB_Statement_PartialConnect& a, FirrtlPB_Statement_PartialConnect& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_PartialConnect* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_PartialConnect* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_PartialConnect>(nullptr);
  }

  FirrtlPB_Statement_PartialConnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_PartialConnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_PartialConnect& from);
  void MergeFrom(const FirrtlPB_Statement_PartialConnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_PartialConnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.PartialConnect";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kExpressionFieldNumber = 2,
  };
  // .firrtl.FirrtlPB.Expression location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::firrtl::FirrtlPB_Expression& location() const;
  ::firrtl::FirrtlPB_Expression* release_location();
  ::firrtl::FirrtlPB_Expression* mutable_location();
  void set_allocated_location(::firrtl::FirrtlPB_Expression* location);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_location() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_location();
  public:

  // .firrtl.FirrtlPB.Expression expression = 2;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::firrtl::FirrtlPB_Expression& expression() const;
  ::firrtl::FirrtlPB_Expression* release_expression();
  ::firrtl::FirrtlPB_Expression* mutable_expression();
  void set_allocated_expression(::firrtl::FirrtlPB_Expression* expression);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_expression() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_expression();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.PartialConnect)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Expression* location_;
  ::firrtl::FirrtlPB_Expression* expression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_IsInvalid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.IsInvalid) */ {
 public:
  FirrtlPB_Statement_IsInvalid();
  virtual ~FirrtlPB_Statement_IsInvalid();

  FirrtlPB_Statement_IsInvalid(const FirrtlPB_Statement_IsInvalid& from);
  FirrtlPB_Statement_IsInvalid(FirrtlPB_Statement_IsInvalid&& from) noexcept
    : FirrtlPB_Statement_IsInvalid() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_IsInvalid& operator=(const FirrtlPB_Statement_IsInvalid& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_IsInvalid& operator=(FirrtlPB_Statement_IsInvalid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_IsInvalid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_IsInvalid* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_IsInvalid*>(
               &_FirrtlPB_Statement_IsInvalid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(FirrtlPB_Statement_IsInvalid& a, FirrtlPB_Statement_IsInvalid& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_IsInvalid* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_IsInvalid* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_IsInvalid>(nullptr);
  }

  FirrtlPB_Statement_IsInvalid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_IsInvalid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_IsInvalid& from);
  void MergeFrom(const FirrtlPB_Statement_IsInvalid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_IsInvalid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.IsInvalid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionFieldNumber = 1,
  };
  // .firrtl.FirrtlPB.Expression expression = 1;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::firrtl::FirrtlPB_Expression& expression() const;
  ::firrtl::FirrtlPB_Expression* release_expression();
  ::firrtl::FirrtlPB_Expression* mutable_expression();
  void set_allocated_expression(::firrtl::FirrtlPB_Expression* expression);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_expression() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_expression();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.IsInvalid)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Expression* expression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_MemoryPort :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.MemoryPort) */ {
 public:
  FirrtlPB_Statement_MemoryPort();
  virtual ~FirrtlPB_Statement_MemoryPort();

  FirrtlPB_Statement_MemoryPort(const FirrtlPB_Statement_MemoryPort& from);
  FirrtlPB_Statement_MemoryPort(FirrtlPB_Statement_MemoryPort&& from) noexcept
    : FirrtlPB_Statement_MemoryPort() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_MemoryPort& operator=(const FirrtlPB_Statement_MemoryPort& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_MemoryPort& operator=(FirrtlPB_Statement_MemoryPort&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_MemoryPort& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_MemoryPort* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_MemoryPort*>(
               &_FirrtlPB_Statement_MemoryPort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(FirrtlPB_Statement_MemoryPort& a, FirrtlPB_Statement_MemoryPort& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_MemoryPort* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_MemoryPort* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_MemoryPort>(nullptr);
  }

  FirrtlPB_Statement_MemoryPort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_MemoryPort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_MemoryPort& from);
  void MergeFrom(const FirrtlPB_Statement_MemoryPort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_MemoryPort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.MemoryPort";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_Statement_MemoryPort_Direction Direction;
  static constexpr Direction MEMORY_PORT_DIRECTION_UNKNOWN =
    FirrtlPB_Statement_MemoryPort_Direction_MEMORY_PORT_DIRECTION_UNKNOWN;
  static constexpr Direction MEMORY_PORT_DIRECTION_INFER =
    FirrtlPB_Statement_MemoryPort_Direction_MEMORY_PORT_DIRECTION_INFER;
  static constexpr Direction MEMORY_PORT_DIRECTION_READ =
    FirrtlPB_Statement_MemoryPort_Direction_MEMORY_PORT_DIRECTION_READ;
  static constexpr Direction MEMORY_PORT_DIRECTION_WRITE =
    FirrtlPB_Statement_MemoryPort_Direction_MEMORY_PORT_DIRECTION_WRITE;
  static constexpr Direction MEMORY_PORT_DIRECTION_READ_WRITE =
    FirrtlPB_Statement_MemoryPort_Direction_MEMORY_PORT_DIRECTION_READ_WRITE;
  static inline bool Direction_IsValid(int value) {
    return FirrtlPB_Statement_MemoryPort_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    FirrtlPB_Statement_MemoryPort_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    FirrtlPB_Statement_MemoryPort_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    FirrtlPB_Statement_MemoryPort_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return FirrtlPB_Statement_MemoryPort_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return FirrtlPB_Statement_MemoryPort_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(const std::string& name,
      Direction* value) {
    return FirrtlPB_Statement_MemoryPort_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kMemoryIdFieldNumber = 3,
    kMemoryIndexFieldNumber = 4,
    kExpressionFieldNumber = 5,
    kDirectionFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string memory_id = 3;
  void clear_memory_id();
  const std::string& memory_id() const;
  void set_memory_id(const std::string& value);
  void set_memory_id(std::string&& value);
  void set_memory_id(const char* value);
  void set_memory_id(const char* value, size_t size);
  std::string* mutable_memory_id();
  std::string* release_memory_id();
  void set_allocated_memory_id(std::string* memory_id);
  private:
  const std::string& _internal_memory_id() const;
  void _internal_set_memory_id(const std::string& value);
  std::string* _internal_mutable_memory_id();
  public:

  // .firrtl.FirrtlPB.Expression memory_index = 4;
  bool has_memory_index() const;
  private:
  bool _internal_has_memory_index() const;
  public:
  void clear_memory_index();
  const ::firrtl::FirrtlPB_Expression& memory_index() const;
  ::firrtl::FirrtlPB_Expression* release_memory_index();
  ::firrtl::FirrtlPB_Expression* mutable_memory_index();
  void set_allocated_memory_index(::firrtl::FirrtlPB_Expression* memory_index);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_memory_index() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_memory_index();
  public:

  // .firrtl.FirrtlPB.Expression expression = 5;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::firrtl::FirrtlPB_Expression& expression() const;
  ::firrtl::FirrtlPB_Expression* release_expression();
  ::firrtl::FirrtlPB_Expression* mutable_expression();
  void set_allocated_expression(::firrtl::FirrtlPB_Expression* expression);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_expression() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_expression();
  public:

  // .firrtl.FirrtlPB.Statement.MemoryPort.Direction direction = 1;
  void clear_direction();
  ::firrtl::FirrtlPB_Statement_MemoryPort_Direction direction() const;
  void set_direction(::firrtl::FirrtlPB_Statement_MemoryPort_Direction value);
  private:
  ::firrtl::FirrtlPB_Statement_MemoryPort_Direction _internal_direction() const;
  void _internal_set_direction(::firrtl::FirrtlPB_Statement_MemoryPort_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.MemoryPort)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr memory_id_;
  ::firrtl::FirrtlPB_Expression* memory_index_;
  ::firrtl::FirrtlPB_Expression* expression_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement_Attach :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement.Attach) */ {
 public:
  FirrtlPB_Statement_Attach();
  virtual ~FirrtlPB_Statement_Attach();

  FirrtlPB_Statement_Attach(const FirrtlPB_Statement_Attach& from);
  FirrtlPB_Statement_Attach(FirrtlPB_Statement_Attach&& from) noexcept
    : FirrtlPB_Statement_Attach() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement_Attach& operator=(const FirrtlPB_Statement_Attach& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement_Attach& operator=(FirrtlPB_Statement_Attach&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement_Attach& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement_Attach* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement_Attach*>(
               &_FirrtlPB_Statement_Attach_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(FirrtlPB_Statement_Attach& a, FirrtlPB_Statement_Attach& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement_Attach* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement_Attach* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Attach>(nullptr);
  }

  FirrtlPB_Statement_Attach* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement_Attach>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement_Attach& from);
  void MergeFrom(const FirrtlPB_Statement_Attach& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement_Attach* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement.Attach";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionFieldNumber = 1,
  };
  // repeated .firrtl.FirrtlPB.Expression expression = 1;
  int expression_size() const;
  private:
  int _internal_expression_size() const;
  public:
  void clear_expression();
  ::firrtl::FirrtlPB_Expression* mutable_expression(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression >*
      mutable_expression();
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_expression(int index) const;
  ::firrtl::FirrtlPB_Expression* _internal_add_expression();
  public:
  const ::firrtl::FirrtlPB_Expression& expression(int index) const;
  ::firrtl::FirrtlPB_Expression* add_expression();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression >&
      expression() const;

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement.Attach)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression > expression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Statement :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Statement) */ {
 public:
  FirrtlPB_Statement();
  virtual ~FirrtlPB_Statement();

  FirrtlPB_Statement(const FirrtlPB_Statement& from);
  FirrtlPB_Statement(FirrtlPB_Statement&& from) noexcept
    : FirrtlPB_Statement() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Statement& operator=(const FirrtlPB_Statement& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Statement& operator=(FirrtlPB_Statement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Statement& default_instance();

  enum StatementCase {
    kWire = 1,
    kRegister = 2,
    kMemory = 3,
    kCmemory = 4,
    kInstance = 5,
    kNode = 6,
    kWhen = 7,
    kStop = 8,
    kPrintf = 10,
    kSkip = 14,
    kConnect = 15,
    kPartialConnect = 16,
    kIsInvalid = 17,
    kMemoryPort = 18,
    kAttach = 20,
    STATEMENT_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Statement* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Statement*>(
               &_FirrtlPB_Statement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(FirrtlPB_Statement& a, FirrtlPB_Statement& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Statement* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Statement* New() const final {
    return CreateMaybeMessage<FirrtlPB_Statement>(nullptr);
  }

  FirrtlPB_Statement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Statement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Statement& from);
  void MergeFrom(const FirrtlPB_Statement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Statement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Statement";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_Statement_Wire Wire;
  typedef FirrtlPB_Statement_Register Register;
  typedef FirrtlPB_Statement_Memory Memory;
  typedef FirrtlPB_Statement_CMemory CMemory;
  typedef FirrtlPB_Statement_Instance Instance;
  typedef FirrtlPB_Statement_Node Node;
  typedef FirrtlPB_Statement_When When;
  typedef FirrtlPB_Statement_Stop Stop;
  typedef FirrtlPB_Statement_Printf Printf;
  typedef FirrtlPB_Statement_Skip Skip;
  typedef FirrtlPB_Statement_Connect Connect;
  typedef FirrtlPB_Statement_PartialConnect PartialConnect;
  typedef FirrtlPB_Statement_IsInvalid IsInvalid;
  typedef FirrtlPB_Statement_MemoryPort MemoryPort;
  typedef FirrtlPB_Statement_Attach Attach;

  typedef FirrtlPB_Statement_ReadUnderWrite ReadUnderWrite;
  static constexpr ReadUnderWrite UNDEFINED =
    FirrtlPB_Statement_ReadUnderWrite_UNDEFINED;
  static constexpr ReadUnderWrite OLD =
    FirrtlPB_Statement_ReadUnderWrite_OLD;
  static constexpr ReadUnderWrite NEW =
    FirrtlPB_Statement_ReadUnderWrite_NEW;
  static inline bool ReadUnderWrite_IsValid(int value) {
    return FirrtlPB_Statement_ReadUnderWrite_IsValid(value);
  }
  static constexpr ReadUnderWrite ReadUnderWrite_MIN =
    FirrtlPB_Statement_ReadUnderWrite_ReadUnderWrite_MIN;
  static constexpr ReadUnderWrite ReadUnderWrite_MAX =
    FirrtlPB_Statement_ReadUnderWrite_ReadUnderWrite_MAX;
  static constexpr int ReadUnderWrite_ARRAYSIZE =
    FirrtlPB_Statement_ReadUnderWrite_ReadUnderWrite_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ReadUnderWrite_descriptor() {
    return FirrtlPB_Statement_ReadUnderWrite_descriptor();
  }
  template<typename T>
  static inline const std::string& ReadUnderWrite_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ReadUnderWrite>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ReadUnderWrite_Name.");
    return FirrtlPB_Statement_ReadUnderWrite_Name(enum_t_value);
  }
  static inline bool ReadUnderWrite_Parse(const std::string& name,
      ReadUnderWrite* value) {
    return FirrtlPB_Statement_ReadUnderWrite_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSourceInfoFieldNumber = 19,
    kWireFieldNumber = 1,
    kRegisterFieldNumber = 2,
    kMemoryFieldNumber = 3,
    kCmemoryFieldNumber = 4,
    kInstanceFieldNumber = 5,
    kNodeFieldNumber = 6,
    kWhenFieldNumber = 7,
    kStopFieldNumber = 8,
    kPrintfFieldNumber = 10,
    kSkipFieldNumber = 14,
    kConnectFieldNumber = 15,
    kPartialConnectFieldNumber = 16,
    kIsInvalidFieldNumber = 17,
    kMemoryPortFieldNumber = 18,
    kAttachFieldNumber = 20,
  };
  // .firrtl.FirrtlPB.SourceInfo source_info = 19;
  bool has_source_info() const;
  private:
  bool _internal_has_source_info() const;
  public:
  void clear_source_info();
  const ::firrtl::FirrtlPB_SourceInfo& source_info() const;
  ::firrtl::FirrtlPB_SourceInfo* release_source_info();
  ::firrtl::FirrtlPB_SourceInfo* mutable_source_info();
  void set_allocated_source_info(::firrtl::FirrtlPB_SourceInfo* source_info);
  private:
  const ::firrtl::FirrtlPB_SourceInfo& _internal_source_info() const;
  ::firrtl::FirrtlPB_SourceInfo* _internal_mutable_source_info();
  public:

  // .firrtl.FirrtlPB.Statement.Wire wire = 1;
  bool has_wire() const;
  private:
  bool _internal_has_wire() const;
  public:
  void clear_wire();
  const ::firrtl::FirrtlPB_Statement_Wire& wire() const;
  ::firrtl::FirrtlPB_Statement_Wire* release_wire();
  ::firrtl::FirrtlPB_Statement_Wire* mutable_wire();
  void set_allocated_wire(::firrtl::FirrtlPB_Statement_Wire* wire);
  private:
  const ::firrtl::FirrtlPB_Statement_Wire& _internal_wire() const;
  ::firrtl::FirrtlPB_Statement_Wire* _internal_mutable_wire();
  public:

  // .firrtl.FirrtlPB.Statement.Register register = 2;
  bool has_register_() const;
  private:
  bool _internal_has_register_() const;
  public:
  void clear_register_();
  const ::firrtl::FirrtlPB_Statement_Register& register_() const;
  ::firrtl::FirrtlPB_Statement_Register* release_register_();
  ::firrtl::FirrtlPB_Statement_Register* mutable_register_();
  void set_allocated_register_(::firrtl::FirrtlPB_Statement_Register* register_);
  private:
  const ::firrtl::FirrtlPB_Statement_Register& _internal_register_() const;
  ::firrtl::FirrtlPB_Statement_Register* _internal_mutable_register_();
  public:

  // .firrtl.FirrtlPB.Statement.Memory memory = 3;
  bool has_memory() const;
  private:
  bool _internal_has_memory() const;
  public:
  void clear_memory();
  const ::firrtl::FirrtlPB_Statement_Memory& memory() const;
  ::firrtl::FirrtlPB_Statement_Memory* release_memory();
  ::firrtl::FirrtlPB_Statement_Memory* mutable_memory();
  void set_allocated_memory(::firrtl::FirrtlPB_Statement_Memory* memory);
  private:
  const ::firrtl::FirrtlPB_Statement_Memory& _internal_memory() const;
  ::firrtl::FirrtlPB_Statement_Memory* _internal_mutable_memory();
  public:

  // .firrtl.FirrtlPB.Statement.CMemory cmemory = 4;
  bool has_cmemory() const;
  private:
  bool _internal_has_cmemory() const;
  public:
  void clear_cmemory();
  const ::firrtl::FirrtlPB_Statement_CMemory& cmemory() const;
  ::firrtl::FirrtlPB_Statement_CMemory* release_cmemory();
  ::firrtl::FirrtlPB_Statement_CMemory* mutable_cmemory();
  void set_allocated_cmemory(::firrtl::FirrtlPB_Statement_CMemory* cmemory);
  private:
  const ::firrtl::FirrtlPB_Statement_CMemory& _internal_cmemory() const;
  ::firrtl::FirrtlPB_Statement_CMemory* _internal_mutable_cmemory();
  public:

  // .firrtl.FirrtlPB.Statement.Instance instance = 5;
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  const ::firrtl::FirrtlPB_Statement_Instance& instance() const;
  ::firrtl::FirrtlPB_Statement_Instance* release_instance();
  ::firrtl::FirrtlPB_Statement_Instance* mutable_instance();
  void set_allocated_instance(::firrtl::FirrtlPB_Statement_Instance* instance);
  private:
  const ::firrtl::FirrtlPB_Statement_Instance& _internal_instance() const;
  ::firrtl::FirrtlPB_Statement_Instance* _internal_mutable_instance();
  public:

  // .firrtl.FirrtlPB.Statement.Node node = 6;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::firrtl::FirrtlPB_Statement_Node& node() const;
  ::firrtl::FirrtlPB_Statement_Node* release_node();
  ::firrtl::FirrtlPB_Statement_Node* mutable_node();
  void set_allocated_node(::firrtl::FirrtlPB_Statement_Node* node);
  private:
  const ::firrtl::FirrtlPB_Statement_Node& _internal_node() const;
  ::firrtl::FirrtlPB_Statement_Node* _internal_mutable_node();
  public:

  // .firrtl.FirrtlPB.Statement.When when = 7;
  bool has_when() const;
  private:
  bool _internal_has_when() const;
  public:
  void clear_when();
  const ::firrtl::FirrtlPB_Statement_When& when() const;
  ::firrtl::FirrtlPB_Statement_When* release_when();
  ::firrtl::FirrtlPB_Statement_When* mutable_when();
  void set_allocated_when(::firrtl::FirrtlPB_Statement_When* when);
  private:
  const ::firrtl::FirrtlPB_Statement_When& _internal_when() const;
  ::firrtl::FirrtlPB_Statement_When* _internal_mutable_when();
  public:

  // .firrtl.FirrtlPB.Statement.Stop stop = 8;
  bool has_stop() const;
  private:
  bool _internal_has_stop() const;
  public:
  void clear_stop();
  const ::firrtl::FirrtlPB_Statement_Stop& stop() const;
  ::firrtl::FirrtlPB_Statement_Stop* release_stop();
  ::firrtl::FirrtlPB_Statement_Stop* mutable_stop();
  void set_allocated_stop(::firrtl::FirrtlPB_Statement_Stop* stop);
  private:
  const ::firrtl::FirrtlPB_Statement_Stop& _internal_stop() const;
  ::firrtl::FirrtlPB_Statement_Stop* _internal_mutable_stop();
  public:

  // .firrtl.FirrtlPB.Statement.Printf printf = 10;
  bool has_printf() const;
  private:
  bool _internal_has_printf() const;
  public:
  void clear_printf();
  const ::firrtl::FirrtlPB_Statement_Printf& printf() const;
  ::firrtl::FirrtlPB_Statement_Printf* release_printf();
  ::firrtl::FirrtlPB_Statement_Printf* mutable_printf();
  void set_allocated_printf(::firrtl::FirrtlPB_Statement_Printf* printf);
  private:
  const ::firrtl::FirrtlPB_Statement_Printf& _internal_printf() const;
  ::firrtl::FirrtlPB_Statement_Printf* _internal_mutable_printf();
  public:

  // .firrtl.FirrtlPB.Statement.Skip skip = 14;
  bool has_skip() const;
  private:
  bool _internal_has_skip() const;
  public:
  void clear_skip();
  const ::firrtl::FirrtlPB_Statement_Skip& skip() const;
  ::firrtl::FirrtlPB_Statement_Skip* release_skip();
  ::firrtl::FirrtlPB_Statement_Skip* mutable_skip();
  void set_allocated_skip(::firrtl::FirrtlPB_Statement_Skip* skip);
  private:
  const ::firrtl::FirrtlPB_Statement_Skip& _internal_skip() const;
  ::firrtl::FirrtlPB_Statement_Skip* _internal_mutable_skip();
  public:

  // .firrtl.FirrtlPB.Statement.Connect connect = 15;
  bool has_connect() const;
  private:
  bool _internal_has_connect() const;
  public:
  void clear_connect();
  const ::firrtl::FirrtlPB_Statement_Connect& connect() const;
  ::firrtl::FirrtlPB_Statement_Connect* release_connect();
  ::firrtl::FirrtlPB_Statement_Connect* mutable_connect();
  void set_allocated_connect(::firrtl::FirrtlPB_Statement_Connect* connect);
  private:
  const ::firrtl::FirrtlPB_Statement_Connect& _internal_connect() const;
  ::firrtl::FirrtlPB_Statement_Connect* _internal_mutable_connect();
  public:

  // .firrtl.FirrtlPB.Statement.PartialConnect partial_connect = 16;
  bool has_partial_connect() const;
  private:
  bool _internal_has_partial_connect() const;
  public:
  void clear_partial_connect();
  const ::firrtl::FirrtlPB_Statement_PartialConnect& partial_connect() const;
  ::firrtl::FirrtlPB_Statement_PartialConnect* release_partial_connect();
  ::firrtl::FirrtlPB_Statement_PartialConnect* mutable_partial_connect();
  void set_allocated_partial_connect(::firrtl::FirrtlPB_Statement_PartialConnect* partial_connect);
  private:
  const ::firrtl::FirrtlPB_Statement_PartialConnect& _internal_partial_connect() const;
  ::firrtl::FirrtlPB_Statement_PartialConnect* _internal_mutable_partial_connect();
  public:

  // .firrtl.FirrtlPB.Statement.IsInvalid is_invalid = 17;
  bool has_is_invalid() const;
  private:
  bool _internal_has_is_invalid() const;
  public:
  void clear_is_invalid();
  const ::firrtl::FirrtlPB_Statement_IsInvalid& is_invalid() const;
  ::firrtl::FirrtlPB_Statement_IsInvalid* release_is_invalid();
  ::firrtl::FirrtlPB_Statement_IsInvalid* mutable_is_invalid();
  void set_allocated_is_invalid(::firrtl::FirrtlPB_Statement_IsInvalid* is_invalid);
  private:
  const ::firrtl::FirrtlPB_Statement_IsInvalid& _internal_is_invalid() const;
  ::firrtl::FirrtlPB_Statement_IsInvalid* _internal_mutable_is_invalid();
  public:

  // .firrtl.FirrtlPB.Statement.MemoryPort memory_port = 18;
  bool has_memory_port() const;
  private:
  bool _internal_has_memory_port() const;
  public:
  void clear_memory_port();
  const ::firrtl::FirrtlPB_Statement_MemoryPort& memory_port() const;
  ::firrtl::FirrtlPB_Statement_MemoryPort* release_memory_port();
  ::firrtl::FirrtlPB_Statement_MemoryPort* mutable_memory_port();
  void set_allocated_memory_port(::firrtl::FirrtlPB_Statement_MemoryPort* memory_port);
  private:
  const ::firrtl::FirrtlPB_Statement_MemoryPort& _internal_memory_port() const;
  ::firrtl::FirrtlPB_Statement_MemoryPort* _internal_mutable_memory_port();
  public:

  // .firrtl.FirrtlPB.Statement.Attach attach = 20;
  bool has_attach() const;
  private:
  bool _internal_has_attach() const;
  public:
  void clear_attach();
  const ::firrtl::FirrtlPB_Statement_Attach& attach() const;
  ::firrtl::FirrtlPB_Statement_Attach* release_attach();
  ::firrtl::FirrtlPB_Statement_Attach* mutable_attach();
  void set_allocated_attach(::firrtl::FirrtlPB_Statement_Attach* attach);
  private:
  const ::firrtl::FirrtlPB_Statement_Attach& _internal_attach() const;
  ::firrtl::FirrtlPB_Statement_Attach* _internal_mutable_attach();
  public:

  void clear_statement();
  StatementCase statement_case() const;
  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Statement)
 private:
  class _Internal;
  void set_has_wire();
  void set_has_register_();
  void set_has_memory();
  void set_has_cmemory();
  void set_has_instance();
  void set_has_node();
  void set_has_when();
  void set_has_stop();
  void set_has_printf();
  void set_has_skip();
  void set_has_connect();
  void set_has_partial_connect();
  void set_has_is_invalid();
  void set_has_memory_port();
  void set_has_attach();

  inline bool has_statement() const;
  inline void clear_has_statement();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_SourceInfo* source_info_;
  union StatementUnion {
    StatementUnion() {}
    ::firrtl::FirrtlPB_Statement_Wire* wire_;
    ::firrtl::FirrtlPB_Statement_Register* register__;
    ::firrtl::FirrtlPB_Statement_Memory* memory_;
    ::firrtl::FirrtlPB_Statement_CMemory* cmemory_;
    ::firrtl::FirrtlPB_Statement_Instance* instance_;
    ::firrtl::FirrtlPB_Statement_Node* node_;
    ::firrtl::FirrtlPB_Statement_When* when_;
    ::firrtl::FirrtlPB_Statement_Stop* stop_;
    ::firrtl::FirrtlPB_Statement_Printf* printf_;
    ::firrtl::FirrtlPB_Statement_Skip* skip_;
    ::firrtl::FirrtlPB_Statement_Connect* connect_;
    ::firrtl::FirrtlPB_Statement_PartialConnect* partial_connect_;
    ::firrtl::FirrtlPB_Statement_IsInvalid* is_invalid_;
    ::firrtl::FirrtlPB_Statement_MemoryPort* memory_port_;
    ::firrtl::FirrtlPB_Statement_Attach* attach_;
  } statement_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Width :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Width) */ {
 public:
  FirrtlPB_Width();
  virtual ~FirrtlPB_Width();

  FirrtlPB_Width(const FirrtlPB_Width& from);
  FirrtlPB_Width(FirrtlPB_Width&& from) noexcept
    : FirrtlPB_Width() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Width& operator=(const FirrtlPB_Width& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Width& operator=(FirrtlPB_Width&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Width& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Width* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Width*>(
               &_FirrtlPB_Width_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(FirrtlPB_Width& a, FirrtlPB_Width& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Width* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Width* New() const final {
    return CreateMaybeMessage<FirrtlPB_Width>(nullptr);
  }

  FirrtlPB_Width* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Width>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Width& from);
  void MergeFrom(const FirrtlPB_Width& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Width* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Width";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint32 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint32 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Width)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Type_UIntType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Type.UIntType) */ {
 public:
  FirrtlPB_Type_UIntType();
  virtual ~FirrtlPB_Type_UIntType();

  FirrtlPB_Type_UIntType(const FirrtlPB_Type_UIntType& from);
  FirrtlPB_Type_UIntType(FirrtlPB_Type_UIntType&& from) noexcept
    : FirrtlPB_Type_UIntType() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Type_UIntType& operator=(const FirrtlPB_Type_UIntType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Type_UIntType& operator=(FirrtlPB_Type_UIntType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Type_UIntType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Type_UIntType* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Type_UIntType*>(
               &_FirrtlPB_Type_UIntType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(FirrtlPB_Type_UIntType& a, FirrtlPB_Type_UIntType& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Type_UIntType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Type_UIntType* New() const final {
    return CreateMaybeMessage<FirrtlPB_Type_UIntType>(nullptr);
  }

  FirrtlPB_Type_UIntType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Type_UIntType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Type_UIntType& from);
  void MergeFrom(const FirrtlPB_Type_UIntType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Type_UIntType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Type.UIntType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
  };
  // .firrtl.FirrtlPB.Width width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  const ::firrtl::FirrtlPB_Width& width() const;
  ::firrtl::FirrtlPB_Width* release_width();
  ::firrtl::FirrtlPB_Width* mutable_width();
  void set_allocated_width(::firrtl::FirrtlPB_Width* width);
  private:
  const ::firrtl::FirrtlPB_Width& _internal_width() const;
  ::firrtl::FirrtlPB_Width* _internal_mutable_width();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Type.UIntType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Width* width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Type_SIntType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Type.SIntType) */ {
 public:
  FirrtlPB_Type_SIntType();
  virtual ~FirrtlPB_Type_SIntType();

  FirrtlPB_Type_SIntType(const FirrtlPB_Type_SIntType& from);
  FirrtlPB_Type_SIntType(FirrtlPB_Type_SIntType&& from) noexcept
    : FirrtlPB_Type_SIntType() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Type_SIntType& operator=(const FirrtlPB_Type_SIntType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Type_SIntType& operator=(FirrtlPB_Type_SIntType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Type_SIntType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Type_SIntType* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Type_SIntType*>(
               &_FirrtlPB_Type_SIntType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(FirrtlPB_Type_SIntType& a, FirrtlPB_Type_SIntType& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Type_SIntType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Type_SIntType* New() const final {
    return CreateMaybeMessage<FirrtlPB_Type_SIntType>(nullptr);
  }

  FirrtlPB_Type_SIntType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Type_SIntType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Type_SIntType& from);
  void MergeFrom(const FirrtlPB_Type_SIntType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Type_SIntType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Type.SIntType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
  };
  // .firrtl.FirrtlPB.Width width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  const ::firrtl::FirrtlPB_Width& width() const;
  ::firrtl::FirrtlPB_Width* release_width();
  ::firrtl::FirrtlPB_Width* mutable_width();
  void set_allocated_width(::firrtl::FirrtlPB_Width* width);
  private:
  const ::firrtl::FirrtlPB_Width& _internal_width() const;
  ::firrtl::FirrtlPB_Width* _internal_mutable_width();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Type.SIntType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Width* width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Type_ClockType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Type.ClockType) */ {
 public:
  FirrtlPB_Type_ClockType();
  virtual ~FirrtlPB_Type_ClockType();

  FirrtlPB_Type_ClockType(const FirrtlPB_Type_ClockType& from);
  FirrtlPB_Type_ClockType(FirrtlPB_Type_ClockType&& from) noexcept
    : FirrtlPB_Type_ClockType() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Type_ClockType& operator=(const FirrtlPB_Type_ClockType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Type_ClockType& operator=(FirrtlPB_Type_ClockType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Type_ClockType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Type_ClockType* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Type_ClockType*>(
               &_FirrtlPB_Type_ClockType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FirrtlPB_Type_ClockType& a, FirrtlPB_Type_ClockType& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Type_ClockType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Type_ClockType* New() const final {
    return CreateMaybeMessage<FirrtlPB_Type_ClockType>(nullptr);
  }

  FirrtlPB_Type_ClockType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Type_ClockType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Type_ClockType& from);
  void MergeFrom(const FirrtlPB_Type_ClockType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Type_ClockType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Type.ClockType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Type.ClockType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Type_AsyncResetType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Type.AsyncResetType) */ {
 public:
  FirrtlPB_Type_AsyncResetType();
  virtual ~FirrtlPB_Type_AsyncResetType();

  FirrtlPB_Type_AsyncResetType(const FirrtlPB_Type_AsyncResetType& from);
  FirrtlPB_Type_AsyncResetType(FirrtlPB_Type_AsyncResetType&& from) noexcept
    : FirrtlPB_Type_AsyncResetType() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Type_AsyncResetType& operator=(const FirrtlPB_Type_AsyncResetType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Type_AsyncResetType& operator=(FirrtlPB_Type_AsyncResetType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Type_AsyncResetType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Type_AsyncResetType* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Type_AsyncResetType*>(
               &_FirrtlPB_Type_AsyncResetType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(FirrtlPB_Type_AsyncResetType& a, FirrtlPB_Type_AsyncResetType& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Type_AsyncResetType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Type_AsyncResetType* New() const final {
    return CreateMaybeMessage<FirrtlPB_Type_AsyncResetType>(nullptr);
  }

  FirrtlPB_Type_AsyncResetType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Type_AsyncResetType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Type_AsyncResetType& from);
  void MergeFrom(const FirrtlPB_Type_AsyncResetType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Type_AsyncResetType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Type.AsyncResetType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Type.AsyncResetType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Type_ResetType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Type.ResetType) */ {
 public:
  FirrtlPB_Type_ResetType();
  virtual ~FirrtlPB_Type_ResetType();

  FirrtlPB_Type_ResetType(const FirrtlPB_Type_ResetType& from);
  FirrtlPB_Type_ResetType(FirrtlPB_Type_ResetType&& from) noexcept
    : FirrtlPB_Type_ResetType() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Type_ResetType& operator=(const FirrtlPB_Type_ResetType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Type_ResetType& operator=(FirrtlPB_Type_ResetType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Type_ResetType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Type_ResetType* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Type_ResetType*>(
               &_FirrtlPB_Type_ResetType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(FirrtlPB_Type_ResetType& a, FirrtlPB_Type_ResetType& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Type_ResetType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Type_ResetType* New() const final {
    return CreateMaybeMessage<FirrtlPB_Type_ResetType>(nullptr);
  }

  FirrtlPB_Type_ResetType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Type_ResetType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Type_ResetType& from);
  void MergeFrom(const FirrtlPB_Type_ResetType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Type_ResetType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Type.ResetType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Type.ResetType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Type_BundleType_Field :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Type.BundleType.Field) */ {
 public:
  FirrtlPB_Type_BundleType_Field();
  virtual ~FirrtlPB_Type_BundleType_Field();

  FirrtlPB_Type_BundleType_Field(const FirrtlPB_Type_BundleType_Field& from);
  FirrtlPB_Type_BundleType_Field(FirrtlPB_Type_BundleType_Field&& from) noexcept
    : FirrtlPB_Type_BundleType_Field() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Type_BundleType_Field& operator=(const FirrtlPB_Type_BundleType_Field& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Type_BundleType_Field& operator=(FirrtlPB_Type_BundleType_Field&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Type_BundleType_Field& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Type_BundleType_Field* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Type_BundleType_Field*>(
               &_FirrtlPB_Type_BundleType_Field_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(FirrtlPB_Type_BundleType_Field& a, FirrtlPB_Type_BundleType_Field& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Type_BundleType_Field* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Type_BundleType_Field* New() const final {
    return CreateMaybeMessage<FirrtlPB_Type_BundleType_Field>(nullptr);
  }

  FirrtlPB_Type_BundleType_Field* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Type_BundleType_Field>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Type_BundleType_Field& from);
  void MergeFrom(const FirrtlPB_Type_BundleType_Field& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Type_BundleType_Field* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Type.BundleType.Field";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kTypeFieldNumber = 3,
    kIsFlippedFieldNumber = 1,
  };
  // string id = 2;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .firrtl.FirrtlPB.Type type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::firrtl::FirrtlPB_Type& type() const;
  ::firrtl::FirrtlPB_Type* release_type();
  ::firrtl::FirrtlPB_Type* mutable_type();
  void set_allocated_type(::firrtl::FirrtlPB_Type* type);
  private:
  const ::firrtl::FirrtlPB_Type& _internal_type() const;
  ::firrtl::FirrtlPB_Type* _internal_mutable_type();
  public:

  // bool is_flipped = 1;
  void clear_is_flipped();
  bool is_flipped() const;
  void set_is_flipped(bool value);
  private:
  bool _internal_is_flipped() const;
  void _internal_set_is_flipped(bool value);
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Type.BundleType.Field)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::firrtl::FirrtlPB_Type* type_;
  bool is_flipped_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Type_BundleType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Type.BundleType) */ {
 public:
  FirrtlPB_Type_BundleType();
  virtual ~FirrtlPB_Type_BundleType();

  FirrtlPB_Type_BundleType(const FirrtlPB_Type_BundleType& from);
  FirrtlPB_Type_BundleType(FirrtlPB_Type_BundleType&& from) noexcept
    : FirrtlPB_Type_BundleType() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Type_BundleType& operator=(const FirrtlPB_Type_BundleType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Type_BundleType& operator=(FirrtlPB_Type_BundleType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Type_BundleType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Type_BundleType* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Type_BundleType*>(
               &_FirrtlPB_Type_BundleType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(FirrtlPB_Type_BundleType& a, FirrtlPB_Type_BundleType& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Type_BundleType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Type_BundleType* New() const final {
    return CreateMaybeMessage<FirrtlPB_Type_BundleType>(nullptr);
  }

  FirrtlPB_Type_BundleType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Type_BundleType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Type_BundleType& from);
  void MergeFrom(const FirrtlPB_Type_BundleType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Type_BundleType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Type.BundleType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_Type_BundleType_Field Field;

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 1,
  };
  // repeated .firrtl.FirrtlPB.Type.BundleType.Field field = 1;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  ::firrtl::FirrtlPB_Type_BundleType_Field* mutable_field(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Type_BundleType_Field >*
      mutable_field();
  private:
  const ::firrtl::FirrtlPB_Type_BundleType_Field& _internal_field(int index) const;
  ::firrtl::FirrtlPB_Type_BundleType_Field* _internal_add_field();
  public:
  const ::firrtl::FirrtlPB_Type_BundleType_Field& field(int index) const;
  ::firrtl::FirrtlPB_Type_BundleType_Field* add_field();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Type_BundleType_Field >&
      field() const;

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Type.BundleType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Type_BundleType_Field > field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Type_VectorType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Type.VectorType) */ {
 public:
  FirrtlPB_Type_VectorType();
  virtual ~FirrtlPB_Type_VectorType();

  FirrtlPB_Type_VectorType(const FirrtlPB_Type_VectorType& from);
  FirrtlPB_Type_VectorType(FirrtlPB_Type_VectorType&& from) noexcept
    : FirrtlPB_Type_VectorType() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Type_VectorType& operator=(const FirrtlPB_Type_VectorType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Type_VectorType& operator=(FirrtlPB_Type_VectorType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Type_VectorType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Type_VectorType* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Type_VectorType*>(
               &_FirrtlPB_Type_VectorType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(FirrtlPB_Type_VectorType& a, FirrtlPB_Type_VectorType& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Type_VectorType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Type_VectorType* New() const final {
    return CreateMaybeMessage<FirrtlPB_Type_VectorType>(nullptr);
  }

  FirrtlPB_Type_VectorType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Type_VectorType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Type_VectorType& from);
  void MergeFrom(const FirrtlPB_Type_VectorType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Type_VectorType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Type.VectorType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // .firrtl.FirrtlPB.Type type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::firrtl::FirrtlPB_Type& type() const;
  ::firrtl::FirrtlPB_Type* release_type();
  ::firrtl::FirrtlPB_Type* mutable_type();
  void set_allocated_type(::firrtl::FirrtlPB_Type* type);
  private:
  const ::firrtl::FirrtlPB_Type& _internal_type() const;
  ::firrtl::FirrtlPB_Type* _internal_mutable_type();
  public:

  // uint32 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Type.VectorType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Type* type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Type_FixedType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Type.FixedType) */ {
 public:
  FirrtlPB_Type_FixedType();
  virtual ~FirrtlPB_Type_FixedType();

  FirrtlPB_Type_FixedType(const FirrtlPB_Type_FixedType& from);
  FirrtlPB_Type_FixedType(FirrtlPB_Type_FixedType&& from) noexcept
    : FirrtlPB_Type_FixedType() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Type_FixedType& operator=(const FirrtlPB_Type_FixedType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Type_FixedType& operator=(FirrtlPB_Type_FixedType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Type_FixedType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Type_FixedType* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Type_FixedType*>(
               &_FirrtlPB_Type_FixedType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(FirrtlPB_Type_FixedType& a, FirrtlPB_Type_FixedType& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Type_FixedType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Type_FixedType* New() const final {
    return CreateMaybeMessage<FirrtlPB_Type_FixedType>(nullptr);
  }

  FirrtlPB_Type_FixedType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Type_FixedType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Type_FixedType& from);
  void MergeFrom(const FirrtlPB_Type_FixedType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Type_FixedType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Type.FixedType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 1,
    kPointFieldNumber = 2,
  };
  // .firrtl.FirrtlPB.Width width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  const ::firrtl::FirrtlPB_Width& width() const;
  ::firrtl::FirrtlPB_Width* release_width();
  ::firrtl::FirrtlPB_Width* mutable_width();
  void set_allocated_width(::firrtl::FirrtlPB_Width* width);
  private:
  const ::firrtl::FirrtlPB_Width& _internal_width() const;
  ::firrtl::FirrtlPB_Width* _internal_mutable_width();
  public:

  // .firrtl.FirrtlPB.Width point = 2;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::firrtl::FirrtlPB_Width& point() const;
  ::firrtl::FirrtlPB_Width* release_point();
  ::firrtl::FirrtlPB_Width* mutable_point();
  void set_allocated_point(::firrtl::FirrtlPB_Width* point);
  private:
  const ::firrtl::FirrtlPB_Width& _internal_point() const;
  ::firrtl::FirrtlPB_Width* _internal_mutable_point();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Type.FixedType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Width* width_;
  ::firrtl::FirrtlPB_Width* point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Type_AnalogType :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Type.AnalogType) */ {
 public:
  FirrtlPB_Type_AnalogType();
  virtual ~FirrtlPB_Type_AnalogType();

  FirrtlPB_Type_AnalogType(const FirrtlPB_Type_AnalogType& from);
  FirrtlPB_Type_AnalogType(FirrtlPB_Type_AnalogType&& from) noexcept
    : FirrtlPB_Type_AnalogType() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Type_AnalogType& operator=(const FirrtlPB_Type_AnalogType& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Type_AnalogType& operator=(FirrtlPB_Type_AnalogType&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Type_AnalogType& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Type_AnalogType* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Type_AnalogType*>(
               &_FirrtlPB_Type_AnalogType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(FirrtlPB_Type_AnalogType& a, FirrtlPB_Type_AnalogType& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Type_AnalogType* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Type_AnalogType* New() const final {
    return CreateMaybeMessage<FirrtlPB_Type_AnalogType>(nullptr);
  }

  FirrtlPB_Type_AnalogType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Type_AnalogType>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Type_AnalogType& from);
  void MergeFrom(const FirrtlPB_Type_AnalogType& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Type_AnalogType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Type.AnalogType";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthFieldNumber = 3,
  };
  // .firrtl.FirrtlPB.Width width = 3;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  const ::firrtl::FirrtlPB_Width& width() const;
  ::firrtl::FirrtlPB_Width* release_width();
  ::firrtl::FirrtlPB_Width* mutable_width();
  void set_allocated_width(::firrtl::FirrtlPB_Width* width);
  private:
  const ::firrtl::FirrtlPB_Width& _internal_width() const;
  ::firrtl::FirrtlPB_Width* _internal_mutable_width();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Type.AnalogType)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Width* width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Type :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Type) */ {
 public:
  FirrtlPB_Type();
  virtual ~FirrtlPB_Type();

  FirrtlPB_Type(const FirrtlPB_Type& from);
  FirrtlPB_Type(FirrtlPB_Type&& from) noexcept
    : FirrtlPB_Type() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Type& operator=(const FirrtlPB_Type& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Type& operator=(FirrtlPB_Type&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Type& default_instance();

  enum TypeCase {
    kUintType = 2,
    kSintType = 3,
    kClockType = 4,
    kBundleType = 5,
    kVectorType = 6,
    kFixedType = 7,
    kAnalogType = 8,
    kAsyncResetType = 9,
    kResetType = 10,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Type* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Type*>(
               &_FirrtlPB_Type_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(FirrtlPB_Type& a, FirrtlPB_Type& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Type* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Type* New() const final {
    return CreateMaybeMessage<FirrtlPB_Type>(nullptr);
  }

  FirrtlPB_Type* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Type>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Type& from);
  void MergeFrom(const FirrtlPB_Type& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Type* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Type";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_Type_UIntType UIntType;
  typedef FirrtlPB_Type_SIntType SIntType;
  typedef FirrtlPB_Type_ClockType ClockType;
  typedef FirrtlPB_Type_AsyncResetType AsyncResetType;
  typedef FirrtlPB_Type_ResetType ResetType;
  typedef FirrtlPB_Type_BundleType BundleType;
  typedef FirrtlPB_Type_VectorType VectorType;
  typedef FirrtlPB_Type_FixedType FixedType;
  typedef FirrtlPB_Type_AnalogType AnalogType;

  // accessors -------------------------------------------------------

  enum : int {
    kUintTypeFieldNumber = 2,
    kSintTypeFieldNumber = 3,
    kClockTypeFieldNumber = 4,
    kBundleTypeFieldNumber = 5,
    kVectorTypeFieldNumber = 6,
    kFixedTypeFieldNumber = 7,
    kAnalogTypeFieldNumber = 8,
    kAsyncResetTypeFieldNumber = 9,
    kResetTypeFieldNumber = 10,
  };
  // .firrtl.FirrtlPB.Type.UIntType uint_type = 2;
  bool has_uint_type() const;
  private:
  bool _internal_has_uint_type() const;
  public:
  void clear_uint_type();
  const ::firrtl::FirrtlPB_Type_UIntType& uint_type() const;
  ::firrtl::FirrtlPB_Type_UIntType* release_uint_type();
  ::firrtl::FirrtlPB_Type_UIntType* mutable_uint_type();
  void set_allocated_uint_type(::firrtl::FirrtlPB_Type_UIntType* uint_type);
  private:
  const ::firrtl::FirrtlPB_Type_UIntType& _internal_uint_type() const;
  ::firrtl::FirrtlPB_Type_UIntType* _internal_mutable_uint_type();
  public:

  // .firrtl.FirrtlPB.Type.SIntType sint_type = 3;
  bool has_sint_type() const;
  private:
  bool _internal_has_sint_type() const;
  public:
  void clear_sint_type();
  const ::firrtl::FirrtlPB_Type_SIntType& sint_type() const;
  ::firrtl::FirrtlPB_Type_SIntType* release_sint_type();
  ::firrtl::FirrtlPB_Type_SIntType* mutable_sint_type();
  void set_allocated_sint_type(::firrtl::FirrtlPB_Type_SIntType* sint_type);
  private:
  const ::firrtl::FirrtlPB_Type_SIntType& _internal_sint_type() const;
  ::firrtl::FirrtlPB_Type_SIntType* _internal_mutable_sint_type();
  public:

  // .firrtl.FirrtlPB.Type.ClockType clock_type = 4;
  bool has_clock_type() const;
  private:
  bool _internal_has_clock_type() const;
  public:
  void clear_clock_type();
  const ::firrtl::FirrtlPB_Type_ClockType& clock_type() const;
  ::firrtl::FirrtlPB_Type_ClockType* release_clock_type();
  ::firrtl::FirrtlPB_Type_ClockType* mutable_clock_type();
  void set_allocated_clock_type(::firrtl::FirrtlPB_Type_ClockType* clock_type);
  private:
  const ::firrtl::FirrtlPB_Type_ClockType& _internal_clock_type() const;
  ::firrtl::FirrtlPB_Type_ClockType* _internal_mutable_clock_type();
  public:

  // .firrtl.FirrtlPB.Type.BundleType bundle_type = 5;
  bool has_bundle_type() const;
  private:
  bool _internal_has_bundle_type() const;
  public:
  void clear_bundle_type();
  const ::firrtl::FirrtlPB_Type_BundleType& bundle_type() const;
  ::firrtl::FirrtlPB_Type_BundleType* release_bundle_type();
  ::firrtl::FirrtlPB_Type_BundleType* mutable_bundle_type();
  void set_allocated_bundle_type(::firrtl::FirrtlPB_Type_BundleType* bundle_type);
  private:
  const ::firrtl::FirrtlPB_Type_BundleType& _internal_bundle_type() const;
  ::firrtl::FirrtlPB_Type_BundleType* _internal_mutable_bundle_type();
  public:

  // .firrtl.FirrtlPB.Type.VectorType vector_type = 6;
  bool has_vector_type() const;
  private:
  bool _internal_has_vector_type() const;
  public:
  void clear_vector_type();
  const ::firrtl::FirrtlPB_Type_VectorType& vector_type() const;
  ::firrtl::FirrtlPB_Type_VectorType* release_vector_type();
  ::firrtl::FirrtlPB_Type_VectorType* mutable_vector_type();
  void set_allocated_vector_type(::firrtl::FirrtlPB_Type_VectorType* vector_type);
  private:
  const ::firrtl::FirrtlPB_Type_VectorType& _internal_vector_type() const;
  ::firrtl::FirrtlPB_Type_VectorType* _internal_mutable_vector_type();
  public:

  // .firrtl.FirrtlPB.Type.FixedType fixed_type = 7;
  bool has_fixed_type() const;
  private:
  bool _internal_has_fixed_type() const;
  public:
  void clear_fixed_type();
  const ::firrtl::FirrtlPB_Type_FixedType& fixed_type() const;
  ::firrtl::FirrtlPB_Type_FixedType* release_fixed_type();
  ::firrtl::FirrtlPB_Type_FixedType* mutable_fixed_type();
  void set_allocated_fixed_type(::firrtl::FirrtlPB_Type_FixedType* fixed_type);
  private:
  const ::firrtl::FirrtlPB_Type_FixedType& _internal_fixed_type() const;
  ::firrtl::FirrtlPB_Type_FixedType* _internal_mutable_fixed_type();
  public:

  // .firrtl.FirrtlPB.Type.AnalogType analog_type = 8;
  bool has_analog_type() const;
  private:
  bool _internal_has_analog_type() const;
  public:
  void clear_analog_type();
  const ::firrtl::FirrtlPB_Type_AnalogType& analog_type() const;
  ::firrtl::FirrtlPB_Type_AnalogType* release_analog_type();
  ::firrtl::FirrtlPB_Type_AnalogType* mutable_analog_type();
  void set_allocated_analog_type(::firrtl::FirrtlPB_Type_AnalogType* analog_type);
  private:
  const ::firrtl::FirrtlPB_Type_AnalogType& _internal_analog_type() const;
  ::firrtl::FirrtlPB_Type_AnalogType* _internal_mutable_analog_type();
  public:

  // .firrtl.FirrtlPB.Type.AsyncResetType async_reset_type = 9;
  bool has_async_reset_type() const;
  private:
  bool _internal_has_async_reset_type() const;
  public:
  void clear_async_reset_type();
  const ::firrtl::FirrtlPB_Type_AsyncResetType& async_reset_type() const;
  ::firrtl::FirrtlPB_Type_AsyncResetType* release_async_reset_type();
  ::firrtl::FirrtlPB_Type_AsyncResetType* mutable_async_reset_type();
  void set_allocated_async_reset_type(::firrtl::FirrtlPB_Type_AsyncResetType* async_reset_type);
  private:
  const ::firrtl::FirrtlPB_Type_AsyncResetType& _internal_async_reset_type() const;
  ::firrtl::FirrtlPB_Type_AsyncResetType* _internal_mutable_async_reset_type();
  public:

  // .firrtl.FirrtlPB.Type.ResetType reset_type = 10;
  bool has_reset_type() const;
  private:
  bool _internal_has_reset_type() const;
  public:
  void clear_reset_type();
  const ::firrtl::FirrtlPB_Type_ResetType& reset_type() const;
  ::firrtl::FirrtlPB_Type_ResetType* release_reset_type();
  ::firrtl::FirrtlPB_Type_ResetType* mutable_reset_type();
  void set_allocated_reset_type(::firrtl::FirrtlPB_Type_ResetType* reset_type);
  private:
  const ::firrtl::FirrtlPB_Type_ResetType& _internal_reset_type() const;
  ::firrtl::FirrtlPB_Type_ResetType* _internal_mutable_reset_type();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Type)
 private:
  class _Internal;
  void set_has_uint_type();
  void set_has_sint_type();
  void set_has_clock_type();
  void set_has_bundle_type();
  void set_has_vector_type();
  void set_has_fixed_type();
  void set_has_analog_type();
  void set_has_async_reset_type();
  void set_has_reset_type();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::firrtl::FirrtlPB_Type_UIntType* uint_type_;
    ::firrtl::FirrtlPB_Type_SIntType* sint_type_;
    ::firrtl::FirrtlPB_Type_ClockType* clock_type_;
    ::firrtl::FirrtlPB_Type_BundleType* bundle_type_;
    ::firrtl::FirrtlPB_Type_VectorType* vector_type_;
    ::firrtl::FirrtlPB_Type_FixedType* fixed_type_;
    ::firrtl::FirrtlPB_Type_AnalogType* analog_type_;
    ::firrtl::FirrtlPB_Type_AsyncResetType* async_reset_type_;
    ::firrtl::FirrtlPB_Type_ResetType* reset_type_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Port :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Port) */ {
 public:
  FirrtlPB_Port();
  virtual ~FirrtlPB_Port();

  FirrtlPB_Port(const FirrtlPB_Port& from);
  FirrtlPB_Port(FirrtlPB_Port&& from) noexcept
    : FirrtlPB_Port() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Port& operator=(const FirrtlPB_Port& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Port& operator=(FirrtlPB_Port&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Port& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Port* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Port*>(
               &_FirrtlPB_Port_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(FirrtlPB_Port& a, FirrtlPB_Port& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Port* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Port* New() const final {
    return CreateMaybeMessage<FirrtlPB_Port>(nullptr);
  }

  FirrtlPB_Port* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Port>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Port& from);
  void MergeFrom(const FirrtlPB_Port& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Port* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Port";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_Port_Direction Direction;
  static constexpr Direction PORT_DIRECTION_UNKNOWN =
    FirrtlPB_Port_Direction_PORT_DIRECTION_UNKNOWN;
  static constexpr Direction PORT_DIRECTION_IN =
    FirrtlPB_Port_Direction_PORT_DIRECTION_IN;
  static constexpr Direction PORT_DIRECTION_OUT =
    FirrtlPB_Port_Direction_PORT_DIRECTION_OUT;
  static inline bool Direction_IsValid(int value) {
    return FirrtlPB_Port_Direction_IsValid(value);
  }
  static constexpr Direction Direction_MIN =
    FirrtlPB_Port_Direction_Direction_MIN;
  static constexpr Direction Direction_MAX =
    FirrtlPB_Port_Direction_Direction_MAX;
  static constexpr int Direction_ARRAYSIZE =
    FirrtlPB_Port_Direction_Direction_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Direction_descriptor() {
    return FirrtlPB_Port_Direction_descriptor();
  }
  template<typename T>
  static inline const std::string& Direction_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Direction>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Direction_Name.");
    return FirrtlPB_Port_Direction_Name(enum_t_value);
  }
  static inline bool Direction_Parse(const std::string& name,
      Direction* value) {
    return FirrtlPB_Port_Direction_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kTypeFieldNumber = 3,
    kDirectionFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .firrtl.FirrtlPB.Type type = 3;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::firrtl::FirrtlPB_Type& type() const;
  ::firrtl::FirrtlPB_Type* release_type();
  ::firrtl::FirrtlPB_Type* mutable_type();
  void set_allocated_type(::firrtl::FirrtlPB_Type* type);
  private:
  const ::firrtl::FirrtlPB_Type& _internal_type() const;
  ::firrtl::FirrtlPB_Type* _internal_mutable_type();
  public:

  // .firrtl.FirrtlPB.Port.Direction direction = 2;
  void clear_direction();
  ::firrtl::FirrtlPB_Port_Direction direction() const;
  void set_direction(::firrtl::FirrtlPB_Port_Direction value);
  private:
  ::firrtl::FirrtlPB_Port_Direction _internal_direction() const;
  void _internal_set_direction(::firrtl::FirrtlPB_Port_Direction value);
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Port)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::firrtl::FirrtlPB_Type* type_;
  int direction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Expression_Reference :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Expression.Reference) */ {
 public:
  FirrtlPB_Expression_Reference();
  virtual ~FirrtlPB_Expression_Reference();

  FirrtlPB_Expression_Reference(const FirrtlPB_Expression_Reference& from);
  FirrtlPB_Expression_Reference(FirrtlPB_Expression_Reference&& from) noexcept
    : FirrtlPB_Expression_Reference() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Expression_Reference& operator=(const FirrtlPB_Expression_Reference& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Expression_Reference& operator=(FirrtlPB_Expression_Reference&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Expression_Reference& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Expression_Reference* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Expression_Reference*>(
               &_FirrtlPB_Expression_Reference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(FirrtlPB_Expression_Reference& a, FirrtlPB_Expression_Reference& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Expression_Reference* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Expression_Reference* New() const final {
    return CreateMaybeMessage<FirrtlPB_Expression_Reference>(nullptr);
  }

  FirrtlPB_Expression_Reference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Expression_Reference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Expression_Reference& from);
  void MergeFrom(const FirrtlPB_Expression_Reference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Expression_Reference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Expression.Reference";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Expression.Reference)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Expression_IntegerLiteral :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Expression.IntegerLiteral) */ {
 public:
  FirrtlPB_Expression_IntegerLiteral();
  virtual ~FirrtlPB_Expression_IntegerLiteral();

  FirrtlPB_Expression_IntegerLiteral(const FirrtlPB_Expression_IntegerLiteral& from);
  FirrtlPB_Expression_IntegerLiteral(FirrtlPB_Expression_IntegerLiteral&& from) noexcept
    : FirrtlPB_Expression_IntegerLiteral() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Expression_IntegerLiteral& operator=(const FirrtlPB_Expression_IntegerLiteral& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Expression_IntegerLiteral& operator=(FirrtlPB_Expression_IntegerLiteral&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Expression_IntegerLiteral& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Expression_IntegerLiteral* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Expression_IntegerLiteral*>(
               &_FirrtlPB_Expression_IntegerLiteral_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(FirrtlPB_Expression_IntegerLiteral& a, FirrtlPB_Expression_IntegerLiteral& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Expression_IntegerLiteral* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Expression_IntegerLiteral* New() const final {
    return CreateMaybeMessage<FirrtlPB_Expression_IntegerLiteral>(nullptr);
  }

  FirrtlPB_Expression_IntegerLiteral* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Expression_IntegerLiteral>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Expression_IntegerLiteral& from);
  void MergeFrom(const FirrtlPB_Expression_IntegerLiteral& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Expression_IntegerLiteral* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Expression.IntegerLiteral";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Expression.IntegerLiteral)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Expression_UIntLiteral :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Expression.UIntLiteral) */ {
 public:
  FirrtlPB_Expression_UIntLiteral();
  virtual ~FirrtlPB_Expression_UIntLiteral();

  FirrtlPB_Expression_UIntLiteral(const FirrtlPB_Expression_UIntLiteral& from);
  FirrtlPB_Expression_UIntLiteral(FirrtlPB_Expression_UIntLiteral&& from) noexcept
    : FirrtlPB_Expression_UIntLiteral() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Expression_UIntLiteral& operator=(const FirrtlPB_Expression_UIntLiteral& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Expression_UIntLiteral& operator=(FirrtlPB_Expression_UIntLiteral&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Expression_UIntLiteral& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Expression_UIntLiteral* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Expression_UIntLiteral*>(
               &_FirrtlPB_Expression_UIntLiteral_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(FirrtlPB_Expression_UIntLiteral& a, FirrtlPB_Expression_UIntLiteral& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Expression_UIntLiteral* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Expression_UIntLiteral* New() const final {
    return CreateMaybeMessage<FirrtlPB_Expression_UIntLiteral>(nullptr);
  }

  FirrtlPB_Expression_UIntLiteral* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Expression_UIntLiteral>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Expression_UIntLiteral& from);
  void MergeFrom(const FirrtlPB_Expression_UIntLiteral& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Expression_UIntLiteral* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Expression.UIntLiteral";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kWidthFieldNumber = 2,
  };
  // .firrtl.FirrtlPB.Expression.IntegerLiteral value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::firrtl::FirrtlPB_Expression_IntegerLiteral& value() const;
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* release_value();
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* mutable_value();
  void set_allocated_value(::firrtl::FirrtlPB_Expression_IntegerLiteral* value);
  private:
  const ::firrtl::FirrtlPB_Expression_IntegerLiteral& _internal_value() const;
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* _internal_mutable_value();
  public:

  // .firrtl.FirrtlPB.Width width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  const ::firrtl::FirrtlPB_Width& width() const;
  ::firrtl::FirrtlPB_Width* release_width();
  ::firrtl::FirrtlPB_Width* mutable_width();
  void set_allocated_width(::firrtl::FirrtlPB_Width* width);
  private:
  const ::firrtl::FirrtlPB_Width& _internal_width() const;
  ::firrtl::FirrtlPB_Width* _internal_mutable_width();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Expression.UIntLiteral)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* value_;
  ::firrtl::FirrtlPB_Width* width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Expression_SIntLiteral :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Expression.SIntLiteral) */ {
 public:
  FirrtlPB_Expression_SIntLiteral();
  virtual ~FirrtlPB_Expression_SIntLiteral();

  FirrtlPB_Expression_SIntLiteral(const FirrtlPB_Expression_SIntLiteral& from);
  FirrtlPB_Expression_SIntLiteral(FirrtlPB_Expression_SIntLiteral&& from) noexcept
    : FirrtlPB_Expression_SIntLiteral() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Expression_SIntLiteral& operator=(const FirrtlPB_Expression_SIntLiteral& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Expression_SIntLiteral& operator=(FirrtlPB_Expression_SIntLiteral&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Expression_SIntLiteral& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Expression_SIntLiteral* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Expression_SIntLiteral*>(
               &_FirrtlPB_Expression_SIntLiteral_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(FirrtlPB_Expression_SIntLiteral& a, FirrtlPB_Expression_SIntLiteral& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Expression_SIntLiteral* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Expression_SIntLiteral* New() const final {
    return CreateMaybeMessage<FirrtlPB_Expression_SIntLiteral>(nullptr);
  }

  FirrtlPB_Expression_SIntLiteral* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Expression_SIntLiteral>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Expression_SIntLiteral& from);
  void MergeFrom(const FirrtlPB_Expression_SIntLiteral& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Expression_SIntLiteral* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Expression.SIntLiteral";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kWidthFieldNumber = 2,
  };
  // .firrtl.FirrtlPB.Expression.IntegerLiteral value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::firrtl::FirrtlPB_Expression_IntegerLiteral& value() const;
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* release_value();
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* mutable_value();
  void set_allocated_value(::firrtl::FirrtlPB_Expression_IntegerLiteral* value);
  private:
  const ::firrtl::FirrtlPB_Expression_IntegerLiteral& _internal_value() const;
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* _internal_mutable_value();
  public:

  // .firrtl.FirrtlPB.Width width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  const ::firrtl::FirrtlPB_Width& width() const;
  ::firrtl::FirrtlPB_Width* release_width();
  ::firrtl::FirrtlPB_Width* mutable_width();
  void set_allocated_width(::firrtl::FirrtlPB_Width* width);
  private:
  const ::firrtl::FirrtlPB_Width& _internal_width() const;
  ::firrtl::FirrtlPB_Width* _internal_mutable_width();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Expression.SIntLiteral)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* value_;
  ::firrtl::FirrtlPB_Width* width_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Expression_FixedLiteral :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Expression.FixedLiteral) */ {
 public:
  FirrtlPB_Expression_FixedLiteral();
  virtual ~FirrtlPB_Expression_FixedLiteral();

  FirrtlPB_Expression_FixedLiteral(const FirrtlPB_Expression_FixedLiteral& from);
  FirrtlPB_Expression_FixedLiteral(FirrtlPB_Expression_FixedLiteral&& from) noexcept
    : FirrtlPB_Expression_FixedLiteral() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Expression_FixedLiteral& operator=(const FirrtlPB_Expression_FixedLiteral& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Expression_FixedLiteral& operator=(FirrtlPB_Expression_FixedLiteral&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Expression_FixedLiteral& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Expression_FixedLiteral* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Expression_FixedLiteral*>(
               &_FirrtlPB_Expression_FixedLiteral_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(FirrtlPB_Expression_FixedLiteral& a, FirrtlPB_Expression_FixedLiteral& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Expression_FixedLiteral* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Expression_FixedLiteral* New() const final {
    return CreateMaybeMessage<FirrtlPB_Expression_FixedLiteral>(nullptr);
  }

  FirrtlPB_Expression_FixedLiteral* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Expression_FixedLiteral>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Expression_FixedLiteral& from);
  void MergeFrom(const FirrtlPB_Expression_FixedLiteral& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Expression_FixedLiteral* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Expression.FixedLiteral";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kWidthFieldNumber = 2,
    kPointFieldNumber = 3,
  };
  // .firrtl.FirrtlPB.BigInt value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::firrtl::FirrtlPB_BigInt& value() const;
  ::firrtl::FirrtlPB_BigInt* release_value();
  ::firrtl::FirrtlPB_BigInt* mutable_value();
  void set_allocated_value(::firrtl::FirrtlPB_BigInt* value);
  private:
  const ::firrtl::FirrtlPB_BigInt& _internal_value() const;
  ::firrtl::FirrtlPB_BigInt* _internal_mutable_value();
  public:

  // .firrtl.FirrtlPB.Width width = 2;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  const ::firrtl::FirrtlPB_Width& width() const;
  ::firrtl::FirrtlPB_Width* release_width();
  ::firrtl::FirrtlPB_Width* mutable_width();
  void set_allocated_width(::firrtl::FirrtlPB_Width* width);
  private:
  const ::firrtl::FirrtlPB_Width& _internal_width() const;
  ::firrtl::FirrtlPB_Width* _internal_mutable_width();
  public:

  // .firrtl.FirrtlPB.Width point = 3;
  bool has_point() const;
  private:
  bool _internal_has_point() const;
  public:
  void clear_point();
  const ::firrtl::FirrtlPB_Width& point() const;
  ::firrtl::FirrtlPB_Width* release_point();
  ::firrtl::FirrtlPB_Width* mutable_point();
  void set_allocated_point(::firrtl::FirrtlPB_Width* point);
  private:
  const ::firrtl::FirrtlPB_Width& _internal_point() const;
  ::firrtl::FirrtlPB_Width* _internal_mutable_point();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Expression.FixedLiteral)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_BigInt* value_;
  ::firrtl::FirrtlPB_Width* width_;
  ::firrtl::FirrtlPB_Width* point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Expression_ValidIf :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Expression.ValidIf) */ {
 public:
  FirrtlPB_Expression_ValidIf();
  virtual ~FirrtlPB_Expression_ValidIf();

  FirrtlPB_Expression_ValidIf(const FirrtlPB_Expression_ValidIf& from);
  FirrtlPB_Expression_ValidIf(FirrtlPB_Expression_ValidIf&& from) noexcept
    : FirrtlPB_Expression_ValidIf() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Expression_ValidIf& operator=(const FirrtlPB_Expression_ValidIf& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Expression_ValidIf& operator=(FirrtlPB_Expression_ValidIf&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Expression_ValidIf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Expression_ValidIf* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Expression_ValidIf*>(
               &_FirrtlPB_Expression_ValidIf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(FirrtlPB_Expression_ValidIf& a, FirrtlPB_Expression_ValidIf& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Expression_ValidIf* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Expression_ValidIf* New() const final {
    return CreateMaybeMessage<FirrtlPB_Expression_ValidIf>(nullptr);
  }

  FirrtlPB_Expression_ValidIf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Expression_ValidIf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Expression_ValidIf& from);
  void MergeFrom(const FirrtlPB_Expression_ValidIf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Expression_ValidIf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Expression.ValidIf";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // .firrtl.FirrtlPB.Expression condition = 1;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::firrtl::FirrtlPB_Expression& condition() const;
  ::firrtl::FirrtlPB_Expression* release_condition();
  ::firrtl::FirrtlPB_Expression* mutable_condition();
  void set_allocated_condition(::firrtl::FirrtlPB_Expression* condition);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_condition() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_condition();
  public:

  // .firrtl.FirrtlPB.Expression value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::firrtl::FirrtlPB_Expression& value() const;
  ::firrtl::FirrtlPB_Expression* release_value();
  ::firrtl::FirrtlPB_Expression* mutable_value();
  void set_allocated_value(::firrtl::FirrtlPB_Expression* value);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_value() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Expression.ValidIf)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Expression* condition_;
  ::firrtl::FirrtlPB_Expression* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Expression_Mux :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Expression.Mux) */ {
 public:
  FirrtlPB_Expression_Mux();
  virtual ~FirrtlPB_Expression_Mux();

  FirrtlPB_Expression_Mux(const FirrtlPB_Expression_Mux& from);
  FirrtlPB_Expression_Mux(FirrtlPB_Expression_Mux&& from) noexcept
    : FirrtlPB_Expression_Mux() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Expression_Mux& operator=(const FirrtlPB_Expression_Mux& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Expression_Mux& operator=(FirrtlPB_Expression_Mux&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Expression_Mux& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Expression_Mux* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Expression_Mux*>(
               &_FirrtlPB_Expression_Mux_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(FirrtlPB_Expression_Mux& a, FirrtlPB_Expression_Mux& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Expression_Mux* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Expression_Mux* New() const final {
    return CreateMaybeMessage<FirrtlPB_Expression_Mux>(nullptr);
  }

  FirrtlPB_Expression_Mux* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Expression_Mux>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Expression_Mux& from);
  void MergeFrom(const FirrtlPB_Expression_Mux& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Expression_Mux* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Expression.Mux";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 1,
    kTValueFieldNumber = 2,
    kFValueFieldNumber = 3,
  };
  // .firrtl.FirrtlPB.Expression condition = 1;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::firrtl::FirrtlPB_Expression& condition() const;
  ::firrtl::FirrtlPB_Expression* release_condition();
  ::firrtl::FirrtlPB_Expression* mutable_condition();
  void set_allocated_condition(::firrtl::FirrtlPB_Expression* condition);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_condition() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_condition();
  public:

  // .firrtl.FirrtlPB.Expression t_value = 2;
  bool has_t_value() const;
  private:
  bool _internal_has_t_value() const;
  public:
  void clear_t_value();
  const ::firrtl::FirrtlPB_Expression& t_value() const;
  ::firrtl::FirrtlPB_Expression* release_t_value();
  ::firrtl::FirrtlPB_Expression* mutable_t_value();
  void set_allocated_t_value(::firrtl::FirrtlPB_Expression* t_value);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_t_value() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_t_value();
  public:

  // .firrtl.FirrtlPB.Expression f_value = 3;
  bool has_f_value() const;
  private:
  bool _internal_has_f_value() const;
  public:
  void clear_f_value();
  const ::firrtl::FirrtlPB_Expression& f_value() const;
  ::firrtl::FirrtlPB_Expression* release_f_value();
  ::firrtl::FirrtlPB_Expression* mutable_f_value();
  void set_allocated_f_value(::firrtl::FirrtlPB_Expression* f_value);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_f_value() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_f_value();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Expression.Mux)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Expression* condition_;
  ::firrtl::FirrtlPB_Expression* t_value_;
  ::firrtl::FirrtlPB_Expression* f_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Expression_SubField :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Expression.SubField) */ {
 public:
  FirrtlPB_Expression_SubField();
  virtual ~FirrtlPB_Expression_SubField();

  FirrtlPB_Expression_SubField(const FirrtlPB_Expression_SubField& from);
  FirrtlPB_Expression_SubField(FirrtlPB_Expression_SubField&& from) noexcept
    : FirrtlPB_Expression_SubField() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Expression_SubField& operator=(const FirrtlPB_Expression_SubField& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Expression_SubField& operator=(FirrtlPB_Expression_SubField&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Expression_SubField& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Expression_SubField* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Expression_SubField*>(
               &_FirrtlPB_Expression_SubField_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(FirrtlPB_Expression_SubField& a, FirrtlPB_Expression_SubField& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Expression_SubField* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Expression_SubField* New() const final {
    return CreateMaybeMessage<FirrtlPB_Expression_SubField>(nullptr);
  }

  FirrtlPB_Expression_SubField* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Expression_SubField>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Expression_SubField& from);
  void MergeFrom(const FirrtlPB_Expression_SubField& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Expression_SubField* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Expression.SubField";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldFieldNumber = 2,
    kExpressionFieldNumber = 1,
  };
  // string field = 2;
  void clear_field();
  const std::string& field() const;
  void set_field(const std::string& value);
  void set_field(std::string&& value);
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  std::string* mutable_field();
  std::string* release_field();
  void set_allocated_field(std::string* field);
  private:
  const std::string& _internal_field() const;
  void _internal_set_field(const std::string& value);
  std::string* _internal_mutable_field();
  public:

  // .firrtl.FirrtlPB.Expression expression = 1;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::firrtl::FirrtlPB_Expression& expression() const;
  ::firrtl::FirrtlPB_Expression* release_expression();
  ::firrtl::FirrtlPB_Expression* mutable_expression();
  void set_allocated_expression(::firrtl::FirrtlPB_Expression* expression);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_expression() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_expression();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Expression.SubField)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr field_;
  ::firrtl::FirrtlPB_Expression* expression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Expression_SubIndex :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Expression.SubIndex) */ {
 public:
  FirrtlPB_Expression_SubIndex();
  virtual ~FirrtlPB_Expression_SubIndex();

  FirrtlPB_Expression_SubIndex(const FirrtlPB_Expression_SubIndex& from);
  FirrtlPB_Expression_SubIndex(FirrtlPB_Expression_SubIndex&& from) noexcept
    : FirrtlPB_Expression_SubIndex() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Expression_SubIndex& operator=(const FirrtlPB_Expression_SubIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Expression_SubIndex& operator=(FirrtlPB_Expression_SubIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Expression_SubIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Expression_SubIndex* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Expression_SubIndex*>(
               &_FirrtlPB_Expression_SubIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(FirrtlPB_Expression_SubIndex& a, FirrtlPB_Expression_SubIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Expression_SubIndex* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Expression_SubIndex* New() const final {
    return CreateMaybeMessage<FirrtlPB_Expression_SubIndex>(nullptr);
  }

  FirrtlPB_Expression_SubIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Expression_SubIndex>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Expression_SubIndex& from);
  void MergeFrom(const FirrtlPB_Expression_SubIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Expression_SubIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Expression.SubIndex";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // .firrtl.FirrtlPB.Expression expression = 1;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::firrtl::FirrtlPB_Expression& expression() const;
  ::firrtl::FirrtlPB_Expression* release_expression();
  ::firrtl::FirrtlPB_Expression* mutable_expression();
  void set_allocated_expression(::firrtl::FirrtlPB_Expression* expression);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_expression() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_expression();
  public:

  // .firrtl.FirrtlPB.Expression.IntegerLiteral index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  const ::firrtl::FirrtlPB_Expression_IntegerLiteral& index() const;
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* release_index();
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* mutable_index();
  void set_allocated_index(::firrtl::FirrtlPB_Expression_IntegerLiteral* index);
  private:
  const ::firrtl::FirrtlPB_Expression_IntegerLiteral& _internal_index() const;
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* _internal_mutable_index();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Expression.SubIndex)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Expression* expression_;
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Expression_SubAccess :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Expression.SubAccess) */ {
 public:
  FirrtlPB_Expression_SubAccess();
  virtual ~FirrtlPB_Expression_SubAccess();

  FirrtlPB_Expression_SubAccess(const FirrtlPB_Expression_SubAccess& from);
  FirrtlPB_Expression_SubAccess(FirrtlPB_Expression_SubAccess&& from) noexcept
    : FirrtlPB_Expression_SubAccess() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Expression_SubAccess& operator=(const FirrtlPB_Expression_SubAccess& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Expression_SubAccess& operator=(FirrtlPB_Expression_SubAccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Expression_SubAccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Expression_SubAccess* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Expression_SubAccess*>(
               &_FirrtlPB_Expression_SubAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(FirrtlPB_Expression_SubAccess& a, FirrtlPB_Expression_SubAccess& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Expression_SubAccess* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Expression_SubAccess* New() const final {
    return CreateMaybeMessage<FirrtlPB_Expression_SubAccess>(nullptr);
  }

  FirrtlPB_Expression_SubAccess* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Expression_SubAccess>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Expression_SubAccess& from);
  void MergeFrom(const FirrtlPB_Expression_SubAccess& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Expression_SubAccess* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Expression.SubAccess";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpressionFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // .firrtl.FirrtlPB.Expression expression = 1;
  bool has_expression() const;
  private:
  bool _internal_has_expression() const;
  public:
  void clear_expression();
  const ::firrtl::FirrtlPB_Expression& expression() const;
  ::firrtl::FirrtlPB_Expression* release_expression();
  ::firrtl::FirrtlPB_Expression* mutable_expression();
  void set_allocated_expression(::firrtl::FirrtlPB_Expression* expression);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_expression() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_expression();
  public:

  // .firrtl.FirrtlPB.Expression index = 2;
  bool has_index() const;
  private:
  bool _internal_has_index() const;
  public:
  void clear_index();
  const ::firrtl::FirrtlPB_Expression& index() const;
  ::firrtl::FirrtlPB_Expression* release_index();
  ::firrtl::FirrtlPB_Expression* mutable_index();
  void set_allocated_index(::firrtl::FirrtlPB_Expression* index);
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_index() const;
  ::firrtl::FirrtlPB_Expression* _internal_mutable_index();
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Expression.SubAccess)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::firrtl::FirrtlPB_Expression* expression_;
  ::firrtl::FirrtlPB_Expression* index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Expression_PrimOp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Expression.PrimOp) */ {
 public:
  FirrtlPB_Expression_PrimOp();
  virtual ~FirrtlPB_Expression_PrimOp();

  FirrtlPB_Expression_PrimOp(const FirrtlPB_Expression_PrimOp& from);
  FirrtlPB_Expression_PrimOp(FirrtlPB_Expression_PrimOp&& from) noexcept
    : FirrtlPB_Expression_PrimOp() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Expression_PrimOp& operator=(const FirrtlPB_Expression_PrimOp& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Expression_PrimOp& operator=(FirrtlPB_Expression_PrimOp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Expression_PrimOp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Expression_PrimOp* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Expression_PrimOp*>(
               &_FirrtlPB_Expression_PrimOp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(FirrtlPB_Expression_PrimOp& a, FirrtlPB_Expression_PrimOp& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Expression_PrimOp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Expression_PrimOp* New() const final {
    return CreateMaybeMessage<FirrtlPB_Expression_PrimOp>(nullptr);
  }

  FirrtlPB_Expression_PrimOp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Expression_PrimOp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Expression_PrimOp& from);
  void MergeFrom(const FirrtlPB_Expression_PrimOp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Expression_PrimOp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Expression.PrimOp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_Expression_PrimOp_Op Op;
  static constexpr Op OP_UNKNOWN =
    FirrtlPB_Expression_PrimOp_Op_OP_UNKNOWN;
  static constexpr Op OP_ADD =
    FirrtlPB_Expression_PrimOp_Op_OP_ADD;
  static constexpr Op OP_SUB =
    FirrtlPB_Expression_PrimOp_Op_OP_SUB;
  static constexpr Op OP_TAIL =
    FirrtlPB_Expression_PrimOp_Op_OP_TAIL;
  static constexpr Op OP_HEAD =
    FirrtlPB_Expression_PrimOp_Op_OP_HEAD;
  static constexpr Op OP_TIMES =
    FirrtlPB_Expression_PrimOp_Op_OP_TIMES;
  static constexpr Op OP_DIVIDE =
    FirrtlPB_Expression_PrimOp_Op_OP_DIVIDE;
  static constexpr Op OP_REM =
    FirrtlPB_Expression_PrimOp_Op_OP_REM;
  static constexpr Op OP_SHIFT_LEFT =
    FirrtlPB_Expression_PrimOp_Op_OP_SHIFT_LEFT;
  static constexpr Op OP_SHIFT_RIGHT =
    FirrtlPB_Expression_PrimOp_Op_OP_SHIFT_RIGHT;
  static constexpr Op OP_DYNAMIC_SHIFT_LEFT =
    FirrtlPB_Expression_PrimOp_Op_OP_DYNAMIC_SHIFT_LEFT;
  static constexpr Op OP_DYNAMIC_SHIFT_RIGHT =
    FirrtlPB_Expression_PrimOp_Op_OP_DYNAMIC_SHIFT_RIGHT;
  static constexpr Op OP_BIT_AND =
    FirrtlPB_Expression_PrimOp_Op_OP_BIT_AND;
  static constexpr Op OP_BIT_OR =
    FirrtlPB_Expression_PrimOp_Op_OP_BIT_OR;
  static constexpr Op OP_BIT_XOR =
    FirrtlPB_Expression_PrimOp_Op_OP_BIT_XOR;
  static constexpr Op OP_BIT_NOT =
    FirrtlPB_Expression_PrimOp_Op_OP_BIT_NOT;
  static constexpr Op OP_CONCAT =
    FirrtlPB_Expression_PrimOp_Op_OP_CONCAT;
  static constexpr Op OP_LESS =
    FirrtlPB_Expression_PrimOp_Op_OP_LESS;
  static constexpr Op OP_LESS_EQ =
    FirrtlPB_Expression_PrimOp_Op_OP_LESS_EQ;
  static constexpr Op OP_GREATER =
    FirrtlPB_Expression_PrimOp_Op_OP_GREATER;
  static constexpr Op OP_GREATER_EQ =
    FirrtlPB_Expression_PrimOp_Op_OP_GREATER_EQ;
  static constexpr Op OP_EQUAL =
    FirrtlPB_Expression_PrimOp_Op_OP_EQUAL;
  static constexpr Op OP_PAD =
    FirrtlPB_Expression_PrimOp_Op_OP_PAD;
  static constexpr Op OP_NOT_EQUAL =
    FirrtlPB_Expression_PrimOp_Op_OP_NOT_EQUAL;
  static constexpr Op OP_NEG =
    FirrtlPB_Expression_PrimOp_Op_OP_NEG;
  static constexpr Op OP_XOR_REDUCE =
    FirrtlPB_Expression_PrimOp_Op_OP_XOR_REDUCE;
  static constexpr Op OP_CONVERT =
    FirrtlPB_Expression_PrimOp_Op_OP_CONVERT;
  static constexpr Op OP_AS_UINT =
    FirrtlPB_Expression_PrimOp_Op_OP_AS_UINT;
  static constexpr Op OP_AS_SINT =
    FirrtlPB_Expression_PrimOp_Op_OP_AS_SINT;
  static constexpr Op OP_EXTRACT_BITS =
    FirrtlPB_Expression_PrimOp_Op_OP_EXTRACT_BITS;
  static constexpr Op OP_AS_CLOCK =
    FirrtlPB_Expression_PrimOp_Op_OP_AS_CLOCK;
  static constexpr Op OP_AS_FIXED_POINT =
    FirrtlPB_Expression_PrimOp_Op_OP_AS_FIXED_POINT;
  static constexpr Op OP_AND_REDUCE =
    FirrtlPB_Expression_PrimOp_Op_OP_AND_REDUCE;
  static constexpr Op OP_OR_REDUCE =
    FirrtlPB_Expression_PrimOp_Op_OP_OR_REDUCE;
  static constexpr Op OP_INCREASE_PRECISION =
    FirrtlPB_Expression_PrimOp_Op_OP_INCREASE_PRECISION;
  static constexpr Op OP_DECREASE_PRECISION =
    FirrtlPB_Expression_PrimOp_Op_OP_DECREASE_PRECISION;
  static constexpr Op OP_SET_PRECISION =
    FirrtlPB_Expression_PrimOp_Op_OP_SET_PRECISION;
  static constexpr Op OP_AS_ASYNC_RESET =
    FirrtlPB_Expression_PrimOp_Op_OP_AS_ASYNC_RESET;
  static constexpr Op OP_WRAP =
    FirrtlPB_Expression_PrimOp_Op_OP_WRAP;
  static constexpr Op OP_CLIP =
    FirrtlPB_Expression_PrimOp_Op_OP_CLIP;
  static constexpr Op OP_SQUEEZE =
    FirrtlPB_Expression_PrimOp_Op_OP_SQUEEZE;
  static constexpr Op OP_AS_INTERVAL =
    FirrtlPB_Expression_PrimOp_Op_OP_AS_INTERVAL;
  static inline bool Op_IsValid(int value) {
    return FirrtlPB_Expression_PrimOp_Op_IsValid(value);
  }
  static constexpr Op Op_MIN =
    FirrtlPB_Expression_PrimOp_Op_Op_MIN;
  static constexpr Op Op_MAX =
    FirrtlPB_Expression_PrimOp_Op_Op_MAX;
  static constexpr int Op_ARRAYSIZE =
    FirrtlPB_Expression_PrimOp_Op_Op_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Op_descriptor() {
    return FirrtlPB_Expression_PrimOp_Op_descriptor();
  }
  template<typename T>
  static inline const std::string& Op_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Op>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Op_Name.");
    return FirrtlPB_Expression_PrimOp_Op_Name(enum_t_value);
  }
  static inline bool Op_Parse(const std::string& name,
      Op* value) {
    return FirrtlPB_Expression_PrimOp_Op_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kArgFieldNumber = 2,
    kConstFieldNumber = 3,
    kOpFieldNumber = 1,
  };
  // repeated .firrtl.FirrtlPB.Expression arg = 2;
  int arg_size() const;
  private:
  int _internal_arg_size() const;
  public:
  void clear_arg();
  ::firrtl::FirrtlPB_Expression* mutable_arg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression >*
      mutable_arg();
  private:
  const ::firrtl::FirrtlPB_Expression& _internal_arg(int index) const;
  ::firrtl::FirrtlPB_Expression* _internal_add_arg();
  public:
  const ::firrtl::FirrtlPB_Expression& arg(int index) const;
  ::firrtl::FirrtlPB_Expression* add_arg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression >&
      arg() const;

  // repeated .firrtl.FirrtlPB.Expression.IntegerLiteral const = 3;
  int const__size() const;
  private:
  int _internal_const__size() const;
  public:
  void clear_const_();
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* mutable_const_(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression_IntegerLiteral >*
      mutable_const_();
  private:
  const ::firrtl::FirrtlPB_Expression_IntegerLiteral& _internal_const_(int index) const;
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* _internal_add_const_();
  public:
  const ::firrtl::FirrtlPB_Expression_IntegerLiteral& const_(int index) const;
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* add_const_();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression_IntegerLiteral >&
      const_() const;

  // .firrtl.FirrtlPB.Expression.PrimOp.Op op = 1;
  void clear_op();
  ::firrtl::FirrtlPB_Expression_PrimOp_Op op() const;
  void set_op(::firrtl::FirrtlPB_Expression_PrimOp_Op value);
  private:
  ::firrtl::FirrtlPB_Expression_PrimOp_Op _internal_op() const;
  void _internal_set_op(::firrtl::FirrtlPB_Expression_PrimOp_Op value);
  public:

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Expression.PrimOp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression > arg_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression_IntegerLiteral > const__;
  int op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB_Expression :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB.Expression) */ {
 public:
  FirrtlPB_Expression();
  virtual ~FirrtlPB_Expression();

  FirrtlPB_Expression(const FirrtlPB_Expression& from);
  FirrtlPB_Expression(FirrtlPB_Expression&& from) noexcept
    : FirrtlPB_Expression() {
    *this = ::std::move(from);
  }

  inline FirrtlPB_Expression& operator=(const FirrtlPB_Expression& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB_Expression& operator=(FirrtlPB_Expression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB_Expression& default_instance();

  enum ExpressionCase {
    kReference = 1,
    kUintLiteral = 2,
    kSintLiteral = 3,
    kFixedLiteral = 11,
    kValidIf = 4,
    kMux = 6,
    kSubField = 7,
    kSubIndex = 8,
    kSubAccess = 9,
    kPrimOp = 10,
    EXPRESSION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB_Expression* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB_Expression*>(
               &_FirrtlPB_Expression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(FirrtlPB_Expression& a, FirrtlPB_Expression& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB_Expression* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB_Expression* New() const final {
    return CreateMaybeMessage<FirrtlPB_Expression>(nullptr);
  }

  FirrtlPB_Expression* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB_Expression>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB_Expression& from);
  void MergeFrom(const FirrtlPB_Expression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB_Expression* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB.Expression";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_Expression_Reference Reference;
  typedef FirrtlPB_Expression_IntegerLiteral IntegerLiteral;
  typedef FirrtlPB_Expression_UIntLiteral UIntLiteral;
  typedef FirrtlPB_Expression_SIntLiteral SIntLiteral;
  typedef FirrtlPB_Expression_FixedLiteral FixedLiteral;
  typedef FirrtlPB_Expression_ValidIf ValidIf;
  typedef FirrtlPB_Expression_Mux Mux;
  typedef FirrtlPB_Expression_SubField SubField;
  typedef FirrtlPB_Expression_SubIndex SubIndex;
  typedef FirrtlPB_Expression_SubAccess SubAccess;
  typedef FirrtlPB_Expression_PrimOp PrimOp;

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFieldNumber = 1,
    kUintLiteralFieldNumber = 2,
    kSintLiteralFieldNumber = 3,
    kFixedLiteralFieldNumber = 11,
    kValidIfFieldNumber = 4,
    kMuxFieldNumber = 6,
    kSubFieldFieldNumber = 7,
    kSubIndexFieldNumber = 8,
    kSubAccessFieldNumber = 9,
    kPrimOpFieldNumber = 10,
  };
  // .firrtl.FirrtlPB.Expression.Reference reference = 1;
  bool has_reference() const;
  private:
  bool _internal_has_reference() const;
  public:
  void clear_reference();
  const ::firrtl::FirrtlPB_Expression_Reference& reference() const;
  ::firrtl::FirrtlPB_Expression_Reference* release_reference();
  ::firrtl::FirrtlPB_Expression_Reference* mutable_reference();
  void set_allocated_reference(::firrtl::FirrtlPB_Expression_Reference* reference);
  private:
  const ::firrtl::FirrtlPB_Expression_Reference& _internal_reference() const;
  ::firrtl::FirrtlPB_Expression_Reference* _internal_mutable_reference();
  public:

  // .firrtl.FirrtlPB.Expression.UIntLiteral uint_literal = 2;
  bool has_uint_literal() const;
  private:
  bool _internal_has_uint_literal() const;
  public:
  void clear_uint_literal();
  const ::firrtl::FirrtlPB_Expression_UIntLiteral& uint_literal() const;
  ::firrtl::FirrtlPB_Expression_UIntLiteral* release_uint_literal();
  ::firrtl::FirrtlPB_Expression_UIntLiteral* mutable_uint_literal();
  void set_allocated_uint_literal(::firrtl::FirrtlPB_Expression_UIntLiteral* uint_literal);
  private:
  const ::firrtl::FirrtlPB_Expression_UIntLiteral& _internal_uint_literal() const;
  ::firrtl::FirrtlPB_Expression_UIntLiteral* _internal_mutable_uint_literal();
  public:

  // .firrtl.FirrtlPB.Expression.SIntLiteral sint_literal = 3;
  bool has_sint_literal() const;
  private:
  bool _internal_has_sint_literal() const;
  public:
  void clear_sint_literal();
  const ::firrtl::FirrtlPB_Expression_SIntLiteral& sint_literal() const;
  ::firrtl::FirrtlPB_Expression_SIntLiteral* release_sint_literal();
  ::firrtl::FirrtlPB_Expression_SIntLiteral* mutable_sint_literal();
  void set_allocated_sint_literal(::firrtl::FirrtlPB_Expression_SIntLiteral* sint_literal);
  private:
  const ::firrtl::FirrtlPB_Expression_SIntLiteral& _internal_sint_literal() const;
  ::firrtl::FirrtlPB_Expression_SIntLiteral* _internal_mutable_sint_literal();
  public:

  // .firrtl.FirrtlPB.Expression.FixedLiteral fixed_literal = 11;
  bool has_fixed_literal() const;
  private:
  bool _internal_has_fixed_literal() const;
  public:
  void clear_fixed_literal();
  const ::firrtl::FirrtlPB_Expression_FixedLiteral& fixed_literal() const;
  ::firrtl::FirrtlPB_Expression_FixedLiteral* release_fixed_literal();
  ::firrtl::FirrtlPB_Expression_FixedLiteral* mutable_fixed_literal();
  void set_allocated_fixed_literal(::firrtl::FirrtlPB_Expression_FixedLiteral* fixed_literal);
  private:
  const ::firrtl::FirrtlPB_Expression_FixedLiteral& _internal_fixed_literal() const;
  ::firrtl::FirrtlPB_Expression_FixedLiteral* _internal_mutable_fixed_literal();
  public:

  // .firrtl.FirrtlPB.Expression.ValidIf valid_if = 4;
  bool has_valid_if() const;
  private:
  bool _internal_has_valid_if() const;
  public:
  void clear_valid_if();
  const ::firrtl::FirrtlPB_Expression_ValidIf& valid_if() const;
  ::firrtl::FirrtlPB_Expression_ValidIf* release_valid_if();
  ::firrtl::FirrtlPB_Expression_ValidIf* mutable_valid_if();
  void set_allocated_valid_if(::firrtl::FirrtlPB_Expression_ValidIf* valid_if);
  private:
  const ::firrtl::FirrtlPB_Expression_ValidIf& _internal_valid_if() const;
  ::firrtl::FirrtlPB_Expression_ValidIf* _internal_mutable_valid_if();
  public:

  // .firrtl.FirrtlPB.Expression.Mux mux = 6;
  bool has_mux() const;
  private:
  bool _internal_has_mux() const;
  public:
  void clear_mux();
  const ::firrtl::FirrtlPB_Expression_Mux& mux() const;
  ::firrtl::FirrtlPB_Expression_Mux* release_mux();
  ::firrtl::FirrtlPB_Expression_Mux* mutable_mux();
  void set_allocated_mux(::firrtl::FirrtlPB_Expression_Mux* mux);
  private:
  const ::firrtl::FirrtlPB_Expression_Mux& _internal_mux() const;
  ::firrtl::FirrtlPB_Expression_Mux* _internal_mutable_mux();
  public:

  // .firrtl.FirrtlPB.Expression.SubField sub_field = 7;
  bool has_sub_field() const;
  private:
  bool _internal_has_sub_field() const;
  public:
  void clear_sub_field();
  const ::firrtl::FirrtlPB_Expression_SubField& sub_field() const;
  ::firrtl::FirrtlPB_Expression_SubField* release_sub_field();
  ::firrtl::FirrtlPB_Expression_SubField* mutable_sub_field();
  void set_allocated_sub_field(::firrtl::FirrtlPB_Expression_SubField* sub_field);
  private:
  const ::firrtl::FirrtlPB_Expression_SubField& _internal_sub_field() const;
  ::firrtl::FirrtlPB_Expression_SubField* _internal_mutable_sub_field();
  public:

  // .firrtl.FirrtlPB.Expression.SubIndex sub_index = 8;
  bool has_sub_index() const;
  private:
  bool _internal_has_sub_index() const;
  public:
  void clear_sub_index();
  const ::firrtl::FirrtlPB_Expression_SubIndex& sub_index() const;
  ::firrtl::FirrtlPB_Expression_SubIndex* release_sub_index();
  ::firrtl::FirrtlPB_Expression_SubIndex* mutable_sub_index();
  void set_allocated_sub_index(::firrtl::FirrtlPB_Expression_SubIndex* sub_index);
  private:
  const ::firrtl::FirrtlPB_Expression_SubIndex& _internal_sub_index() const;
  ::firrtl::FirrtlPB_Expression_SubIndex* _internal_mutable_sub_index();
  public:

  // .firrtl.FirrtlPB.Expression.SubAccess sub_access = 9;
  bool has_sub_access() const;
  private:
  bool _internal_has_sub_access() const;
  public:
  void clear_sub_access();
  const ::firrtl::FirrtlPB_Expression_SubAccess& sub_access() const;
  ::firrtl::FirrtlPB_Expression_SubAccess* release_sub_access();
  ::firrtl::FirrtlPB_Expression_SubAccess* mutable_sub_access();
  void set_allocated_sub_access(::firrtl::FirrtlPB_Expression_SubAccess* sub_access);
  private:
  const ::firrtl::FirrtlPB_Expression_SubAccess& _internal_sub_access() const;
  ::firrtl::FirrtlPB_Expression_SubAccess* _internal_mutable_sub_access();
  public:

  // .firrtl.FirrtlPB.Expression.PrimOp prim_op = 10;
  bool has_prim_op() const;
  private:
  bool _internal_has_prim_op() const;
  public:
  void clear_prim_op();
  const ::firrtl::FirrtlPB_Expression_PrimOp& prim_op() const;
  ::firrtl::FirrtlPB_Expression_PrimOp* release_prim_op();
  ::firrtl::FirrtlPB_Expression_PrimOp* mutable_prim_op();
  void set_allocated_prim_op(::firrtl::FirrtlPB_Expression_PrimOp* prim_op);
  private:
  const ::firrtl::FirrtlPB_Expression_PrimOp& _internal_prim_op() const;
  ::firrtl::FirrtlPB_Expression_PrimOp* _internal_mutable_prim_op();
  public:

  void clear_expression();
  ExpressionCase expression_case() const;
  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB.Expression)
 private:
  class _Internal;
  void set_has_reference();
  void set_has_uint_literal();
  void set_has_sint_literal();
  void set_has_fixed_literal();
  void set_has_valid_if();
  void set_has_mux();
  void set_has_sub_field();
  void set_has_sub_index();
  void set_has_sub_access();
  void set_has_prim_op();

  inline bool has_expression() const;
  inline void clear_has_expression();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ExpressionUnion {
    ExpressionUnion() {}
    ::firrtl::FirrtlPB_Expression_Reference* reference_;
    ::firrtl::FirrtlPB_Expression_UIntLiteral* uint_literal_;
    ::firrtl::FirrtlPB_Expression_SIntLiteral* sint_literal_;
    ::firrtl::FirrtlPB_Expression_FixedLiteral* fixed_literal_;
    ::firrtl::FirrtlPB_Expression_ValidIf* valid_if_;
    ::firrtl::FirrtlPB_Expression_Mux* mux_;
    ::firrtl::FirrtlPB_Expression_SubField* sub_field_;
    ::firrtl::FirrtlPB_Expression_SubIndex* sub_index_;
    ::firrtl::FirrtlPB_Expression_SubAccess* sub_access_;
    ::firrtl::FirrtlPB_Expression_PrimOp* prim_op_;
  } expression_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// -------------------------------------------------------------------

class FirrtlPB :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:firrtl.FirrtlPB) */ {
 public:
  FirrtlPB();
  virtual ~FirrtlPB();

  FirrtlPB(const FirrtlPB& from);
  FirrtlPB(FirrtlPB&& from) noexcept
    : FirrtlPB() {
    *this = ::std::move(from);
  }

  inline FirrtlPB& operator=(const FirrtlPB& from) {
    CopyFrom(from);
    return *this;
  }
  inline FirrtlPB& operator=(FirrtlPB&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FirrtlPB& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FirrtlPB* internal_default_instance() {
    return reinterpret_cast<const FirrtlPB*>(
               &_FirrtlPB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(FirrtlPB& a, FirrtlPB& b) {
    a.Swap(&b);
  }
  inline void Swap(FirrtlPB* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FirrtlPB* New() const final {
    return CreateMaybeMessage<FirrtlPB>(nullptr);
  }

  FirrtlPB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FirrtlPB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FirrtlPB& from);
  void MergeFrom(const FirrtlPB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FirrtlPB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "firrtl.FirrtlPB";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
    return ::descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef FirrtlPB_SourceInfo SourceInfo;
  typedef FirrtlPB_BigInt BigInt;
  typedef FirrtlPB_Top Top;
  typedef FirrtlPB_Circuit Circuit;
  typedef FirrtlPB_Module Module;
  typedef FirrtlPB_Statement Statement;
  typedef FirrtlPB_Width Width;
  typedef FirrtlPB_Type Type;
  typedef FirrtlPB_Port Port;
  typedef FirrtlPB_Expression Expression;

  // accessors -------------------------------------------------------

  enum : int {
    kCircuitFieldNumber = 1,
  };
  // repeated .firrtl.FirrtlPB.Circuit circuit = 1;
  int circuit_size() const;
  private:
  int _internal_circuit_size() const;
  public:
  void clear_circuit();
  ::firrtl::FirrtlPB_Circuit* mutable_circuit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Circuit >*
      mutable_circuit();
  private:
  const ::firrtl::FirrtlPB_Circuit& _internal_circuit(int index) const;
  ::firrtl::FirrtlPB_Circuit* _internal_add_circuit();
  public:
  const ::firrtl::FirrtlPB_Circuit& circuit(int index) const;
  ::firrtl::FirrtlPB_Circuit* add_circuit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Circuit >&
      circuit() const;

  // @@protoc_insertion_point(class_scope:firrtl.FirrtlPB)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Circuit > circuit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_inou_2ffirrtl_2ffirrtl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FirrtlPB_SourceInfo_None

// .firrtl.FirrtlPB.SourceInfo.None.Reason reason = 1;
inline void FirrtlPB_SourceInfo_None::clear_reason() {
  reason_ = 0;
}
inline ::firrtl::FirrtlPB_SourceInfo_None_Reason FirrtlPB_SourceInfo_None::_internal_reason() const {
  return static_cast< ::firrtl::FirrtlPB_SourceInfo_None_Reason >(reason_);
}
inline ::firrtl::FirrtlPB_SourceInfo_None_Reason FirrtlPB_SourceInfo_None::reason() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.SourceInfo.None.reason)
  return _internal_reason();
}
inline void FirrtlPB_SourceInfo_None::_internal_set_reason(::firrtl::FirrtlPB_SourceInfo_None_Reason value) {
  
  reason_ = value;
}
inline void FirrtlPB_SourceInfo_None::set_reason(::firrtl::FirrtlPB_SourceInfo_None_Reason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.SourceInfo.None.reason)
}

// -------------------------------------------------------------------

// FirrtlPB_SourceInfo_Position

// string filename = 1;
inline void FirrtlPB_SourceInfo_Position::clear_filename() {
  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_SourceInfo_Position::filename() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.SourceInfo.Position.filename)
  return _internal_filename();
}
inline void FirrtlPB_SourceInfo_Position::set_filename(const std::string& value) {
  _internal_set_filename(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.SourceInfo.Position.filename)
}
inline std::string* FirrtlPB_SourceInfo_Position::mutable_filename() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.SourceInfo.Position.filename)
  return _internal_mutable_filename();
}
inline const std::string& FirrtlPB_SourceInfo_Position::_internal_filename() const {
  return filename_.GetNoArena();
}
inline void FirrtlPB_SourceInfo_Position::_internal_set_filename(const std::string& value) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_SourceInfo_Position::set_filename(std::string&& value) {
  
  filename_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.SourceInfo.Position.filename)
}
inline void FirrtlPB_SourceInfo_Position::set_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.SourceInfo.Position.filename)
}
inline void FirrtlPB_SourceInfo_Position::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.SourceInfo.Position.filename)
}
inline std::string* FirrtlPB_SourceInfo_Position::_internal_mutable_filename() {
  
  return filename_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_SourceInfo_Position::release_filename() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.SourceInfo.Position.filename)
  
  return filename_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_SourceInfo_Position::set_allocated_filename(std::string* filename) {
  if (filename != nullptr) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.SourceInfo.Position.filename)
}

// uint32 line = 2;
inline void FirrtlPB_SourceInfo_Position::clear_line() {
  line_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_SourceInfo_Position::_internal_line() const {
  return line_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_SourceInfo_Position::line() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.SourceInfo.Position.line)
  return _internal_line();
}
inline void FirrtlPB_SourceInfo_Position::_internal_set_line(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  line_ = value;
}
inline void FirrtlPB_SourceInfo_Position::set_line(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_line(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.SourceInfo.Position.line)
}

// uint32 column = 3;
inline void FirrtlPB_SourceInfo_Position::clear_column() {
  column_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_SourceInfo_Position::_internal_column() const {
  return column_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_SourceInfo_Position::column() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.SourceInfo.Position.column)
  return _internal_column();
}
inline void FirrtlPB_SourceInfo_Position::_internal_set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  column_ = value;
}
inline void FirrtlPB_SourceInfo_Position::set_column(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_column(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.SourceInfo.Position.column)
}

// -------------------------------------------------------------------

// FirrtlPB_SourceInfo

// .firrtl.FirrtlPB.SourceInfo.None none = 1;
inline bool FirrtlPB_SourceInfo::_internal_has_none() const {
  return source_info_case() == kNone;
}
inline bool FirrtlPB_SourceInfo::has_none() const {
  return _internal_has_none();
}
inline void FirrtlPB_SourceInfo::set_has_none() {
  _oneof_case_[0] = kNone;
}
inline void FirrtlPB_SourceInfo::clear_none() {
  if (_internal_has_none()) {
    delete source_info_.none_;
    clear_has_source_info();
  }
}
inline ::firrtl::FirrtlPB_SourceInfo_None* FirrtlPB_SourceInfo::release_none() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.SourceInfo.none)
  if (_internal_has_none()) {
    clear_has_source_info();
      ::firrtl::FirrtlPB_SourceInfo_None* temp = source_info_.none_;
    source_info_.none_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_SourceInfo_None& FirrtlPB_SourceInfo::_internal_none() const {
  return _internal_has_none()
      ? *source_info_.none_
      : *reinterpret_cast< ::firrtl::FirrtlPB_SourceInfo_None*>(&::firrtl::_FirrtlPB_SourceInfo_None_default_instance_);
}
inline const ::firrtl::FirrtlPB_SourceInfo_None& FirrtlPB_SourceInfo::none() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.SourceInfo.none)
  return _internal_none();
}
inline ::firrtl::FirrtlPB_SourceInfo_None* FirrtlPB_SourceInfo::_internal_mutable_none() {
  if (!_internal_has_none()) {
    clear_source_info();
    set_has_none();
    source_info_.none_ = CreateMaybeMessage< ::firrtl::FirrtlPB_SourceInfo_None >(
        GetArenaNoVirtual());
  }
  return source_info_.none_;
}
inline ::firrtl::FirrtlPB_SourceInfo_None* FirrtlPB_SourceInfo::mutable_none() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.SourceInfo.none)
  return _internal_mutable_none();
}

// .firrtl.FirrtlPB.SourceInfo.Position position = 2;
inline bool FirrtlPB_SourceInfo::_internal_has_position() const {
  return source_info_case() == kPosition;
}
inline bool FirrtlPB_SourceInfo::has_position() const {
  return _internal_has_position();
}
inline void FirrtlPB_SourceInfo::set_has_position() {
  _oneof_case_[0] = kPosition;
}
inline void FirrtlPB_SourceInfo::clear_position() {
  if (_internal_has_position()) {
    delete source_info_.position_;
    clear_has_source_info();
  }
}
inline ::firrtl::FirrtlPB_SourceInfo_Position* FirrtlPB_SourceInfo::release_position() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.SourceInfo.position)
  if (_internal_has_position()) {
    clear_has_source_info();
      ::firrtl::FirrtlPB_SourceInfo_Position* temp = source_info_.position_;
    source_info_.position_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_SourceInfo_Position& FirrtlPB_SourceInfo::_internal_position() const {
  return _internal_has_position()
      ? *source_info_.position_
      : *reinterpret_cast< ::firrtl::FirrtlPB_SourceInfo_Position*>(&::firrtl::_FirrtlPB_SourceInfo_Position_default_instance_);
}
inline const ::firrtl::FirrtlPB_SourceInfo_Position& FirrtlPB_SourceInfo::position() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.SourceInfo.position)
  return _internal_position();
}
inline ::firrtl::FirrtlPB_SourceInfo_Position* FirrtlPB_SourceInfo::_internal_mutable_position() {
  if (!_internal_has_position()) {
    clear_source_info();
    set_has_position();
    source_info_.position_ = CreateMaybeMessage< ::firrtl::FirrtlPB_SourceInfo_Position >(
        GetArenaNoVirtual());
  }
  return source_info_.position_;
}
inline ::firrtl::FirrtlPB_SourceInfo_Position* FirrtlPB_SourceInfo::mutable_position() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.SourceInfo.position)
  return _internal_mutable_position();
}

// string text = 3;
inline bool FirrtlPB_SourceInfo::_internal_has_text() const {
  return source_info_case() == kText;
}
inline void FirrtlPB_SourceInfo::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void FirrtlPB_SourceInfo::clear_text() {
  if (_internal_has_text()) {
    source_info_.text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_source_info();
  }
}
inline const std::string& FirrtlPB_SourceInfo::text() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.SourceInfo.text)
  return _internal_text();
}
inline void FirrtlPB_SourceInfo::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.SourceInfo.text)
}
inline std::string* FirrtlPB_SourceInfo::mutable_text() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.SourceInfo.text)
  return _internal_mutable_text();
}
inline const std::string& FirrtlPB_SourceInfo::_internal_text() const {
  if (_internal_has_text()) {
    return source_info_.text_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FirrtlPB_SourceInfo::_internal_set_text(const std::string& value) {
  if (!_internal_has_text()) {
    clear_source_info();
    set_has_text();
    source_info_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_info_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_SourceInfo::set_text(std::string&& value) {
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.SourceInfo.text)
  if (!_internal_has_text()) {
    clear_source_info();
    set_has_text();
    source_info_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_info_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.SourceInfo.text)
}
inline void FirrtlPB_SourceInfo::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_text()) {
    clear_source_info();
    set_has_text();
    source_info_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_info_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.SourceInfo.text)
}
inline void FirrtlPB_SourceInfo::set_text(const char* value, size_t size) {
  if (!_internal_has_text()) {
    clear_source_info();
    set_has_text();
    source_info_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  source_info_.text_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.SourceInfo.text)
}
inline std::string* FirrtlPB_SourceInfo::_internal_mutable_text() {
  if (!_internal_has_text()) {
    clear_source_info();
    set_has_text();
    source_info_.text_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return source_info_.text_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_SourceInfo::release_text() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.SourceInfo.text)
  if (_internal_has_text()) {
    clear_has_source_info();
    return source_info_.text_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void FirrtlPB_SourceInfo::set_allocated_text(std::string* text) {
  if (has_source_info()) {
    clear_source_info();
  }
  if (text != nullptr) {
    set_has_text();
    source_info_.text_.UnsafeSetDefault(text);
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.SourceInfo.text)
}

inline bool FirrtlPB_SourceInfo::has_source_info() const {
  return source_info_case() != SOURCE_INFO_NOT_SET;
}
inline void FirrtlPB_SourceInfo::clear_has_source_info() {
  _oneof_case_[0] = SOURCE_INFO_NOT_SET;
}
inline FirrtlPB_SourceInfo::SourceInfoCase FirrtlPB_SourceInfo::source_info_case() const {
  return FirrtlPB_SourceInfo::SourceInfoCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FirrtlPB_BigInt

// bytes value = 1;
inline void FirrtlPB_BigInt::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_BigInt::value() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.BigInt.value)
  return _internal_value();
}
inline void FirrtlPB_BigInt::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.BigInt.value)
}
inline std::string* FirrtlPB_BigInt::mutable_value() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.BigInt.value)
  return _internal_mutable_value();
}
inline const std::string& FirrtlPB_BigInt::_internal_value() const {
  return value_.GetNoArena();
}
inline void FirrtlPB_BigInt::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_BigInt::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.BigInt.value)
}
inline void FirrtlPB_BigInt::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.BigInt.value)
}
inline void FirrtlPB_BigInt::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.BigInt.value)
}
inline std::string* FirrtlPB_BigInt::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_BigInt::release_value() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.BigInt.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_BigInt::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.BigInt.value)
}

// -------------------------------------------------------------------

// FirrtlPB_Top

// string name = 1;
inline void FirrtlPB_Top::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Top::name() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Top.name)
  return _internal_name();
}
inline void FirrtlPB_Top::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Top.name)
}
inline std::string* FirrtlPB_Top::mutable_name() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Top.name)
  return _internal_mutable_name();
}
inline const std::string& FirrtlPB_Top::_internal_name() const {
  return name_.GetNoArena();
}
inline void FirrtlPB_Top::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Top::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Top.name)
}
inline void FirrtlPB_Top::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Top.name)
}
inline void FirrtlPB_Top::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Top.name)
}
inline std::string* FirrtlPB_Top::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Top::release_name() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Top.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Top::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Top.name)
}

// -------------------------------------------------------------------

// FirrtlPB_Circuit

// repeated .firrtl.FirrtlPB.Module module = 1;
inline int FirrtlPB_Circuit::_internal_module_size() const {
  return module_.size();
}
inline int FirrtlPB_Circuit::module_size() const {
  return _internal_module_size();
}
inline void FirrtlPB_Circuit::clear_module() {
  module_.Clear();
}
inline ::firrtl::FirrtlPB_Module* FirrtlPB_Circuit::mutable_module(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Circuit.module)
  return module_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Module >*
FirrtlPB_Circuit::mutable_module() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Circuit.module)
  return &module_;
}
inline const ::firrtl::FirrtlPB_Module& FirrtlPB_Circuit::_internal_module(int index) const {
  return module_.Get(index);
}
inline const ::firrtl::FirrtlPB_Module& FirrtlPB_Circuit::module(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Circuit.module)
  return _internal_module(index);
}
inline ::firrtl::FirrtlPB_Module* FirrtlPB_Circuit::_internal_add_module() {
  return module_.Add();
}
inline ::firrtl::FirrtlPB_Module* FirrtlPB_Circuit::add_module() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Circuit.module)
  return _internal_add_module();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Module >&
FirrtlPB_Circuit::module() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Circuit.module)
  return module_;
}

// repeated .firrtl.FirrtlPB.Top top = 2;
inline int FirrtlPB_Circuit::_internal_top_size() const {
  return top_.size();
}
inline int FirrtlPB_Circuit::top_size() const {
  return _internal_top_size();
}
inline void FirrtlPB_Circuit::clear_top() {
  top_.Clear();
}
inline ::firrtl::FirrtlPB_Top* FirrtlPB_Circuit::mutable_top(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Circuit.top)
  return top_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Top >*
FirrtlPB_Circuit::mutable_top() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Circuit.top)
  return &top_;
}
inline const ::firrtl::FirrtlPB_Top& FirrtlPB_Circuit::_internal_top(int index) const {
  return top_.Get(index);
}
inline const ::firrtl::FirrtlPB_Top& FirrtlPB_Circuit::top(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Circuit.top)
  return _internal_top(index);
}
inline ::firrtl::FirrtlPB_Top* FirrtlPB_Circuit::_internal_add_top() {
  return top_.Add();
}
inline ::firrtl::FirrtlPB_Top* FirrtlPB_Circuit::add_top() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Circuit.top)
  return _internal_add_top();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Top >&
FirrtlPB_Circuit::top() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Circuit.top)
  return top_;
}

// -------------------------------------------------------------------

// FirrtlPB_Module_ExternalModule_Parameter

// string id = 1;
inline void FirrtlPB_Module_ExternalModule_Parameter::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Module_ExternalModule_Parameter::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.ExternalModule.Parameter.id)
  return _internal_id();
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Module.ExternalModule.Parameter.id)
}
inline std::string* FirrtlPB_Module_ExternalModule_Parameter::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.ExternalModule.Parameter.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Module_ExternalModule_Parameter::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Module_ExternalModule_Parameter::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Module.ExternalModule.Parameter.id)
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Module.ExternalModule.Parameter.id)
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Module.ExternalModule.Parameter.id)
}
inline std::string* FirrtlPB_Module_ExternalModule_Parameter::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Module_ExternalModule_Parameter::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Module.ExternalModule.Parameter.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Module.ExternalModule.Parameter.id)
}

// .firrtl.FirrtlPB.BigInt integer = 2;
inline bool FirrtlPB_Module_ExternalModule_Parameter::_internal_has_integer() const {
  return value_case() == kInteger;
}
inline bool FirrtlPB_Module_ExternalModule_Parameter::has_integer() const {
  return _internal_has_integer();
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_has_integer() {
  _oneof_case_[0] = kInteger;
}
inline void FirrtlPB_Module_ExternalModule_Parameter::clear_integer() {
  if (_internal_has_integer()) {
    delete value_.integer_;
    clear_has_value();
  }
}
inline ::firrtl::FirrtlPB_BigInt* FirrtlPB_Module_ExternalModule_Parameter::release_integer() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Module.ExternalModule.Parameter.integer)
  if (_internal_has_integer()) {
    clear_has_value();
      ::firrtl::FirrtlPB_BigInt* temp = value_.integer_;
    value_.integer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_BigInt& FirrtlPB_Module_ExternalModule_Parameter::_internal_integer() const {
  return _internal_has_integer()
      ? *value_.integer_
      : *reinterpret_cast< ::firrtl::FirrtlPB_BigInt*>(&::firrtl::_FirrtlPB_BigInt_default_instance_);
}
inline const ::firrtl::FirrtlPB_BigInt& FirrtlPB_Module_ExternalModule_Parameter::integer() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.ExternalModule.Parameter.integer)
  return _internal_integer();
}
inline ::firrtl::FirrtlPB_BigInt* FirrtlPB_Module_ExternalModule_Parameter::_internal_mutable_integer() {
  if (!_internal_has_integer()) {
    clear_value();
    set_has_integer();
    value_.integer_ = CreateMaybeMessage< ::firrtl::FirrtlPB_BigInt >(
        GetArenaNoVirtual());
  }
  return value_.integer_;
}
inline ::firrtl::FirrtlPB_BigInt* FirrtlPB_Module_ExternalModule_Parameter::mutable_integer() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.ExternalModule.Parameter.integer)
  return _internal_mutable_integer();
}

// double double = 3;
inline bool FirrtlPB_Module_ExternalModule_Parameter::_internal_has_double_() const {
  return value_case() == kDouble;
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void FirrtlPB_Module_ExternalModule_Parameter::clear_double_() {
  if (_internal_has_double_()) {
    value_.double__ = 0;
    clear_has_value();
  }
}
inline double FirrtlPB_Module_ExternalModule_Parameter::_internal_double_() const {
  if (_internal_has_double_()) {
    return value_.double__;
  }
  return 0;
}
inline void FirrtlPB_Module_ExternalModule_Parameter::_internal_set_double_(double value) {
  if (!_internal_has_double_()) {
    clear_value();
    set_has_double_();
  }
  value_.double__ = value;
}
inline double FirrtlPB_Module_ExternalModule_Parameter::double_() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.ExternalModule.Parameter.double)
  return _internal_double_();
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_double_(double value) {
  _internal_set_double_(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Module.ExternalModule.Parameter.double)
}

// string string = 4;
inline bool FirrtlPB_Module_ExternalModule_Parameter::_internal_has_string() const {
  return value_case() == kString;
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void FirrtlPB_Module_ExternalModule_Parameter::clear_string() {
  if (_internal_has_string()) {
    value_.string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& FirrtlPB_Module_ExternalModule_Parameter::string() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.ExternalModule.Parameter.string)
  return _internal_string();
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_string(const std::string& value) {
  _internal_set_string(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Module.ExternalModule.Parameter.string)
}
inline std::string* FirrtlPB_Module_ExternalModule_Parameter::mutable_string() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.ExternalModule.Parameter.string)
  return _internal_mutable_string();
}
inline const std::string& FirrtlPB_Module_ExternalModule_Parameter::_internal_string() const {
  if (_internal_has_string()) {
    return value_.string_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FirrtlPB_Module_ExternalModule_Parameter::_internal_set_string(const std::string& value) {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Module.ExternalModule.Parameter.string)
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Module.ExternalModule.Parameter.string)
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Module.ExternalModule.Parameter.string)
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_string(const char* value, size_t size) {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Module.ExternalModule.Parameter.string)
}
inline std::string* FirrtlPB_Module_ExternalModule_Parameter::_internal_mutable_string() {
  if (!_internal_has_string()) {
    clear_value();
    set_has_string();
    value_.string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Module_ExternalModule_Parameter::release_string() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Module.ExternalModule.Parameter.string)
  if (_internal_has_string()) {
    clear_has_value();
    return value_.string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_allocated_string(std::string* string) {
  if (has_value()) {
    clear_value();
  }
  if (string != nullptr) {
    set_has_string();
    value_.string_.UnsafeSetDefault(string);
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Module.ExternalModule.Parameter.string)
}

// string raw_string = 5;
inline bool FirrtlPB_Module_ExternalModule_Parameter::_internal_has_raw_string() const {
  return value_case() == kRawString;
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_has_raw_string() {
  _oneof_case_[0] = kRawString;
}
inline void FirrtlPB_Module_ExternalModule_Parameter::clear_raw_string() {
  if (_internal_has_raw_string()) {
    value_.raw_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const std::string& FirrtlPB_Module_ExternalModule_Parameter::raw_string() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.ExternalModule.Parameter.raw_string)
  return _internal_raw_string();
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_raw_string(const std::string& value) {
  _internal_set_raw_string(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Module.ExternalModule.Parameter.raw_string)
}
inline std::string* FirrtlPB_Module_ExternalModule_Parameter::mutable_raw_string() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.ExternalModule.Parameter.raw_string)
  return _internal_mutable_raw_string();
}
inline const std::string& FirrtlPB_Module_ExternalModule_Parameter::_internal_raw_string() const {
  if (_internal_has_raw_string()) {
    return value_.raw_string_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void FirrtlPB_Module_ExternalModule_Parameter::_internal_set_raw_string(const std::string& value) {
  if (!_internal_has_raw_string()) {
    clear_value();
    set_has_raw_string();
    value_.raw_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.raw_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_raw_string(std::string&& value) {
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Module.ExternalModule.Parameter.raw_string)
  if (!_internal_has_raw_string()) {
    clear_value();
    set_has_raw_string();
    value_.raw_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.raw_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Module.ExternalModule.Parameter.raw_string)
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_raw_string(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_raw_string()) {
    clear_value();
    set_has_raw_string();
    value_.raw_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.raw_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Module.ExternalModule.Parameter.raw_string)
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_raw_string(const char* value, size_t size) {
  if (!_internal_has_raw_string()) {
    clear_value();
    set_has_raw_string();
    value_.raw_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  value_.raw_string_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Module.ExternalModule.Parameter.raw_string)
}
inline std::string* FirrtlPB_Module_ExternalModule_Parameter::_internal_mutable_raw_string() {
  if (!_internal_has_raw_string()) {
    clear_value();
    set_has_raw_string();
    value_.raw_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return value_.raw_string_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Module_ExternalModule_Parameter::release_raw_string() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Module.ExternalModule.Parameter.raw_string)
  if (_internal_has_raw_string()) {
    clear_has_value();
    return value_.raw_string_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void FirrtlPB_Module_ExternalModule_Parameter::set_allocated_raw_string(std::string* raw_string) {
  if (has_value()) {
    clear_value();
  }
  if (raw_string != nullptr) {
    set_has_raw_string();
    value_.raw_string_.UnsafeSetDefault(raw_string);
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Module.ExternalModule.Parameter.raw_string)
}

inline bool FirrtlPB_Module_ExternalModule_Parameter::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void FirrtlPB_Module_ExternalModule_Parameter::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline FirrtlPB_Module_ExternalModule_Parameter::ValueCase FirrtlPB_Module_ExternalModule_Parameter::value_case() const {
  return FirrtlPB_Module_ExternalModule_Parameter::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FirrtlPB_Module_ExternalModule

// string id = 1;
inline void FirrtlPB_Module_ExternalModule::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Module_ExternalModule::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.ExternalModule.id)
  return _internal_id();
}
inline void FirrtlPB_Module_ExternalModule::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Module.ExternalModule.id)
}
inline std::string* FirrtlPB_Module_ExternalModule::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.ExternalModule.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Module_ExternalModule::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Module_ExternalModule::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Module_ExternalModule::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Module.ExternalModule.id)
}
inline void FirrtlPB_Module_ExternalModule::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Module.ExternalModule.id)
}
inline void FirrtlPB_Module_ExternalModule::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Module.ExternalModule.id)
}
inline std::string* FirrtlPB_Module_ExternalModule::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Module_ExternalModule::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Module.ExternalModule.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Module_ExternalModule::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Module.ExternalModule.id)
}

// repeated .firrtl.FirrtlPB.Port port = 2;
inline int FirrtlPB_Module_ExternalModule::_internal_port_size() const {
  return port_.size();
}
inline int FirrtlPB_Module_ExternalModule::port_size() const {
  return _internal_port_size();
}
inline void FirrtlPB_Module_ExternalModule::clear_port() {
  port_.Clear();
}
inline ::firrtl::FirrtlPB_Port* FirrtlPB_Module_ExternalModule::mutable_port(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.ExternalModule.port)
  return port_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Port >*
FirrtlPB_Module_ExternalModule::mutable_port() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Module.ExternalModule.port)
  return &port_;
}
inline const ::firrtl::FirrtlPB_Port& FirrtlPB_Module_ExternalModule::_internal_port(int index) const {
  return port_.Get(index);
}
inline const ::firrtl::FirrtlPB_Port& FirrtlPB_Module_ExternalModule::port(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.ExternalModule.port)
  return _internal_port(index);
}
inline ::firrtl::FirrtlPB_Port* FirrtlPB_Module_ExternalModule::_internal_add_port() {
  return port_.Add();
}
inline ::firrtl::FirrtlPB_Port* FirrtlPB_Module_ExternalModule::add_port() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Module.ExternalModule.port)
  return _internal_add_port();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Port >&
FirrtlPB_Module_ExternalModule::port() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Module.ExternalModule.port)
  return port_;
}

// string defined_name = 3;
inline void FirrtlPB_Module_ExternalModule::clear_defined_name() {
  defined_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Module_ExternalModule::defined_name() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.ExternalModule.defined_name)
  return _internal_defined_name();
}
inline void FirrtlPB_Module_ExternalModule::set_defined_name(const std::string& value) {
  _internal_set_defined_name(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Module.ExternalModule.defined_name)
}
inline std::string* FirrtlPB_Module_ExternalModule::mutable_defined_name() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.ExternalModule.defined_name)
  return _internal_mutable_defined_name();
}
inline const std::string& FirrtlPB_Module_ExternalModule::_internal_defined_name() const {
  return defined_name_.GetNoArena();
}
inline void FirrtlPB_Module_ExternalModule::_internal_set_defined_name(const std::string& value) {
  
  defined_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Module_ExternalModule::set_defined_name(std::string&& value) {
  
  defined_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Module.ExternalModule.defined_name)
}
inline void FirrtlPB_Module_ExternalModule::set_defined_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  defined_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Module.ExternalModule.defined_name)
}
inline void FirrtlPB_Module_ExternalModule::set_defined_name(const char* value, size_t size) {
  
  defined_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Module.ExternalModule.defined_name)
}
inline std::string* FirrtlPB_Module_ExternalModule::_internal_mutable_defined_name() {
  
  return defined_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Module_ExternalModule::release_defined_name() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Module.ExternalModule.defined_name)
  
  return defined_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Module_ExternalModule::set_allocated_defined_name(std::string* defined_name) {
  if (defined_name != nullptr) {
    
  } else {
    
  }
  defined_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), defined_name);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Module.ExternalModule.defined_name)
}

// repeated .firrtl.FirrtlPB.Module.ExternalModule.Parameter parameter = 4;
inline int FirrtlPB_Module_ExternalModule::_internal_parameter_size() const {
  return parameter_.size();
}
inline int FirrtlPB_Module_ExternalModule::parameter_size() const {
  return _internal_parameter_size();
}
inline void FirrtlPB_Module_ExternalModule::clear_parameter() {
  parameter_.Clear();
}
inline ::firrtl::FirrtlPB_Module_ExternalModule_Parameter* FirrtlPB_Module_ExternalModule::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.ExternalModule.parameter)
  return parameter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Module_ExternalModule_Parameter >*
FirrtlPB_Module_ExternalModule::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Module.ExternalModule.parameter)
  return &parameter_;
}
inline const ::firrtl::FirrtlPB_Module_ExternalModule_Parameter& FirrtlPB_Module_ExternalModule::_internal_parameter(int index) const {
  return parameter_.Get(index);
}
inline const ::firrtl::FirrtlPB_Module_ExternalModule_Parameter& FirrtlPB_Module_ExternalModule::parameter(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.ExternalModule.parameter)
  return _internal_parameter(index);
}
inline ::firrtl::FirrtlPB_Module_ExternalModule_Parameter* FirrtlPB_Module_ExternalModule::_internal_add_parameter() {
  return parameter_.Add();
}
inline ::firrtl::FirrtlPB_Module_ExternalModule_Parameter* FirrtlPB_Module_ExternalModule::add_parameter() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Module.ExternalModule.parameter)
  return _internal_add_parameter();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Module_ExternalModule_Parameter >&
FirrtlPB_Module_ExternalModule::parameter() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Module.ExternalModule.parameter)
  return parameter_;
}

// -------------------------------------------------------------------

// FirrtlPB_Module_UserModule

// string id = 1;
inline void FirrtlPB_Module_UserModule::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Module_UserModule::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.UserModule.id)
  return _internal_id();
}
inline void FirrtlPB_Module_UserModule::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Module.UserModule.id)
}
inline std::string* FirrtlPB_Module_UserModule::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.UserModule.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Module_UserModule::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Module_UserModule::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Module_UserModule::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Module.UserModule.id)
}
inline void FirrtlPB_Module_UserModule::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Module.UserModule.id)
}
inline void FirrtlPB_Module_UserModule::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Module.UserModule.id)
}
inline std::string* FirrtlPB_Module_UserModule::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Module_UserModule::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Module.UserModule.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Module_UserModule::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Module.UserModule.id)
}

// repeated .firrtl.FirrtlPB.Port port = 2;
inline int FirrtlPB_Module_UserModule::_internal_port_size() const {
  return port_.size();
}
inline int FirrtlPB_Module_UserModule::port_size() const {
  return _internal_port_size();
}
inline void FirrtlPB_Module_UserModule::clear_port() {
  port_.Clear();
}
inline ::firrtl::FirrtlPB_Port* FirrtlPB_Module_UserModule::mutable_port(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.UserModule.port)
  return port_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Port >*
FirrtlPB_Module_UserModule::mutable_port() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Module.UserModule.port)
  return &port_;
}
inline const ::firrtl::FirrtlPB_Port& FirrtlPB_Module_UserModule::_internal_port(int index) const {
  return port_.Get(index);
}
inline const ::firrtl::FirrtlPB_Port& FirrtlPB_Module_UserModule::port(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.UserModule.port)
  return _internal_port(index);
}
inline ::firrtl::FirrtlPB_Port* FirrtlPB_Module_UserModule::_internal_add_port() {
  return port_.Add();
}
inline ::firrtl::FirrtlPB_Port* FirrtlPB_Module_UserModule::add_port() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Module.UserModule.port)
  return _internal_add_port();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Port >&
FirrtlPB_Module_UserModule::port() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Module.UserModule.port)
  return port_;
}

// repeated .firrtl.FirrtlPB.Statement statement = 3;
inline int FirrtlPB_Module_UserModule::_internal_statement_size() const {
  return statement_.size();
}
inline int FirrtlPB_Module_UserModule::statement_size() const {
  return _internal_statement_size();
}
inline void FirrtlPB_Module_UserModule::clear_statement() {
  statement_.Clear();
}
inline ::firrtl::FirrtlPB_Statement* FirrtlPB_Module_UserModule::mutable_statement(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.UserModule.statement)
  return statement_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement >*
FirrtlPB_Module_UserModule::mutable_statement() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Module.UserModule.statement)
  return &statement_;
}
inline const ::firrtl::FirrtlPB_Statement& FirrtlPB_Module_UserModule::_internal_statement(int index) const {
  return statement_.Get(index);
}
inline const ::firrtl::FirrtlPB_Statement& FirrtlPB_Module_UserModule::statement(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.UserModule.statement)
  return _internal_statement(index);
}
inline ::firrtl::FirrtlPB_Statement* FirrtlPB_Module_UserModule::_internal_add_statement() {
  return statement_.Add();
}
inline ::firrtl::FirrtlPB_Statement* FirrtlPB_Module_UserModule::add_statement() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Module.UserModule.statement)
  return _internal_add_statement();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement >&
FirrtlPB_Module_UserModule::statement() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Module.UserModule.statement)
  return statement_;
}

// -------------------------------------------------------------------

// FirrtlPB_Module

// .firrtl.FirrtlPB.Module.ExternalModule external_module = 1;
inline bool FirrtlPB_Module::_internal_has_external_module() const {
  return module_case() == kExternalModule;
}
inline bool FirrtlPB_Module::has_external_module() const {
  return _internal_has_external_module();
}
inline void FirrtlPB_Module::set_has_external_module() {
  _oneof_case_[0] = kExternalModule;
}
inline void FirrtlPB_Module::clear_external_module() {
  if (_internal_has_external_module()) {
    delete module_.external_module_;
    clear_has_module();
  }
}
inline ::firrtl::FirrtlPB_Module_ExternalModule* FirrtlPB_Module::release_external_module() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Module.external_module)
  if (_internal_has_external_module()) {
    clear_has_module();
      ::firrtl::FirrtlPB_Module_ExternalModule* temp = module_.external_module_;
    module_.external_module_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Module_ExternalModule& FirrtlPB_Module::_internal_external_module() const {
  return _internal_has_external_module()
      ? *module_.external_module_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Module_ExternalModule*>(&::firrtl::_FirrtlPB_Module_ExternalModule_default_instance_);
}
inline const ::firrtl::FirrtlPB_Module_ExternalModule& FirrtlPB_Module::external_module() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.external_module)
  return _internal_external_module();
}
inline ::firrtl::FirrtlPB_Module_ExternalModule* FirrtlPB_Module::_internal_mutable_external_module() {
  if (!_internal_has_external_module()) {
    clear_module();
    set_has_external_module();
    module_.external_module_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Module_ExternalModule >(
        GetArenaNoVirtual());
  }
  return module_.external_module_;
}
inline ::firrtl::FirrtlPB_Module_ExternalModule* FirrtlPB_Module::mutable_external_module() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.external_module)
  return _internal_mutable_external_module();
}

// .firrtl.FirrtlPB.Module.UserModule user_module = 2;
inline bool FirrtlPB_Module::_internal_has_user_module() const {
  return module_case() == kUserModule;
}
inline bool FirrtlPB_Module::has_user_module() const {
  return _internal_has_user_module();
}
inline void FirrtlPB_Module::set_has_user_module() {
  _oneof_case_[0] = kUserModule;
}
inline void FirrtlPB_Module::clear_user_module() {
  if (_internal_has_user_module()) {
    delete module_.user_module_;
    clear_has_module();
  }
}
inline ::firrtl::FirrtlPB_Module_UserModule* FirrtlPB_Module::release_user_module() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Module.user_module)
  if (_internal_has_user_module()) {
    clear_has_module();
      ::firrtl::FirrtlPB_Module_UserModule* temp = module_.user_module_;
    module_.user_module_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Module_UserModule& FirrtlPB_Module::_internal_user_module() const {
  return _internal_has_user_module()
      ? *module_.user_module_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Module_UserModule*>(&::firrtl::_FirrtlPB_Module_UserModule_default_instance_);
}
inline const ::firrtl::FirrtlPB_Module_UserModule& FirrtlPB_Module::user_module() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Module.user_module)
  return _internal_user_module();
}
inline ::firrtl::FirrtlPB_Module_UserModule* FirrtlPB_Module::_internal_mutable_user_module() {
  if (!_internal_has_user_module()) {
    clear_module();
    set_has_user_module();
    module_.user_module_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Module_UserModule >(
        GetArenaNoVirtual());
  }
  return module_.user_module_;
}
inline ::firrtl::FirrtlPB_Module_UserModule* FirrtlPB_Module::mutable_user_module() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Module.user_module)
  return _internal_mutable_user_module();
}

inline bool FirrtlPB_Module::has_module() const {
  return module_case() != MODULE_NOT_SET;
}
inline void FirrtlPB_Module::clear_has_module() {
  _oneof_case_[0] = MODULE_NOT_SET;
}
inline FirrtlPB_Module::ModuleCase FirrtlPB_Module::module_case() const {
  return FirrtlPB_Module::ModuleCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FirrtlPB_Statement_Wire

// string id = 1;
inline void FirrtlPB_Statement_Wire::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Statement_Wire::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Wire.id)
  return _internal_id();
}
inline void FirrtlPB_Statement_Wire::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Wire.id)
}
inline std::string* FirrtlPB_Statement_Wire::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Wire.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Statement_Wire::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Statement_Wire::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Statement_Wire::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Statement.Wire.id)
}
inline void FirrtlPB_Statement_Wire::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.Wire.id)
}
inline void FirrtlPB_Statement_Wire::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.Wire.id)
}
inline std::string* FirrtlPB_Statement_Wire::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Statement_Wire::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Wire.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Statement_Wire::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Wire.id)
}

// .firrtl.FirrtlPB.Type type = 2;
inline bool FirrtlPB_Statement_Wire::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool FirrtlPB_Statement_Wire::has_type() const {
  return _internal_has_type();
}
inline void FirrtlPB_Statement_Wire::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Statement_Wire::_internal_type() const {
  const ::firrtl::FirrtlPB_Type* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Type*>(
      &::firrtl::_FirrtlPB_Type_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Statement_Wire::type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Wire.type)
  return _internal_type();
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Statement_Wire::release_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Wire.type)
  
  ::firrtl::FirrtlPB_Type* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Statement_Wire::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Type>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Statement_Wire::mutable_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Wire.type)
  return _internal_mutable_type();
}
inline void FirrtlPB_Statement_Wire::set_allocated_type(::firrtl::FirrtlPB_Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Wire.type)
}

// -------------------------------------------------------------------

// FirrtlPB_Statement_Register

// string id = 1;
inline void FirrtlPB_Statement_Register::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Statement_Register::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Register.id)
  return _internal_id();
}
inline void FirrtlPB_Statement_Register::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Register.id)
}
inline std::string* FirrtlPB_Statement_Register::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Register.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Statement_Register::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Statement_Register::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Statement_Register::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Statement.Register.id)
}
inline void FirrtlPB_Statement_Register::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.Register.id)
}
inline void FirrtlPB_Statement_Register::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.Register.id)
}
inline std::string* FirrtlPB_Statement_Register::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Statement_Register::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Register.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Statement_Register::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Register.id)
}

// .firrtl.FirrtlPB.Type type = 2;
inline bool FirrtlPB_Statement_Register::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool FirrtlPB_Statement_Register::has_type() const {
  return _internal_has_type();
}
inline void FirrtlPB_Statement_Register::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Statement_Register::_internal_type() const {
  const ::firrtl::FirrtlPB_Type* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Type*>(
      &::firrtl::_FirrtlPB_Type_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Statement_Register::type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Register.type)
  return _internal_type();
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Statement_Register::release_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Register.type)
  
  ::firrtl::FirrtlPB_Type* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Statement_Register::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Type>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Statement_Register::mutable_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Register.type)
  return _internal_mutable_type();
}
inline void FirrtlPB_Statement_Register::set_allocated_type(::firrtl::FirrtlPB_Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Register.type)
}

// .firrtl.FirrtlPB.Expression clock = 3;
inline bool FirrtlPB_Statement_Register::_internal_has_clock() const {
  return this != internal_default_instance() && clock_ != nullptr;
}
inline bool FirrtlPB_Statement_Register::has_clock() const {
  return _internal_has_clock();
}
inline void FirrtlPB_Statement_Register::clear_clock() {
  if (GetArenaNoVirtual() == nullptr && clock_ != nullptr) {
    delete clock_;
  }
  clock_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Register::_internal_clock() const {
  const ::firrtl::FirrtlPB_Expression* p = clock_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Register::clock() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Register.clock)
  return _internal_clock();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Register::release_clock() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Register.clock)
  
  ::firrtl::FirrtlPB_Expression* temp = clock_;
  clock_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Register::_internal_mutable_clock() {
  
  if (clock_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    clock_ = p;
  }
  return clock_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Register::mutable_clock() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Register.clock)
  return _internal_mutable_clock();
}
inline void FirrtlPB_Statement_Register::set_allocated_clock(::firrtl::FirrtlPB_Expression* clock) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clock_;
  }
  if (clock) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clock = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock, submessage_arena);
    }
    
  } else {
    
  }
  clock_ = clock;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Register.clock)
}

// .firrtl.FirrtlPB.Expression reset = 4;
inline bool FirrtlPB_Statement_Register::_internal_has_reset() const {
  return this != internal_default_instance() && reset_ != nullptr;
}
inline bool FirrtlPB_Statement_Register::has_reset() const {
  return _internal_has_reset();
}
inline void FirrtlPB_Statement_Register::clear_reset() {
  if (GetArenaNoVirtual() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Register::_internal_reset() const {
  const ::firrtl::FirrtlPB_Expression* p = reset_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Register::reset() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Register.reset)
  return _internal_reset();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Register::release_reset() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Register.reset)
  
  ::firrtl::FirrtlPB_Expression* temp = reset_;
  reset_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Register::_internal_mutable_reset() {
  
  if (reset_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    reset_ = p;
  }
  return reset_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Register::mutable_reset() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Register.reset)
  return _internal_mutable_reset();
}
inline void FirrtlPB_Statement_Register::set_allocated_reset(::firrtl::FirrtlPB_Expression* reset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reset_;
  }
  if (reset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset, submessage_arena);
    }
    
  } else {
    
  }
  reset_ = reset;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Register.reset)
}

// .firrtl.FirrtlPB.Expression init = 5;
inline bool FirrtlPB_Statement_Register::_internal_has_init() const {
  return this != internal_default_instance() && init_ != nullptr;
}
inline bool FirrtlPB_Statement_Register::has_init() const {
  return _internal_has_init();
}
inline void FirrtlPB_Statement_Register::clear_init() {
  if (GetArenaNoVirtual() == nullptr && init_ != nullptr) {
    delete init_;
  }
  init_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Register::_internal_init() const {
  const ::firrtl::FirrtlPB_Expression* p = init_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Register::init() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Register.init)
  return _internal_init();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Register::release_init() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Register.init)
  
  ::firrtl::FirrtlPB_Expression* temp = init_;
  init_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Register::_internal_mutable_init() {
  
  if (init_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    init_ = p;
  }
  return init_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Register::mutable_init() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Register.init)
  return _internal_mutable_init();
}
inline void FirrtlPB_Statement_Register::set_allocated_init(::firrtl::FirrtlPB_Expression* init) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete init_;
  }
  if (init) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      init = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, init, submessage_arena);
    }
    
  } else {
    
  }
  init_ = init;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Register.init)
}

// -------------------------------------------------------------------

// FirrtlPB_Statement_Memory

// string id = 1;
inline void FirrtlPB_Statement_Memory::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Statement_Memory::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Memory.id)
  return _internal_id();
}
inline void FirrtlPB_Statement_Memory::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Memory.id)
}
inline std::string* FirrtlPB_Statement_Memory::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Memory.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Statement_Memory::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Statement_Memory::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Statement_Memory::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Statement.Memory.id)
}
inline void FirrtlPB_Statement_Memory::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.Memory.id)
}
inline void FirrtlPB_Statement_Memory::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.Memory.id)
}
inline std::string* FirrtlPB_Statement_Memory::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Statement_Memory::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Memory.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Statement_Memory::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Memory.id)
}

// .firrtl.FirrtlPB.Type type = 2;
inline bool FirrtlPB_Statement_Memory::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool FirrtlPB_Statement_Memory::has_type() const {
  return _internal_has_type();
}
inline void FirrtlPB_Statement_Memory::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Statement_Memory::_internal_type() const {
  const ::firrtl::FirrtlPB_Type* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Type*>(
      &::firrtl::_FirrtlPB_Type_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Statement_Memory::type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Memory.type)
  return _internal_type();
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Statement_Memory::release_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Memory.type)
  
  ::firrtl::FirrtlPB_Type* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Statement_Memory::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Type>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Statement_Memory::mutable_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Memory.type)
  return _internal_mutable_type();
}
inline void FirrtlPB_Statement_Memory::set_allocated_type(::firrtl::FirrtlPB_Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Memory.type)
}

// uint32 uint_depth = 3;
inline bool FirrtlPB_Statement_Memory::_internal_has_uint_depth() const {
  return depth_case() == kUintDepth;
}
inline void FirrtlPB_Statement_Memory::set_has_uint_depth() {
  _oneof_case_[0] = kUintDepth;
}
inline void FirrtlPB_Statement_Memory::clear_uint_depth() {
  if (_internal_has_uint_depth()) {
    depth_.uint_depth_ = 0u;
    clear_has_depth();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_Statement_Memory::_internal_uint_depth() const {
  if (_internal_has_uint_depth()) {
    return depth_.uint_depth_;
  }
  return 0u;
}
inline void FirrtlPB_Statement_Memory::_internal_set_uint_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  if (!_internal_has_uint_depth()) {
    clear_depth();
    set_has_uint_depth();
  }
  depth_.uint_depth_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_Statement_Memory::uint_depth() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Memory.uint_depth)
  return _internal_uint_depth();
}
inline void FirrtlPB_Statement_Memory::set_uint_depth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_uint_depth(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Memory.uint_depth)
}

// .firrtl.FirrtlPB.BigInt bigint_depth = 9;
inline bool FirrtlPB_Statement_Memory::_internal_has_bigint_depth() const {
  return depth_case() == kBigintDepth;
}
inline bool FirrtlPB_Statement_Memory::has_bigint_depth() const {
  return _internal_has_bigint_depth();
}
inline void FirrtlPB_Statement_Memory::set_has_bigint_depth() {
  _oneof_case_[0] = kBigintDepth;
}
inline void FirrtlPB_Statement_Memory::clear_bigint_depth() {
  if (_internal_has_bigint_depth()) {
    delete depth_.bigint_depth_;
    clear_has_depth();
  }
}
inline ::firrtl::FirrtlPB_BigInt* FirrtlPB_Statement_Memory::release_bigint_depth() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Memory.bigint_depth)
  if (_internal_has_bigint_depth()) {
    clear_has_depth();
      ::firrtl::FirrtlPB_BigInt* temp = depth_.bigint_depth_;
    depth_.bigint_depth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_BigInt& FirrtlPB_Statement_Memory::_internal_bigint_depth() const {
  return _internal_has_bigint_depth()
      ? *depth_.bigint_depth_
      : *reinterpret_cast< ::firrtl::FirrtlPB_BigInt*>(&::firrtl::_FirrtlPB_BigInt_default_instance_);
}
inline const ::firrtl::FirrtlPB_BigInt& FirrtlPB_Statement_Memory::bigint_depth() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Memory.bigint_depth)
  return _internal_bigint_depth();
}
inline ::firrtl::FirrtlPB_BigInt* FirrtlPB_Statement_Memory::_internal_mutable_bigint_depth() {
  if (!_internal_has_bigint_depth()) {
    clear_depth();
    set_has_bigint_depth();
    depth_.bigint_depth_ = CreateMaybeMessage< ::firrtl::FirrtlPB_BigInt >(
        GetArenaNoVirtual());
  }
  return depth_.bigint_depth_;
}
inline ::firrtl::FirrtlPB_BigInt* FirrtlPB_Statement_Memory::mutable_bigint_depth() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Memory.bigint_depth)
  return _internal_mutable_bigint_depth();
}

// uint32 write_latency = 4;
inline void FirrtlPB_Statement_Memory::clear_write_latency() {
  write_latency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_Statement_Memory::_internal_write_latency() const {
  return write_latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_Statement_Memory::write_latency() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Memory.write_latency)
  return _internal_write_latency();
}
inline void FirrtlPB_Statement_Memory::_internal_set_write_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  write_latency_ = value;
}
inline void FirrtlPB_Statement_Memory::set_write_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_write_latency(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Memory.write_latency)
}

// uint32 read_latency = 5;
inline void FirrtlPB_Statement_Memory::clear_read_latency() {
  read_latency_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_Statement_Memory::_internal_read_latency() const {
  return read_latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_Statement_Memory::read_latency() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Memory.read_latency)
  return _internal_read_latency();
}
inline void FirrtlPB_Statement_Memory::_internal_set_read_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  read_latency_ = value;
}
inline void FirrtlPB_Statement_Memory::set_read_latency(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_read_latency(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Memory.read_latency)
}

// repeated string reader_id = 6;
inline int FirrtlPB_Statement_Memory::_internal_reader_id_size() const {
  return reader_id_.size();
}
inline int FirrtlPB_Statement_Memory::reader_id_size() const {
  return _internal_reader_id_size();
}
inline void FirrtlPB_Statement_Memory::clear_reader_id() {
  reader_id_.Clear();
}
inline std::string* FirrtlPB_Statement_Memory::add_reader_id() {
  // @@protoc_insertion_point(field_add_mutable:firrtl.FirrtlPB.Statement.Memory.reader_id)
  return _internal_add_reader_id();
}
inline const std::string& FirrtlPB_Statement_Memory::_internal_reader_id(int index) const {
  return reader_id_.Get(index);
}
inline const std::string& FirrtlPB_Statement_Memory::reader_id(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Memory.reader_id)
  return _internal_reader_id(index);
}
inline std::string* FirrtlPB_Statement_Memory::mutable_reader_id(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Memory.reader_id)
  return reader_id_.Mutable(index);
}
inline void FirrtlPB_Statement_Memory::set_reader_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Memory.reader_id)
  reader_id_.Mutable(index)->assign(value);
}
inline void FirrtlPB_Statement_Memory::set_reader_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Memory.reader_id)
  reader_id_.Mutable(index)->assign(std::move(value));
}
inline void FirrtlPB_Statement_Memory::set_reader_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reader_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.Memory.reader_id)
}
inline void FirrtlPB_Statement_Memory::set_reader_id(int index, const char* value, size_t size) {
  reader_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.Memory.reader_id)
}
inline std::string* FirrtlPB_Statement_Memory::_internal_add_reader_id() {
  return reader_id_.Add();
}
inline void FirrtlPB_Statement_Memory::add_reader_id(const std::string& value) {
  reader_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Statement.Memory.reader_id)
}
inline void FirrtlPB_Statement_Memory::add_reader_id(std::string&& value) {
  reader_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Statement.Memory.reader_id)
}
inline void FirrtlPB_Statement_Memory::add_reader_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  reader_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:firrtl.FirrtlPB.Statement.Memory.reader_id)
}
inline void FirrtlPB_Statement_Memory::add_reader_id(const char* value, size_t size) {
  reader_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:firrtl.FirrtlPB.Statement.Memory.reader_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FirrtlPB_Statement_Memory::reader_id() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Statement.Memory.reader_id)
  return reader_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FirrtlPB_Statement_Memory::mutable_reader_id() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Statement.Memory.reader_id)
  return &reader_id_;
}

// repeated string writer_id = 7;
inline int FirrtlPB_Statement_Memory::_internal_writer_id_size() const {
  return writer_id_.size();
}
inline int FirrtlPB_Statement_Memory::writer_id_size() const {
  return _internal_writer_id_size();
}
inline void FirrtlPB_Statement_Memory::clear_writer_id() {
  writer_id_.Clear();
}
inline std::string* FirrtlPB_Statement_Memory::add_writer_id() {
  // @@protoc_insertion_point(field_add_mutable:firrtl.FirrtlPB.Statement.Memory.writer_id)
  return _internal_add_writer_id();
}
inline const std::string& FirrtlPB_Statement_Memory::_internal_writer_id(int index) const {
  return writer_id_.Get(index);
}
inline const std::string& FirrtlPB_Statement_Memory::writer_id(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Memory.writer_id)
  return _internal_writer_id(index);
}
inline std::string* FirrtlPB_Statement_Memory::mutable_writer_id(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Memory.writer_id)
  return writer_id_.Mutable(index);
}
inline void FirrtlPB_Statement_Memory::set_writer_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Memory.writer_id)
  writer_id_.Mutable(index)->assign(value);
}
inline void FirrtlPB_Statement_Memory::set_writer_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Memory.writer_id)
  writer_id_.Mutable(index)->assign(std::move(value));
}
inline void FirrtlPB_Statement_Memory::set_writer_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  writer_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.Memory.writer_id)
}
inline void FirrtlPB_Statement_Memory::set_writer_id(int index, const char* value, size_t size) {
  writer_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.Memory.writer_id)
}
inline std::string* FirrtlPB_Statement_Memory::_internal_add_writer_id() {
  return writer_id_.Add();
}
inline void FirrtlPB_Statement_Memory::add_writer_id(const std::string& value) {
  writer_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Statement.Memory.writer_id)
}
inline void FirrtlPB_Statement_Memory::add_writer_id(std::string&& value) {
  writer_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Statement.Memory.writer_id)
}
inline void FirrtlPB_Statement_Memory::add_writer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  writer_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:firrtl.FirrtlPB.Statement.Memory.writer_id)
}
inline void FirrtlPB_Statement_Memory::add_writer_id(const char* value, size_t size) {
  writer_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:firrtl.FirrtlPB.Statement.Memory.writer_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FirrtlPB_Statement_Memory::writer_id() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Statement.Memory.writer_id)
  return writer_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FirrtlPB_Statement_Memory::mutable_writer_id() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Statement.Memory.writer_id)
  return &writer_id_;
}

// repeated string readwriter_id = 8;
inline int FirrtlPB_Statement_Memory::_internal_readwriter_id_size() const {
  return readwriter_id_.size();
}
inline int FirrtlPB_Statement_Memory::readwriter_id_size() const {
  return _internal_readwriter_id_size();
}
inline void FirrtlPB_Statement_Memory::clear_readwriter_id() {
  readwriter_id_.Clear();
}
inline std::string* FirrtlPB_Statement_Memory::add_readwriter_id() {
  // @@protoc_insertion_point(field_add_mutable:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
  return _internal_add_readwriter_id();
}
inline const std::string& FirrtlPB_Statement_Memory::_internal_readwriter_id(int index) const {
  return readwriter_id_.Get(index);
}
inline const std::string& FirrtlPB_Statement_Memory::readwriter_id(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
  return _internal_readwriter_id(index);
}
inline std::string* FirrtlPB_Statement_Memory::mutable_readwriter_id(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
  return readwriter_id_.Mutable(index);
}
inline void FirrtlPB_Statement_Memory::set_readwriter_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
  readwriter_id_.Mutable(index)->assign(value);
}
inline void FirrtlPB_Statement_Memory::set_readwriter_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
  readwriter_id_.Mutable(index)->assign(std::move(value));
}
inline void FirrtlPB_Statement_Memory::set_readwriter_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  readwriter_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
}
inline void FirrtlPB_Statement_Memory::set_readwriter_id(int index, const char* value, size_t size) {
  readwriter_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
}
inline std::string* FirrtlPB_Statement_Memory::_internal_add_readwriter_id() {
  return readwriter_id_.Add();
}
inline void FirrtlPB_Statement_Memory::add_readwriter_id(const std::string& value) {
  readwriter_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
}
inline void FirrtlPB_Statement_Memory::add_readwriter_id(std::string&& value) {
  readwriter_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
}
inline void FirrtlPB_Statement_Memory::add_readwriter_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  readwriter_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
}
inline void FirrtlPB_Statement_Memory::add_readwriter_id(const char* value, size_t size) {
  readwriter_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
FirrtlPB_Statement_Memory::readwriter_id() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
  return readwriter_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
FirrtlPB_Statement_Memory::mutable_readwriter_id() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Statement.Memory.readwriter_id)
  return &readwriter_id_;
}

// .firrtl.FirrtlPB.Statement.ReadUnderWrite read_under_write = 10;
inline void FirrtlPB_Statement_Memory::clear_read_under_write() {
  read_under_write_ = 0;
}
inline ::firrtl::FirrtlPB_Statement_ReadUnderWrite FirrtlPB_Statement_Memory::_internal_read_under_write() const {
  return static_cast< ::firrtl::FirrtlPB_Statement_ReadUnderWrite >(read_under_write_);
}
inline ::firrtl::FirrtlPB_Statement_ReadUnderWrite FirrtlPB_Statement_Memory::read_under_write() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Memory.read_under_write)
  return _internal_read_under_write();
}
inline void FirrtlPB_Statement_Memory::_internal_set_read_under_write(::firrtl::FirrtlPB_Statement_ReadUnderWrite value) {
  
  read_under_write_ = value;
}
inline void FirrtlPB_Statement_Memory::set_read_under_write(::firrtl::FirrtlPB_Statement_ReadUnderWrite value) {
  _internal_set_read_under_write(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Memory.read_under_write)
}

inline bool FirrtlPB_Statement_Memory::has_depth() const {
  return depth_case() != DEPTH_NOT_SET;
}
inline void FirrtlPB_Statement_Memory::clear_has_depth() {
  _oneof_case_[0] = DEPTH_NOT_SET;
}
inline FirrtlPB_Statement_Memory::DepthCase FirrtlPB_Statement_Memory::depth_case() const {
  return FirrtlPB_Statement_Memory::DepthCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FirrtlPB_Statement_CMemory_TypeAndDepth

// .firrtl.FirrtlPB.Type data_type = 1;
inline bool FirrtlPB_Statement_CMemory_TypeAndDepth::_internal_has_data_type() const {
  return this != internal_default_instance() && data_type_ != nullptr;
}
inline bool FirrtlPB_Statement_CMemory_TypeAndDepth::has_data_type() const {
  return _internal_has_data_type();
}
inline void FirrtlPB_Statement_CMemory_TypeAndDepth::clear_data_type() {
  if (GetArenaNoVirtual() == nullptr && data_type_ != nullptr) {
    delete data_type_;
  }
  data_type_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Statement_CMemory_TypeAndDepth::_internal_data_type() const {
  const ::firrtl::FirrtlPB_Type* p = data_type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Type*>(
      &::firrtl::_FirrtlPB_Type_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Statement_CMemory_TypeAndDepth::data_type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth.data_type)
  return _internal_data_type();
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Statement_CMemory_TypeAndDepth::release_data_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth.data_type)
  
  ::firrtl::FirrtlPB_Type* temp = data_type_;
  data_type_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Statement_CMemory_TypeAndDepth::_internal_mutable_data_type() {
  
  if (data_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Type>(GetArenaNoVirtual());
    data_type_ = p;
  }
  return data_type_;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Statement_CMemory_TypeAndDepth::mutable_data_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth.data_type)
  return _internal_mutable_data_type();
}
inline void FirrtlPB_Statement_CMemory_TypeAndDepth::set_allocated_data_type(::firrtl::FirrtlPB_Type* data_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete data_type_;
  }
  if (data_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      data_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_type, submessage_arena);
    }
    
  } else {
    
  }
  data_type_ = data_type;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth.data_type)
}

// .firrtl.FirrtlPB.BigInt depth = 2;
inline bool FirrtlPB_Statement_CMemory_TypeAndDepth::_internal_has_depth() const {
  return this != internal_default_instance() && depth_ != nullptr;
}
inline bool FirrtlPB_Statement_CMemory_TypeAndDepth::has_depth() const {
  return _internal_has_depth();
}
inline void FirrtlPB_Statement_CMemory_TypeAndDepth::clear_depth() {
  if (GetArenaNoVirtual() == nullptr && depth_ != nullptr) {
    delete depth_;
  }
  depth_ = nullptr;
}
inline const ::firrtl::FirrtlPB_BigInt& FirrtlPB_Statement_CMemory_TypeAndDepth::_internal_depth() const {
  const ::firrtl::FirrtlPB_BigInt* p = depth_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_BigInt*>(
      &::firrtl::_FirrtlPB_BigInt_default_instance_);
}
inline const ::firrtl::FirrtlPB_BigInt& FirrtlPB_Statement_CMemory_TypeAndDepth::depth() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth.depth)
  return _internal_depth();
}
inline ::firrtl::FirrtlPB_BigInt* FirrtlPB_Statement_CMemory_TypeAndDepth::release_depth() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth.depth)
  
  ::firrtl::FirrtlPB_BigInt* temp = depth_;
  depth_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_BigInt* FirrtlPB_Statement_CMemory_TypeAndDepth::_internal_mutable_depth() {
  
  if (depth_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_BigInt>(GetArenaNoVirtual());
    depth_ = p;
  }
  return depth_;
}
inline ::firrtl::FirrtlPB_BigInt* FirrtlPB_Statement_CMemory_TypeAndDepth::mutable_depth() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth.depth)
  return _internal_mutable_depth();
}
inline void FirrtlPB_Statement_CMemory_TypeAndDepth::set_allocated_depth(::firrtl::FirrtlPB_BigInt* depth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete depth_;
  }
  if (depth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      depth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, depth, submessage_arena);
    }
    
  } else {
    
  }
  depth_ = depth;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth.depth)
}

// -------------------------------------------------------------------

// FirrtlPB_Statement_CMemory

// string id = 1;
inline void FirrtlPB_Statement_CMemory::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Statement_CMemory::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.CMemory.id)
  return _internal_id();
}
inline void FirrtlPB_Statement_CMemory::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.CMemory.id)
}
inline std::string* FirrtlPB_Statement_CMemory::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.CMemory.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Statement_CMemory::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Statement_CMemory::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Statement_CMemory::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Statement.CMemory.id)
}
inline void FirrtlPB_Statement_CMemory::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.CMemory.id)
}
inline void FirrtlPB_Statement_CMemory::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.CMemory.id)
}
inline std::string* FirrtlPB_Statement_CMemory::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Statement_CMemory::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.CMemory.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Statement_CMemory::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.CMemory.id)
}

// .firrtl.FirrtlPB.Type.VectorType vector_type = 2;
inline bool FirrtlPB_Statement_CMemory::_internal_has_vector_type() const {
  return type_case() == kVectorType;
}
inline bool FirrtlPB_Statement_CMemory::has_vector_type() const {
  return _internal_has_vector_type();
}
inline void FirrtlPB_Statement_CMemory::set_has_vector_type() {
  _oneof_case_[0] = kVectorType;
}
inline void FirrtlPB_Statement_CMemory::clear_vector_type() {
  if (_internal_has_vector_type()) {
    delete type_.vector_type_;
    clear_has_type();
  }
}
inline ::firrtl::FirrtlPB_Type_VectorType* FirrtlPB_Statement_CMemory::release_vector_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.CMemory.vector_type)
  if (_internal_has_vector_type()) {
    clear_has_type();
      ::firrtl::FirrtlPB_Type_VectorType* temp = type_.vector_type_;
    type_.vector_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Type_VectorType& FirrtlPB_Statement_CMemory::_internal_vector_type() const {
  return _internal_has_vector_type()
      ? *type_.vector_type_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Type_VectorType*>(&::firrtl::_FirrtlPB_Type_VectorType_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type_VectorType& FirrtlPB_Statement_CMemory::vector_type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.CMemory.vector_type)
  return _internal_vector_type();
}
inline ::firrtl::FirrtlPB_Type_VectorType* FirrtlPB_Statement_CMemory::_internal_mutable_vector_type() {
  if (!_internal_has_vector_type()) {
    clear_type();
    set_has_vector_type();
    type_.vector_type_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Type_VectorType >(
        GetArenaNoVirtual());
  }
  return type_.vector_type_;
}
inline ::firrtl::FirrtlPB_Type_VectorType* FirrtlPB_Statement_CMemory::mutable_vector_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.CMemory.vector_type)
  return _internal_mutable_vector_type();
}

// .firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth type_and_depth = 4;
inline bool FirrtlPB_Statement_CMemory::_internal_has_type_and_depth() const {
  return type_case() == kTypeAndDepth;
}
inline bool FirrtlPB_Statement_CMemory::has_type_and_depth() const {
  return _internal_has_type_and_depth();
}
inline void FirrtlPB_Statement_CMemory::set_has_type_and_depth() {
  _oneof_case_[0] = kTypeAndDepth;
}
inline void FirrtlPB_Statement_CMemory::clear_type_and_depth() {
  if (_internal_has_type_and_depth()) {
    delete type_.type_and_depth_;
    clear_has_type();
  }
}
inline ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* FirrtlPB_Statement_CMemory::release_type_and_depth() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.CMemory.type_and_depth)
  if (_internal_has_type_and_depth()) {
    clear_has_type();
      ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* temp = type_.type_and_depth_;
    type_.type_and_depth_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth& FirrtlPB_Statement_CMemory::_internal_type_and_depth() const {
  return _internal_has_type_and_depth()
      ? *type_.type_and_depth_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth*>(&::firrtl::_FirrtlPB_Statement_CMemory_TypeAndDepth_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth& FirrtlPB_Statement_CMemory::type_and_depth() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.CMemory.type_and_depth)
  return _internal_type_and_depth();
}
inline ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* FirrtlPB_Statement_CMemory::_internal_mutable_type_and_depth() {
  if (!_internal_has_type_and_depth()) {
    clear_type();
    set_has_type_and_depth();
    type_.type_and_depth_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth >(
        GetArenaNoVirtual());
  }
  return type_.type_and_depth_;
}
inline ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* FirrtlPB_Statement_CMemory::mutable_type_and_depth() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.CMemory.type_and_depth)
  return _internal_mutable_type_and_depth();
}

// bool sync_read = 3;
inline void FirrtlPB_Statement_CMemory::clear_sync_read() {
  sync_read_ = false;
}
inline bool FirrtlPB_Statement_CMemory::_internal_sync_read() const {
  return sync_read_;
}
inline bool FirrtlPB_Statement_CMemory::sync_read() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.CMemory.sync_read)
  return _internal_sync_read();
}
inline void FirrtlPB_Statement_CMemory::_internal_set_sync_read(bool value) {
  
  sync_read_ = value;
}
inline void FirrtlPB_Statement_CMemory::set_sync_read(bool value) {
  _internal_set_sync_read(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.CMemory.sync_read)
}

// .firrtl.FirrtlPB.Statement.ReadUnderWrite read_under_write = 5;
inline void FirrtlPB_Statement_CMemory::clear_read_under_write() {
  read_under_write_ = 0;
}
inline ::firrtl::FirrtlPB_Statement_ReadUnderWrite FirrtlPB_Statement_CMemory::_internal_read_under_write() const {
  return static_cast< ::firrtl::FirrtlPB_Statement_ReadUnderWrite >(read_under_write_);
}
inline ::firrtl::FirrtlPB_Statement_ReadUnderWrite FirrtlPB_Statement_CMemory::read_under_write() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.CMemory.read_under_write)
  return _internal_read_under_write();
}
inline void FirrtlPB_Statement_CMemory::_internal_set_read_under_write(::firrtl::FirrtlPB_Statement_ReadUnderWrite value) {
  
  read_under_write_ = value;
}
inline void FirrtlPB_Statement_CMemory::set_read_under_write(::firrtl::FirrtlPB_Statement_ReadUnderWrite value) {
  _internal_set_read_under_write(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.CMemory.read_under_write)
}

inline bool FirrtlPB_Statement_CMemory::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void FirrtlPB_Statement_CMemory::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline FirrtlPB_Statement_CMemory::TypeCase FirrtlPB_Statement_CMemory::type_case() const {
  return FirrtlPB_Statement_CMemory::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FirrtlPB_Statement_Instance

// string id = 1;
inline void FirrtlPB_Statement_Instance::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Statement_Instance::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Instance.id)
  return _internal_id();
}
inline void FirrtlPB_Statement_Instance::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Instance.id)
}
inline std::string* FirrtlPB_Statement_Instance::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Instance.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Statement_Instance::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Statement_Instance::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Statement_Instance::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Statement.Instance.id)
}
inline void FirrtlPB_Statement_Instance::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.Instance.id)
}
inline void FirrtlPB_Statement_Instance::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.Instance.id)
}
inline std::string* FirrtlPB_Statement_Instance::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Statement_Instance::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Instance.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Statement_Instance::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Instance.id)
}

// string module_id = 2;
inline void FirrtlPB_Statement_Instance::clear_module_id() {
  module_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Statement_Instance::module_id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Instance.module_id)
  return _internal_module_id();
}
inline void FirrtlPB_Statement_Instance::set_module_id(const std::string& value) {
  _internal_set_module_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Instance.module_id)
}
inline std::string* FirrtlPB_Statement_Instance::mutable_module_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Instance.module_id)
  return _internal_mutable_module_id();
}
inline const std::string& FirrtlPB_Statement_Instance::_internal_module_id() const {
  return module_id_.GetNoArena();
}
inline void FirrtlPB_Statement_Instance::_internal_set_module_id(const std::string& value) {
  
  module_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Statement_Instance::set_module_id(std::string&& value) {
  
  module_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Statement.Instance.module_id)
}
inline void FirrtlPB_Statement_Instance::set_module_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  module_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.Instance.module_id)
}
inline void FirrtlPB_Statement_Instance::set_module_id(const char* value, size_t size) {
  
  module_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.Instance.module_id)
}
inline std::string* FirrtlPB_Statement_Instance::_internal_mutable_module_id() {
  
  return module_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Statement_Instance::release_module_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Instance.module_id)
  
  return module_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Statement_Instance::set_allocated_module_id(std::string* module_id) {
  if (module_id != nullptr) {
    
  } else {
    
  }
  module_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Instance.module_id)
}

// -------------------------------------------------------------------

// FirrtlPB_Statement_Node

// string id = 1;
inline void FirrtlPB_Statement_Node::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Statement_Node::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Node.id)
  return _internal_id();
}
inline void FirrtlPB_Statement_Node::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Node.id)
}
inline std::string* FirrtlPB_Statement_Node::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Node.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Statement_Node::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Statement_Node::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Statement_Node::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Statement.Node.id)
}
inline void FirrtlPB_Statement_Node::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.Node.id)
}
inline void FirrtlPB_Statement_Node::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.Node.id)
}
inline std::string* FirrtlPB_Statement_Node::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Statement_Node::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Node.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Statement_Node::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Node.id)
}

// .firrtl.FirrtlPB.Expression expression = 2;
inline bool FirrtlPB_Statement_Node::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool FirrtlPB_Statement_Node::has_expression() const {
  return _internal_has_expression();
}
inline void FirrtlPB_Statement_Node::clear_expression() {
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Node::_internal_expression() const {
  const ::firrtl::FirrtlPB_Expression* p = expression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Node::expression() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Node.expression)
  return _internal_expression();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Node::release_expression() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Node.expression)
  
  ::firrtl::FirrtlPB_Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Node::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    expression_ = p;
  }
  return expression_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Node::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Node.expression)
  return _internal_mutable_expression();
}
inline void FirrtlPB_Statement_Node::set_allocated_expression(::firrtl::FirrtlPB_Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Node.expression)
}

// -------------------------------------------------------------------

// FirrtlPB_Statement_When

// .firrtl.FirrtlPB.Expression predicate = 1;
inline bool FirrtlPB_Statement_When::_internal_has_predicate() const {
  return this != internal_default_instance() && predicate_ != nullptr;
}
inline bool FirrtlPB_Statement_When::has_predicate() const {
  return _internal_has_predicate();
}
inline void FirrtlPB_Statement_When::clear_predicate() {
  if (GetArenaNoVirtual() == nullptr && predicate_ != nullptr) {
    delete predicate_;
  }
  predicate_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_When::_internal_predicate() const {
  const ::firrtl::FirrtlPB_Expression* p = predicate_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_When::predicate() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.When.predicate)
  return _internal_predicate();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_When::release_predicate() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.When.predicate)
  
  ::firrtl::FirrtlPB_Expression* temp = predicate_;
  predicate_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_When::_internal_mutable_predicate() {
  
  if (predicate_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    predicate_ = p;
  }
  return predicate_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_When::mutable_predicate() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.When.predicate)
  return _internal_mutable_predicate();
}
inline void FirrtlPB_Statement_When::set_allocated_predicate(::firrtl::FirrtlPB_Expression* predicate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete predicate_;
  }
  if (predicate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      predicate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, predicate, submessage_arena);
    }
    
  } else {
    
  }
  predicate_ = predicate;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.When.predicate)
}

// repeated .firrtl.FirrtlPB.Statement consequent = 2;
inline int FirrtlPB_Statement_When::_internal_consequent_size() const {
  return consequent_.size();
}
inline int FirrtlPB_Statement_When::consequent_size() const {
  return _internal_consequent_size();
}
inline void FirrtlPB_Statement_When::clear_consequent() {
  consequent_.Clear();
}
inline ::firrtl::FirrtlPB_Statement* FirrtlPB_Statement_When::mutable_consequent(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.When.consequent)
  return consequent_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement >*
FirrtlPB_Statement_When::mutable_consequent() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Statement.When.consequent)
  return &consequent_;
}
inline const ::firrtl::FirrtlPB_Statement& FirrtlPB_Statement_When::_internal_consequent(int index) const {
  return consequent_.Get(index);
}
inline const ::firrtl::FirrtlPB_Statement& FirrtlPB_Statement_When::consequent(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.When.consequent)
  return _internal_consequent(index);
}
inline ::firrtl::FirrtlPB_Statement* FirrtlPB_Statement_When::_internal_add_consequent() {
  return consequent_.Add();
}
inline ::firrtl::FirrtlPB_Statement* FirrtlPB_Statement_When::add_consequent() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Statement.When.consequent)
  return _internal_add_consequent();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement >&
FirrtlPB_Statement_When::consequent() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Statement.When.consequent)
  return consequent_;
}

// repeated .firrtl.FirrtlPB.Statement otherwise = 3;
inline int FirrtlPB_Statement_When::_internal_otherwise_size() const {
  return otherwise_.size();
}
inline int FirrtlPB_Statement_When::otherwise_size() const {
  return _internal_otherwise_size();
}
inline void FirrtlPB_Statement_When::clear_otherwise() {
  otherwise_.Clear();
}
inline ::firrtl::FirrtlPB_Statement* FirrtlPB_Statement_When::mutable_otherwise(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.When.otherwise)
  return otherwise_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement >*
FirrtlPB_Statement_When::mutable_otherwise() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Statement.When.otherwise)
  return &otherwise_;
}
inline const ::firrtl::FirrtlPB_Statement& FirrtlPB_Statement_When::_internal_otherwise(int index) const {
  return otherwise_.Get(index);
}
inline const ::firrtl::FirrtlPB_Statement& FirrtlPB_Statement_When::otherwise(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.When.otherwise)
  return _internal_otherwise(index);
}
inline ::firrtl::FirrtlPB_Statement* FirrtlPB_Statement_When::_internal_add_otherwise() {
  return otherwise_.Add();
}
inline ::firrtl::FirrtlPB_Statement* FirrtlPB_Statement_When::add_otherwise() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Statement.When.otherwise)
  return _internal_add_otherwise();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Statement >&
FirrtlPB_Statement_When::otherwise() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Statement.When.otherwise)
  return otherwise_;
}

// -------------------------------------------------------------------

// FirrtlPB_Statement_Stop

// int32 return_value = 1;
inline void FirrtlPB_Statement_Stop::clear_return_value() {
  return_value_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FirrtlPB_Statement_Stop::_internal_return_value() const {
  return return_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FirrtlPB_Statement_Stop::return_value() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Stop.return_value)
  return _internal_return_value();
}
inline void FirrtlPB_Statement_Stop::_internal_set_return_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  return_value_ = value;
}
inline void FirrtlPB_Statement_Stop::set_return_value(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_return_value(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Stop.return_value)
}

// .firrtl.FirrtlPB.Expression clk = 2;
inline bool FirrtlPB_Statement_Stop::_internal_has_clk() const {
  return this != internal_default_instance() && clk_ != nullptr;
}
inline bool FirrtlPB_Statement_Stop::has_clk() const {
  return _internal_has_clk();
}
inline void FirrtlPB_Statement_Stop::clear_clk() {
  if (GetArenaNoVirtual() == nullptr && clk_ != nullptr) {
    delete clk_;
  }
  clk_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Stop::_internal_clk() const {
  const ::firrtl::FirrtlPB_Expression* p = clk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Stop::clk() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Stop.clk)
  return _internal_clk();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Stop::release_clk() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Stop.clk)
  
  ::firrtl::FirrtlPB_Expression* temp = clk_;
  clk_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Stop::_internal_mutable_clk() {
  
  if (clk_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    clk_ = p;
  }
  return clk_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Stop::mutable_clk() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Stop.clk)
  return _internal_mutable_clk();
}
inline void FirrtlPB_Statement_Stop::set_allocated_clk(::firrtl::FirrtlPB_Expression* clk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clk_;
  }
  if (clk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clk, submessage_arena);
    }
    
  } else {
    
  }
  clk_ = clk;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Stop.clk)
}

// .firrtl.FirrtlPB.Expression en = 3;
inline bool FirrtlPB_Statement_Stop::_internal_has_en() const {
  return this != internal_default_instance() && en_ != nullptr;
}
inline bool FirrtlPB_Statement_Stop::has_en() const {
  return _internal_has_en();
}
inline void FirrtlPB_Statement_Stop::clear_en() {
  if (GetArenaNoVirtual() == nullptr && en_ != nullptr) {
    delete en_;
  }
  en_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Stop::_internal_en() const {
  const ::firrtl::FirrtlPB_Expression* p = en_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Stop::en() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Stop.en)
  return _internal_en();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Stop::release_en() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Stop.en)
  
  ::firrtl::FirrtlPB_Expression* temp = en_;
  en_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Stop::_internal_mutable_en() {
  
  if (en_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    en_ = p;
  }
  return en_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Stop::mutable_en() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Stop.en)
  return _internal_mutable_en();
}
inline void FirrtlPB_Statement_Stop::set_allocated_en(::firrtl::FirrtlPB_Expression* en) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete en_;
  }
  if (en) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      en = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, en, submessage_arena);
    }
    
  } else {
    
  }
  en_ = en;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Stop.en)
}

// -------------------------------------------------------------------

// FirrtlPB_Statement_Printf

// string value = 1;
inline void FirrtlPB_Statement_Printf::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Statement_Printf::value() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Printf.value)
  return _internal_value();
}
inline void FirrtlPB_Statement_Printf::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.Printf.value)
}
inline std::string* FirrtlPB_Statement_Printf::mutable_value() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Printf.value)
  return _internal_mutable_value();
}
inline const std::string& FirrtlPB_Statement_Printf::_internal_value() const {
  return value_.GetNoArena();
}
inline void FirrtlPB_Statement_Printf::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Statement_Printf::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Statement.Printf.value)
}
inline void FirrtlPB_Statement_Printf::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.Printf.value)
}
inline void FirrtlPB_Statement_Printf::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.Printf.value)
}
inline std::string* FirrtlPB_Statement_Printf::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Statement_Printf::release_value() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Printf.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Statement_Printf::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Printf.value)
}

// repeated .firrtl.FirrtlPB.Expression arg = 2;
inline int FirrtlPB_Statement_Printf::_internal_arg_size() const {
  return arg_.size();
}
inline int FirrtlPB_Statement_Printf::arg_size() const {
  return _internal_arg_size();
}
inline void FirrtlPB_Statement_Printf::clear_arg() {
  arg_.Clear();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Printf::mutable_arg(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Printf.arg)
  return arg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression >*
FirrtlPB_Statement_Printf::mutable_arg() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Statement.Printf.arg)
  return &arg_;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Printf::_internal_arg(int index) const {
  return arg_.Get(index);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Printf::arg(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Printf.arg)
  return _internal_arg(index);
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Printf::_internal_add_arg() {
  return arg_.Add();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Printf::add_arg() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Statement.Printf.arg)
  return _internal_add_arg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression >&
FirrtlPB_Statement_Printf::arg() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Statement.Printf.arg)
  return arg_;
}

// .firrtl.FirrtlPB.Expression clk = 3;
inline bool FirrtlPB_Statement_Printf::_internal_has_clk() const {
  return this != internal_default_instance() && clk_ != nullptr;
}
inline bool FirrtlPB_Statement_Printf::has_clk() const {
  return _internal_has_clk();
}
inline void FirrtlPB_Statement_Printf::clear_clk() {
  if (GetArenaNoVirtual() == nullptr && clk_ != nullptr) {
    delete clk_;
  }
  clk_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Printf::_internal_clk() const {
  const ::firrtl::FirrtlPB_Expression* p = clk_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Printf::clk() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Printf.clk)
  return _internal_clk();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Printf::release_clk() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Printf.clk)
  
  ::firrtl::FirrtlPB_Expression* temp = clk_;
  clk_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Printf::_internal_mutable_clk() {
  
  if (clk_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    clk_ = p;
  }
  return clk_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Printf::mutable_clk() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Printf.clk)
  return _internal_mutable_clk();
}
inline void FirrtlPB_Statement_Printf::set_allocated_clk(::firrtl::FirrtlPB_Expression* clk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete clk_;
  }
  if (clk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clk, submessage_arena);
    }
    
  } else {
    
  }
  clk_ = clk;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Printf.clk)
}

// .firrtl.FirrtlPB.Expression en = 4;
inline bool FirrtlPB_Statement_Printf::_internal_has_en() const {
  return this != internal_default_instance() && en_ != nullptr;
}
inline bool FirrtlPB_Statement_Printf::has_en() const {
  return _internal_has_en();
}
inline void FirrtlPB_Statement_Printf::clear_en() {
  if (GetArenaNoVirtual() == nullptr && en_ != nullptr) {
    delete en_;
  }
  en_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Printf::_internal_en() const {
  const ::firrtl::FirrtlPB_Expression* p = en_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Printf::en() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Printf.en)
  return _internal_en();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Printf::release_en() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Printf.en)
  
  ::firrtl::FirrtlPB_Expression* temp = en_;
  en_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Printf::_internal_mutable_en() {
  
  if (en_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    en_ = p;
  }
  return en_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Printf::mutable_en() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Printf.en)
  return _internal_mutable_en();
}
inline void FirrtlPB_Statement_Printf::set_allocated_en(::firrtl::FirrtlPB_Expression* en) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete en_;
  }
  if (en) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      en = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, en, submessage_arena);
    }
    
  } else {
    
  }
  en_ = en;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Printf.en)
}

// -------------------------------------------------------------------

// FirrtlPB_Statement_Skip

// -------------------------------------------------------------------

// FirrtlPB_Statement_Connect

// .firrtl.FirrtlPB.Expression location = 1;
inline bool FirrtlPB_Statement_Connect::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool FirrtlPB_Statement_Connect::has_location() const {
  return _internal_has_location();
}
inline void FirrtlPB_Statement_Connect::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Connect::_internal_location() const {
  const ::firrtl::FirrtlPB_Expression* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Connect::location() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Connect.location)
  return _internal_location();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Connect::release_location() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Connect.location)
  
  ::firrtl::FirrtlPB_Expression* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Connect::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    location_ = p;
  }
  return location_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Connect::mutable_location() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Connect.location)
  return _internal_mutable_location();
}
inline void FirrtlPB_Statement_Connect::set_allocated_location(::firrtl::FirrtlPB_Expression* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Connect.location)
}

// .firrtl.FirrtlPB.Expression expression = 2;
inline bool FirrtlPB_Statement_Connect::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool FirrtlPB_Statement_Connect::has_expression() const {
  return _internal_has_expression();
}
inline void FirrtlPB_Statement_Connect::clear_expression() {
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Connect::_internal_expression() const {
  const ::firrtl::FirrtlPB_Expression* p = expression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Connect::expression() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Connect.expression)
  return _internal_expression();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Connect::release_expression() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.Connect.expression)
  
  ::firrtl::FirrtlPB_Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Connect::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    expression_ = p;
  }
  return expression_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Connect::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Connect.expression)
  return _internal_mutable_expression();
}
inline void FirrtlPB_Statement_Connect::set_allocated_expression(::firrtl::FirrtlPB_Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Connect.expression)
}

// -------------------------------------------------------------------

// FirrtlPB_Statement_PartialConnect

// .firrtl.FirrtlPB.Expression location = 1;
inline bool FirrtlPB_Statement_PartialConnect::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool FirrtlPB_Statement_PartialConnect::has_location() const {
  return _internal_has_location();
}
inline void FirrtlPB_Statement_PartialConnect::clear_location() {
  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_PartialConnect::_internal_location() const {
  const ::firrtl::FirrtlPB_Expression* p = location_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_PartialConnect::location() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.PartialConnect.location)
  return _internal_location();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_PartialConnect::release_location() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.PartialConnect.location)
  
  ::firrtl::FirrtlPB_Expression* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_PartialConnect::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    location_ = p;
  }
  return location_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_PartialConnect::mutable_location() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.PartialConnect.location)
  return _internal_mutable_location();
}
inline void FirrtlPB_Statement_PartialConnect::set_allocated_location(::firrtl::FirrtlPB_Expression* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.PartialConnect.location)
}

// .firrtl.FirrtlPB.Expression expression = 2;
inline bool FirrtlPB_Statement_PartialConnect::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool FirrtlPB_Statement_PartialConnect::has_expression() const {
  return _internal_has_expression();
}
inline void FirrtlPB_Statement_PartialConnect::clear_expression() {
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_PartialConnect::_internal_expression() const {
  const ::firrtl::FirrtlPB_Expression* p = expression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_PartialConnect::expression() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.PartialConnect.expression)
  return _internal_expression();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_PartialConnect::release_expression() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.PartialConnect.expression)
  
  ::firrtl::FirrtlPB_Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_PartialConnect::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    expression_ = p;
  }
  return expression_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_PartialConnect::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.PartialConnect.expression)
  return _internal_mutable_expression();
}
inline void FirrtlPB_Statement_PartialConnect::set_allocated_expression(::firrtl::FirrtlPB_Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.PartialConnect.expression)
}

// -------------------------------------------------------------------

// FirrtlPB_Statement_IsInvalid

// .firrtl.FirrtlPB.Expression expression = 1;
inline bool FirrtlPB_Statement_IsInvalid::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool FirrtlPB_Statement_IsInvalid::has_expression() const {
  return _internal_has_expression();
}
inline void FirrtlPB_Statement_IsInvalid::clear_expression() {
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_IsInvalid::_internal_expression() const {
  const ::firrtl::FirrtlPB_Expression* p = expression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_IsInvalid::expression() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.IsInvalid.expression)
  return _internal_expression();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_IsInvalid::release_expression() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.IsInvalid.expression)
  
  ::firrtl::FirrtlPB_Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_IsInvalid::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    expression_ = p;
  }
  return expression_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_IsInvalid::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.IsInvalid.expression)
  return _internal_mutable_expression();
}
inline void FirrtlPB_Statement_IsInvalid::set_allocated_expression(::firrtl::FirrtlPB_Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.IsInvalid.expression)
}

// -------------------------------------------------------------------

// FirrtlPB_Statement_MemoryPort

// .firrtl.FirrtlPB.Statement.MemoryPort.Direction direction = 1;
inline void FirrtlPB_Statement_MemoryPort::clear_direction() {
  direction_ = 0;
}
inline ::firrtl::FirrtlPB_Statement_MemoryPort_Direction FirrtlPB_Statement_MemoryPort::_internal_direction() const {
  return static_cast< ::firrtl::FirrtlPB_Statement_MemoryPort_Direction >(direction_);
}
inline ::firrtl::FirrtlPB_Statement_MemoryPort_Direction FirrtlPB_Statement_MemoryPort::direction() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.MemoryPort.direction)
  return _internal_direction();
}
inline void FirrtlPB_Statement_MemoryPort::_internal_set_direction(::firrtl::FirrtlPB_Statement_MemoryPort_Direction value) {
  
  direction_ = value;
}
inline void FirrtlPB_Statement_MemoryPort::set_direction(::firrtl::FirrtlPB_Statement_MemoryPort_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.MemoryPort.direction)
}

// string id = 2;
inline void FirrtlPB_Statement_MemoryPort::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Statement_MemoryPort::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.MemoryPort.id)
  return _internal_id();
}
inline void FirrtlPB_Statement_MemoryPort::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.MemoryPort.id)
}
inline std::string* FirrtlPB_Statement_MemoryPort::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.MemoryPort.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Statement_MemoryPort::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Statement_MemoryPort::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Statement_MemoryPort::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Statement.MemoryPort.id)
}
inline void FirrtlPB_Statement_MemoryPort::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.MemoryPort.id)
}
inline void FirrtlPB_Statement_MemoryPort::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.MemoryPort.id)
}
inline std::string* FirrtlPB_Statement_MemoryPort::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Statement_MemoryPort::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.MemoryPort.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Statement_MemoryPort::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.MemoryPort.id)
}

// string memory_id = 3;
inline void FirrtlPB_Statement_MemoryPort::clear_memory_id() {
  memory_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Statement_MemoryPort::memory_id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.MemoryPort.memory_id)
  return _internal_memory_id();
}
inline void FirrtlPB_Statement_MemoryPort::set_memory_id(const std::string& value) {
  _internal_set_memory_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Statement.MemoryPort.memory_id)
}
inline std::string* FirrtlPB_Statement_MemoryPort::mutable_memory_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.MemoryPort.memory_id)
  return _internal_mutable_memory_id();
}
inline const std::string& FirrtlPB_Statement_MemoryPort::_internal_memory_id() const {
  return memory_id_.GetNoArena();
}
inline void FirrtlPB_Statement_MemoryPort::_internal_set_memory_id(const std::string& value) {
  
  memory_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Statement_MemoryPort::set_memory_id(std::string&& value) {
  
  memory_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Statement.MemoryPort.memory_id)
}
inline void FirrtlPB_Statement_MemoryPort::set_memory_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  memory_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Statement.MemoryPort.memory_id)
}
inline void FirrtlPB_Statement_MemoryPort::set_memory_id(const char* value, size_t size) {
  
  memory_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Statement.MemoryPort.memory_id)
}
inline std::string* FirrtlPB_Statement_MemoryPort::_internal_mutable_memory_id() {
  
  return memory_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Statement_MemoryPort::release_memory_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.MemoryPort.memory_id)
  
  return memory_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Statement_MemoryPort::set_allocated_memory_id(std::string* memory_id) {
  if (memory_id != nullptr) {
    
  } else {
    
  }
  memory_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), memory_id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.MemoryPort.memory_id)
}

// .firrtl.FirrtlPB.Expression memory_index = 4;
inline bool FirrtlPB_Statement_MemoryPort::_internal_has_memory_index() const {
  return this != internal_default_instance() && memory_index_ != nullptr;
}
inline bool FirrtlPB_Statement_MemoryPort::has_memory_index() const {
  return _internal_has_memory_index();
}
inline void FirrtlPB_Statement_MemoryPort::clear_memory_index() {
  if (GetArenaNoVirtual() == nullptr && memory_index_ != nullptr) {
    delete memory_index_;
  }
  memory_index_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_MemoryPort::_internal_memory_index() const {
  const ::firrtl::FirrtlPB_Expression* p = memory_index_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_MemoryPort::memory_index() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.MemoryPort.memory_index)
  return _internal_memory_index();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_MemoryPort::release_memory_index() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.MemoryPort.memory_index)
  
  ::firrtl::FirrtlPB_Expression* temp = memory_index_;
  memory_index_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_MemoryPort::_internal_mutable_memory_index() {
  
  if (memory_index_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    memory_index_ = p;
  }
  return memory_index_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_MemoryPort::mutable_memory_index() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.MemoryPort.memory_index)
  return _internal_mutable_memory_index();
}
inline void FirrtlPB_Statement_MemoryPort::set_allocated_memory_index(::firrtl::FirrtlPB_Expression* memory_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete memory_index_;
  }
  if (memory_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memory_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_index, submessage_arena);
    }
    
  } else {
    
  }
  memory_index_ = memory_index;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.MemoryPort.memory_index)
}

// .firrtl.FirrtlPB.Expression expression = 5;
inline bool FirrtlPB_Statement_MemoryPort::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool FirrtlPB_Statement_MemoryPort::has_expression() const {
  return _internal_has_expression();
}
inline void FirrtlPB_Statement_MemoryPort::clear_expression() {
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_MemoryPort::_internal_expression() const {
  const ::firrtl::FirrtlPB_Expression* p = expression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_MemoryPort::expression() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.MemoryPort.expression)
  return _internal_expression();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_MemoryPort::release_expression() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.MemoryPort.expression)
  
  ::firrtl::FirrtlPB_Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_MemoryPort::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    expression_ = p;
  }
  return expression_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_MemoryPort::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.MemoryPort.expression)
  return _internal_mutable_expression();
}
inline void FirrtlPB_Statement_MemoryPort::set_allocated_expression(::firrtl::FirrtlPB_Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.MemoryPort.expression)
}

// -------------------------------------------------------------------

// FirrtlPB_Statement_Attach

// repeated .firrtl.FirrtlPB.Expression expression = 1;
inline int FirrtlPB_Statement_Attach::_internal_expression_size() const {
  return expression_.size();
}
inline int FirrtlPB_Statement_Attach::expression_size() const {
  return _internal_expression_size();
}
inline void FirrtlPB_Statement_Attach::clear_expression() {
  expression_.Clear();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Attach::mutable_expression(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.Attach.expression)
  return expression_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression >*
FirrtlPB_Statement_Attach::mutable_expression() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Statement.Attach.expression)
  return &expression_;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Attach::_internal_expression(int index) const {
  return expression_.Get(index);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Statement_Attach::expression(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.Attach.expression)
  return _internal_expression(index);
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Attach::_internal_add_expression() {
  return expression_.Add();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Statement_Attach::add_expression() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Statement.Attach.expression)
  return _internal_add_expression();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression >&
FirrtlPB_Statement_Attach::expression() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Statement.Attach.expression)
  return expression_;
}

// -------------------------------------------------------------------

// FirrtlPB_Statement

// .firrtl.FirrtlPB.Statement.Wire wire = 1;
inline bool FirrtlPB_Statement::_internal_has_wire() const {
  return statement_case() == kWire;
}
inline bool FirrtlPB_Statement::has_wire() const {
  return _internal_has_wire();
}
inline void FirrtlPB_Statement::set_has_wire() {
  _oneof_case_[0] = kWire;
}
inline void FirrtlPB_Statement::clear_wire() {
  if (_internal_has_wire()) {
    delete statement_.wire_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_Wire* FirrtlPB_Statement::release_wire() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.wire)
  if (_internal_has_wire()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_Wire* temp = statement_.wire_;
    statement_.wire_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_Wire& FirrtlPB_Statement::_internal_wire() const {
  return _internal_has_wire()
      ? *statement_.wire_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_Wire*>(&::firrtl::_FirrtlPB_Statement_Wire_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_Wire& FirrtlPB_Statement::wire() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.wire)
  return _internal_wire();
}
inline ::firrtl::FirrtlPB_Statement_Wire* FirrtlPB_Statement::_internal_mutable_wire() {
  if (!_internal_has_wire()) {
    clear_statement();
    set_has_wire();
    statement_.wire_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Wire >(
        GetArenaNoVirtual());
  }
  return statement_.wire_;
}
inline ::firrtl::FirrtlPB_Statement_Wire* FirrtlPB_Statement::mutable_wire() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.wire)
  return _internal_mutable_wire();
}

// .firrtl.FirrtlPB.Statement.Register register = 2;
inline bool FirrtlPB_Statement::_internal_has_register_() const {
  return statement_case() == kRegister;
}
inline bool FirrtlPB_Statement::has_register_() const {
  return _internal_has_register_();
}
inline void FirrtlPB_Statement::set_has_register_() {
  _oneof_case_[0] = kRegister;
}
inline void FirrtlPB_Statement::clear_register_() {
  if (_internal_has_register_()) {
    delete statement_.register__;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_Register* FirrtlPB_Statement::release_register_() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.register)
  if (_internal_has_register_()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_Register* temp = statement_.register__;
    statement_.register__ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_Register& FirrtlPB_Statement::_internal_register_() const {
  return _internal_has_register_()
      ? *statement_.register__
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_Register*>(&::firrtl::_FirrtlPB_Statement_Register_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_Register& FirrtlPB_Statement::register_() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.register)
  return _internal_register_();
}
inline ::firrtl::FirrtlPB_Statement_Register* FirrtlPB_Statement::_internal_mutable_register_() {
  if (!_internal_has_register_()) {
    clear_statement();
    set_has_register_();
    statement_.register__ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Register >(
        GetArenaNoVirtual());
  }
  return statement_.register__;
}
inline ::firrtl::FirrtlPB_Statement_Register* FirrtlPB_Statement::mutable_register_() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.register)
  return _internal_mutable_register_();
}

// .firrtl.FirrtlPB.Statement.Memory memory = 3;
inline bool FirrtlPB_Statement::_internal_has_memory() const {
  return statement_case() == kMemory;
}
inline bool FirrtlPB_Statement::has_memory() const {
  return _internal_has_memory();
}
inline void FirrtlPB_Statement::set_has_memory() {
  _oneof_case_[0] = kMemory;
}
inline void FirrtlPB_Statement::clear_memory() {
  if (_internal_has_memory()) {
    delete statement_.memory_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_Memory* FirrtlPB_Statement::release_memory() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.memory)
  if (_internal_has_memory()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_Memory* temp = statement_.memory_;
    statement_.memory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_Memory& FirrtlPB_Statement::_internal_memory() const {
  return _internal_has_memory()
      ? *statement_.memory_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_Memory*>(&::firrtl::_FirrtlPB_Statement_Memory_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_Memory& FirrtlPB_Statement::memory() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.memory)
  return _internal_memory();
}
inline ::firrtl::FirrtlPB_Statement_Memory* FirrtlPB_Statement::_internal_mutable_memory() {
  if (!_internal_has_memory()) {
    clear_statement();
    set_has_memory();
    statement_.memory_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Memory >(
        GetArenaNoVirtual());
  }
  return statement_.memory_;
}
inline ::firrtl::FirrtlPB_Statement_Memory* FirrtlPB_Statement::mutable_memory() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.memory)
  return _internal_mutable_memory();
}

// .firrtl.FirrtlPB.Statement.CMemory cmemory = 4;
inline bool FirrtlPB_Statement::_internal_has_cmemory() const {
  return statement_case() == kCmemory;
}
inline bool FirrtlPB_Statement::has_cmemory() const {
  return _internal_has_cmemory();
}
inline void FirrtlPB_Statement::set_has_cmemory() {
  _oneof_case_[0] = kCmemory;
}
inline void FirrtlPB_Statement::clear_cmemory() {
  if (_internal_has_cmemory()) {
    delete statement_.cmemory_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_CMemory* FirrtlPB_Statement::release_cmemory() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.cmemory)
  if (_internal_has_cmemory()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_CMemory* temp = statement_.cmemory_;
    statement_.cmemory_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_CMemory& FirrtlPB_Statement::_internal_cmemory() const {
  return _internal_has_cmemory()
      ? *statement_.cmemory_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_CMemory*>(&::firrtl::_FirrtlPB_Statement_CMemory_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_CMemory& FirrtlPB_Statement::cmemory() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.cmemory)
  return _internal_cmemory();
}
inline ::firrtl::FirrtlPB_Statement_CMemory* FirrtlPB_Statement::_internal_mutable_cmemory() {
  if (!_internal_has_cmemory()) {
    clear_statement();
    set_has_cmemory();
    statement_.cmemory_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_CMemory >(
        GetArenaNoVirtual());
  }
  return statement_.cmemory_;
}
inline ::firrtl::FirrtlPB_Statement_CMemory* FirrtlPB_Statement::mutable_cmemory() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.cmemory)
  return _internal_mutable_cmemory();
}

// .firrtl.FirrtlPB.Statement.Instance instance = 5;
inline bool FirrtlPB_Statement::_internal_has_instance() const {
  return statement_case() == kInstance;
}
inline bool FirrtlPB_Statement::has_instance() const {
  return _internal_has_instance();
}
inline void FirrtlPB_Statement::set_has_instance() {
  _oneof_case_[0] = kInstance;
}
inline void FirrtlPB_Statement::clear_instance() {
  if (_internal_has_instance()) {
    delete statement_.instance_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_Instance* FirrtlPB_Statement::release_instance() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.instance)
  if (_internal_has_instance()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_Instance* temp = statement_.instance_;
    statement_.instance_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_Instance& FirrtlPB_Statement::_internal_instance() const {
  return _internal_has_instance()
      ? *statement_.instance_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_Instance*>(&::firrtl::_FirrtlPB_Statement_Instance_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_Instance& FirrtlPB_Statement::instance() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.instance)
  return _internal_instance();
}
inline ::firrtl::FirrtlPB_Statement_Instance* FirrtlPB_Statement::_internal_mutable_instance() {
  if (!_internal_has_instance()) {
    clear_statement();
    set_has_instance();
    statement_.instance_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Instance >(
        GetArenaNoVirtual());
  }
  return statement_.instance_;
}
inline ::firrtl::FirrtlPB_Statement_Instance* FirrtlPB_Statement::mutable_instance() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.instance)
  return _internal_mutable_instance();
}

// .firrtl.FirrtlPB.Statement.Node node = 6;
inline bool FirrtlPB_Statement::_internal_has_node() const {
  return statement_case() == kNode;
}
inline bool FirrtlPB_Statement::has_node() const {
  return _internal_has_node();
}
inline void FirrtlPB_Statement::set_has_node() {
  _oneof_case_[0] = kNode;
}
inline void FirrtlPB_Statement::clear_node() {
  if (_internal_has_node()) {
    delete statement_.node_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_Node* FirrtlPB_Statement::release_node() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.node)
  if (_internal_has_node()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_Node* temp = statement_.node_;
    statement_.node_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_Node& FirrtlPB_Statement::_internal_node() const {
  return _internal_has_node()
      ? *statement_.node_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_Node*>(&::firrtl::_FirrtlPB_Statement_Node_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_Node& FirrtlPB_Statement::node() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.node)
  return _internal_node();
}
inline ::firrtl::FirrtlPB_Statement_Node* FirrtlPB_Statement::_internal_mutable_node() {
  if (!_internal_has_node()) {
    clear_statement();
    set_has_node();
    statement_.node_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Node >(
        GetArenaNoVirtual());
  }
  return statement_.node_;
}
inline ::firrtl::FirrtlPB_Statement_Node* FirrtlPB_Statement::mutable_node() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.node)
  return _internal_mutable_node();
}

// .firrtl.FirrtlPB.Statement.When when = 7;
inline bool FirrtlPB_Statement::_internal_has_when() const {
  return statement_case() == kWhen;
}
inline bool FirrtlPB_Statement::has_when() const {
  return _internal_has_when();
}
inline void FirrtlPB_Statement::set_has_when() {
  _oneof_case_[0] = kWhen;
}
inline void FirrtlPB_Statement::clear_when() {
  if (_internal_has_when()) {
    delete statement_.when_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_When* FirrtlPB_Statement::release_when() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.when)
  if (_internal_has_when()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_When* temp = statement_.when_;
    statement_.when_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_When& FirrtlPB_Statement::_internal_when() const {
  return _internal_has_when()
      ? *statement_.when_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_When*>(&::firrtl::_FirrtlPB_Statement_When_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_When& FirrtlPB_Statement::when() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.when)
  return _internal_when();
}
inline ::firrtl::FirrtlPB_Statement_When* FirrtlPB_Statement::_internal_mutable_when() {
  if (!_internal_has_when()) {
    clear_statement();
    set_has_when();
    statement_.when_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_When >(
        GetArenaNoVirtual());
  }
  return statement_.when_;
}
inline ::firrtl::FirrtlPB_Statement_When* FirrtlPB_Statement::mutable_when() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.when)
  return _internal_mutable_when();
}

// .firrtl.FirrtlPB.Statement.Stop stop = 8;
inline bool FirrtlPB_Statement::_internal_has_stop() const {
  return statement_case() == kStop;
}
inline bool FirrtlPB_Statement::has_stop() const {
  return _internal_has_stop();
}
inline void FirrtlPB_Statement::set_has_stop() {
  _oneof_case_[0] = kStop;
}
inline void FirrtlPB_Statement::clear_stop() {
  if (_internal_has_stop()) {
    delete statement_.stop_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_Stop* FirrtlPB_Statement::release_stop() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.stop)
  if (_internal_has_stop()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_Stop* temp = statement_.stop_;
    statement_.stop_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_Stop& FirrtlPB_Statement::_internal_stop() const {
  return _internal_has_stop()
      ? *statement_.stop_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_Stop*>(&::firrtl::_FirrtlPB_Statement_Stop_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_Stop& FirrtlPB_Statement::stop() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.stop)
  return _internal_stop();
}
inline ::firrtl::FirrtlPB_Statement_Stop* FirrtlPB_Statement::_internal_mutable_stop() {
  if (!_internal_has_stop()) {
    clear_statement();
    set_has_stop();
    statement_.stop_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Stop >(
        GetArenaNoVirtual());
  }
  return statement_.stop_;
}
inline ::firrtl::FirrtlPB_Statement_Stop* FirrtlPB_Statement::mutable_stop() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.stop)
  return _internal_mutable_stop();
}

// .firrtl.FirrtlPB.Statement.Printf printf = 10;
inline bool FirrtlPB_Statement::_internal_has_printf() const {
  return statement_case() == kPrintf;
}
inline bool FirrtlPB_Statement::has_printf() const {
  return _internal_has_printf();
}
inline void FirrtlPB_Statement::set_has_printf() {
  _oneof_case_[0] = kPrintf;
}
inline void FirrtlPB_Statement::clear_printf() {
  if (_internal_has_printf()) {
    delete statement_.printf_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_Printf* FirrtlPB_Statement::release_printf() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.printf)
  if (_internal_has_printf()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_Printf* temp = statement_.printf_;
    statement_.printf_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_Printf& FirrtlPB_Statement::_internal_printf() const {
  return _internal_has_printf()
      ? *statement_.printf_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_Printf*>(&::firrtl::_FirrtlPB_Statement_Printf_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_Printf& FirrtlPB_Statement::printf() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.printf)
  return _internal_printf();
}
inline ::firrtl::FirrtlPB_Statement_Printf* FirrtlPB_Statement::_internal_mutable_printf() {
  if (!_internal_has_printf()) {
    clear_statement();
    set_has_printf();
    statement_.printf_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Printf >(
        GetArenaNoVirtual());
  }
  return statement_.printf_;
}
inline ::firrtl::FirrtlPB_Statement_Printf* FirrtlPB_Statement::mutable_printf() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.printf)
  return _internal_mutable_printf();
}

// .firrtl.FirrtlPB.Statement.Skip skip = 14;
inline bool FirrtlPB_Statement::_internal_has_skip() const {
  return statement_case() == kSkip;
}
inline bool FirrtlPB_Statement::has_skip() const {
  return _internal_has_skip();
}
inline void FirrtlPB_Statement::set_has_skip() {
  _oneof_case_[0] = kSkip;
}
inline void FirrtlPB_Statement::clear_skip() {
  if (_internal_has_skip()) {
    delete statement_.skip_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_Skip* FirrtlPB_Statement::release_skip() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.skip)
  if (_internal_has_skip()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_Skip* temp = statement_.skip_;
    statement_.skip_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_Skip& FirrtlPB_Statement::_internal_skip() const {
  return _internal_has_skip()
      ? *statement_.skip_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_Skip*>(&::firrtl::_FirrtlPB_Statement_Skip_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_Skip& FirrtlPB_Statement::skip() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.skip)
  return _internal_skip();
}
inline ::firrtl::FirrtlPB_Statement_Skip* FirrtlPB_Statement::_internal_mutable_skip() {
  if (!_internal_has_skip()) {
    clear_statement();
    set_has_skip();
    statement_.skip_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Skip >(
        GetArenaNoVirtual());
  }
  return statement_.skip_;
}
inline ::firrtl::FirrtlPB_Statement_Skip* FirrtlPB_Statement::mutable_skip() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.skip)
  return _internal_mutable_skip();
}

// .firrtl.FirrtlPB.Statement.Connect connect = 15;
inline bool FirrtlPB_Statement::_internal_has_connect() const {
  return statement_case() == kConnect;
}
inline bool FirrtlPB_Statement::has_connect() const {
  return _internal_has_connect();
}
inline void FirrtlPB_Statement::set_has_connect() {
  _oneof_case_[0] = kConnect;
}
inline void FirrtlPB_Statement::clear_connect() {
  if (_internal_has_connect()) {
    delete statement_.connect_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_Connect* FirrtlPB_Statement::release_connect() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.connect)
  if (_internal_has_connect()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_Connect* temp = statement_.connect_;
    statement_.connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_Connect& FirrtlPB_Statement::_internal_connect() const {
  return _internal_has_connect()
      ? *statement_.connect_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_Connect*>(&::firrtl::_FirrtlPB_Statement_Connect_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_Connect& FirrtlPB_Statement::connect() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.connect)
  return _internal_connect();
}
inline ::firrtl::FirrtlPB_Statement_Connect* FirrtlPB_Statement::_internal_mutable_connect() {
  if (!_internal_has_connect()) {
    clear_statement();
    set_has_connect();
    statement_.connect_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Connect >(
        GetArenaNoVirtual());
  }
  return statement_.connect_;
}
inline ::firrtl::FirrtlPB_Statement_Connect* FirrtlPB_Statement::mutable_connect() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.connect)
  return _internal_mutable_connect();
}

// .firrtl.FirrtlPB.Statement.PartialConnect partial_connect = 16;
inline bool FirrtlPB_Statement::_internal_has_partial_connect() const {
  return statement_case() == kPartialConnect;
}
inline bool FirrtlPB_Statement::has_partial_connect() const {
  return _internal_has_partial_connect();
}
inline void FirrtlPB_Statement::set_has_partial_connect() {
  _oneof_case_[0] = kPartialConnect;
}
inline void FirrtlPB_Statement::clear_partial_connect() {
  if (_internal_has_partial_connect()) {
    delete statement_.partial_connect_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_PartialConnect* FirrtlPB_Statement::release_partial_connect() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.partial_connect)
  if (_internal_has_partial_connect()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_PartialConnect* temp = statement_.partial_connect_;
    statement_.partial_connect_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_PartialConnect& FirrtlPB_Statement::_internal_partial_connect() const {
  return _internal_has_partial_connect()
      ? *statement_.partial_connect_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_PartialConnect*>(&::firrtl::_FirrtlPB_Statement_PartialConnect_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_PartialConnect& FirrtlPB_Statement::partial_connect() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.partial_connect)
  return _internal_partial_connect();
}
inline ::firrtl::FirrtlPB_Statement_PartialConnect* FirrtlPB_Statement::_internal_mutable_partial_connect() {
  if (!_internal_has_partial_connect()) {
    clear_statement();
    set_has_partial_connect();
    statement_.partial_connect_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_PartialConnect >(
        GetArenaNoVirtual());
  }
  return statement_.partial_connect_;
}
inline ::firrtl::FirrtlPB_Statement_PartialConnect* FirrtlPB_Statement::mutable_partial_connect() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.partial_connect)
  return _internal_mutable_partial_connect();
}

// .firrtl.FirrtlPB.Statement.IsInvalid is_invalid = 17;
inline bool FirrtlPB_Statement::_internal_has_is_invalid() const {
  return statement_case() == kIsInvalid;
}
inline bool FirrtlPB_Statement::has_is_invalid() const {
  return _internal_has_is_invalid();
}
inline void FirrtlPB_Statement::set_has_is_invalid() {
  _oneof_case_[0] = kIsInvalid;
}
inline void FirrtlPB_Statement::clear_is_invalid() {
  if (_internal_has_is_invalid()) {
    delete statement_.is_invalid_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_IsInvalid* FirrtlPB_Statement::release_is_invalid() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.is_invalid)
  if (_internal_has_is_invalid()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_IsInvalid* temp = statement_.is_invalid_;
    statement_.is_invalid_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_IsInvalid& FirrtlPB_Statement::_internal_is_invalid() const {
  return _internal_has_is_invalid()
      ? *statement_.is_invalid_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_IsInvalid*>(&::firrtl::_FirrtlPB_Statement_IsInvalid_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_IsInvalid& FirrtlPB_Statement::is_invalid() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.is_invalid)
  return _internal_is_invalid();
}
inline ::firrtl::FirrtlPB_Statement_IsInvalid* FirrtlPB_Statement::_internal_mutable_is_invalid() {
  if (!_internal_has_is_invalid()) {
    clear_statement();
    set_has_is_invalid();
    statement_.is_invalid_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_IsInvalid >(
        GetArenaNoVirtual());
  }
  return statement_.is_invalid_;
}
inline ::firrtl::FirrtlPB_Statement_IsInvalid* FirrtlPB_Statement::mutable_is_invalid() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.is_invalid)
  return _internal_mutable_is_invalid();
}

// .firrtl.FirrtlPB.Statement.MemoryPort memory_port = 18;
inline bool FirrtlPB_Statement::_internal_has_memory_port() const {
  return statement_case() == kMemoryPort;
}
inline bool FirrtlPB_Statement::has_memory_port() const {
  return _internal_has_memory_port();
}
inline void FirrtlPB_Statement::set_has_memory_port() {
  _oneof_case_[0] = kMemoryPort;
}
inline void FirrtlPB_Statement::clear_memory_port() {
  if (_internal_has_memory_port()) {
    delete statement_.memory_port_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_MemoryPort* FirrtlPB_Statement::release_memory_port() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.memory_port)
  if (_internal_has_memory_port()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_MemoryPort* temp = statement_.memory_port_;
    statement_.memory_port_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_MemoryPort& FirrtlPB_Statement::_internal_memory_port() const {
  return _internal_has_memory_port()
      ? *statement_.memory_port_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_MemoryPort*>(&::firrtl::_FirrtlPB_Statement_MemoryPort_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_MemoryPort& FirrtlPB_Statement::memory_port() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.memory_port)
  return _internal_memory_port();
}
inline ::firrtl::FirrtlPB_Statement_MemoryPort* FirrtlPB_Statement::_internal_mutable_memory_port() {
  if (!_internal_has_memory_port()) {
    clear_statement();
    set_has_memory_port();
    statement_.memory_port_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_MemoryPort >(
        GetArenaNoVirtual());
  }
  return statement_.memory_port_;
}
inline ::firrtl::FirrtlPB_Statement_MemoryPort* FirrtlPB_Statement::mutable_memory_port() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.memory_port)
  return _internal_mutable_memory_port();
}

// .firrtl.FirrtlPB.Statement.Attach attach = 20;
inline bool FirrtlPB_Statement::_internal_has_attach() const {
  return statement_case() == kAttach;
}
inline bool FirrtlPB_Statement::has_attach() const {
  return _internal_has_attach();
}
inline void FirrtlPB_Statement::set_has_attach() {
  _oneof_case_[0] = kAttach;
}
inline void FirrtlPB_Statement::clear_attach() {
  if (_internal_has_attach()) {
    delete statement_.attach_;
    clear_has_statement();
  }
}
inline ::firrtl::FirrtlPB_Statement_Attach* FirrtlPB_Statement::release_attach() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.attach)
  if (_internal_has_attach()) {
    clear_has_statement();
      ::firrtl::FirrtlPB_Statement_Attach* temp = statement_.attach_;
    statement_.attach_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Statement_Attach& FirrtlPB_Statement::_internal_attach() const {
  return _internal_has_attach()
      ? *statement_.attach_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Statement_Attach*>(&::firrtl::_FirrtlPB_Statement_Attach_default_instance_);
}
inline const ::firrtl::FirrtlPB_Statement_Attach& FirrtlPB_Statement::attach() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.attach)
  return _internal_attach();
}
inline ::firrtl::FirrtlPB_Statement_Attach* FirrtlPB_Statement::_internal_mutable_attach() {
  if (!_internal_has_attach()) {
    clear_statement();
    set_has_attach();
    statement_.attach_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Attach >(
        GetArenaNoVirtual());
  }
  return statement_.attach_;
}
inline ::firrtl::FirrtlPB_Statement_Attach* FirrtlPB_Statement::mutable_attach() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.attach)
  return _internal_mutable_attach();
}

// .firrtl.FirrtlPB.SourceInfo source_info = 19;
inline bool FirrtlPB_Statement::_internal_has_source_info() const {
  return this != internal_default_instance() && source_info_ != nullptr;
}
inline bool FirrtlPB_Statement::has_source_info() const {
  return _internal_has_source_info();
}
inline void FirrtlPB_Statement::clear_source_info() {
  if (GetArenaNoVirtual() == nullptr && source_info_ != nullptr) {
    delete source_info_;
  }
  source_info_ = nullptr;
}
inline const ::firrtl::FirrtlPB_SourceInfo& FirrtlPB_Statement::_internal_source_info() const {
  const ::firrtl::FirrtlPB_SourceInfo* p = source_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_SourceInfo*>(
      &::firrtl::_FirrtlPB_SourceInfo_default_instance_);
}
inline const ::firrtl::FirrtlPB_SourceInfo& FirrtlPB_Statement::source_info() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Statement.source_info)
  return _internal_source_info();
}
inline ::firrtl::FirrtlPB_SourceInfo* FirrtlPB_Statement::release_source_info() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Statement.source_info)
  
  ::firrtl::FirrtlPB_SourceInfo* temp = source_info_;
  source_info_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_SourceInfo* FirrtlPB_Statement::_internal_mutable_source_info() {
  
  if (source_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_SourceInfo>(GetArenaNoVirtual());
    source_info_ = p;
  }
  return source_info_;
}
inline ::firrtl::FirrtlPB_SourceInfo* FirrtlPB_Statement::mutable_source_info() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Statement.source_info)
  return _internal_mutable_source_info();
}
inline void FirrtlPB_Statement::set_allocated_source_info(::firrtl::FirrtlPB_SourceInfo* source_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_info_;
  }
  if (source_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source_info, submessage_arena);
    }
    
  } else {
    
  }
  source_info_ = source_info;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.source_info)
}

inline bool FirrtlPB_Statement::has_statement() const {
  return statement_case() != STATEMENT_NOT_SET;
}
inline void FirrtlPB_Statement::clear_has_statement() {
  _oneof_case_[0] = STATEMENT_NOT_SET;
}
inline FirrtlPB_Statement::StatementCase FirrtlPB_Statement::statement_case() const {
  return FirrtlPB_Statement::StatementCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FirrtlPB_Width

// uint32 value = 1;
inline void FirrtlPB_Width::clear_value() {
  value_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_Width::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_Width::value() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Width.value)
  return _internal_value();
}
inline void FirrtlPB_Width::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  value_ = value;
}
inline void FirrtlPB_Width::set_value(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Width.value)
}

// -------------------------------------------------------------------

// FirrtlPB_Type_UIntType

// .firrtl.FirrtlPB.Width width = 1;
inline bool FirrtlPB_Type_UIntType::_internal_has_width() const {
  return this != internal_default_instance() && width_ != nullptr;
}
inline bool FirrtlPB_Type_UIntType::has_width() const {
  return _internal_has_width();
}
inline void FirrtlPB_Type_UIntType::clear_width() {
  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Type_UIntType::_internal_width() const {
  const ::firrtl::FirrtlPB_Width* p = width_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Width*>(
      &::firrtl::_FirrtlPB_Width_default_instance_);
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Type_UIntType::width() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.UIntType.width)
  return _internal_width();
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_UIntType::release_width() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.UIntType.width)
  
  ::firrtl::FirrtlPB_Width* temp = width_;
  width_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_UIntType::_internal_mutable_width() {
  
  if (width_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Width>(GetArenaNoVirtual());
    width_ = p;
  }
  return width_;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_UIntType::mutable_width() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.UIntType.width)
  return _internal_mutable_width();
}
inline void FirrtlPB_Type_UIntType::set_allocated_width(::firrtl::FirrtlPB_Width* width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete width_;
  }
  if (width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, width, submessage_arena);
    }
    
  } else {
    
  }
  width_ = width;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.UIntType.width)
}

// -------------------------------------------------------------------

// FirrtlPB_Type_SIntType

// .firrtl.FirrtlPB.Width width = 1;
inline bool FirrtlPB_Type_SIntType::_internal_has_width() const {
  return this != internal_default_instance() && width_ != nullptr;
}
inline bool FirrtlPB_Type_SIntType::has_width() const {
  return _internal_has_width();
}
inline void FirrtlPB_Type_SIntType::clear_width() {
  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Type_SIntType::_internal_width() const {
  const ::firrtl::FirrtlPB_Width* p = width_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Width*>(
      &::firrtl::_FirrtlPB_Width_default_instance_);
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Type_SIntType::width() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.SIntType.width)
  return _internal_width();
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_SIntType::release_width() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.SIntType.width)
  
  ::firrtl::FirrtlPB_Width* temp = width_;
  width_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_SIntType::_internal_mutable_width() {
  
  if (width_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Width>(GetArenaNoVirtual());
    width_ = p;
  }
  return width_;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_SIntType::mutable_width() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.SIntType.width)
  return _internal_mutable_width();
}
inline void FirrtlPB_Type_SIntType::set_allocated_width(::firrtl::FirrtlPB_Width* width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete width_;
  }
  if (width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, width, submessage_arena);
    }
    
  } else {
    
  }
  width_ = width;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.SIntType.width)
}

// -------------------------------------------------------------------

// FirrtlPB_Type_ClockType

// -------------------------------------------------------------------

// FirrtlPB_Type_AsyncResetType

// -------------------------------------------------------------------

// FirrtlPB_Type_ResetType

// -------------------------------------------------------------------

// FirrtlPB_Type_BundleType_Field

// bool is_flipped = 1;
inline void FirrtlPB_Type_BundleType_Field::clear_is_flipped() {
  is_flipped_ = false;
}
inline bool FirrtlPB_Type_BundleType_Field::_internal_is_flipped() const {
  return is_flipped_;
}
inline bool FirrtlPB_Type_BundleType_Field::is_flipped() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.BundleType.Field.is_flipped)
  return _internal_is_flipped();
}
inline void FirrtlPB_Type_BundleType_Field::_internal_set_is_flipped(bool value) {
  
  is_flipped_ = value;
}
inline void FirrtlPB_Type_BundleType_Field::set_is_flipped(bool value) {
  _internal_set_is_flipped(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Type.BundleType.Field.is_flipped)
}

// string id = 2;
inline void FirrtlPB_Type_BundleType_Field::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Type_BundleType_Field::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.BundleType.Field.id)
  return _internal_id();
}
inline void FirrtlPB_Type_BundleType_Field::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Type.BundleType.Field.id)
}
inline std::string* FirrtlPB_Type_BundleType_Field::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.BundleType.Field.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Type_BundleType_Field::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Type_BundleType_Field::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Type_BundleType_Field::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Type.BundleType.Field.id)
}
inline void FirrtlPB_Type_BundleType_Field::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Type.BundleType.Field.id)
}
inline void FirrtlPB_Type_BundleType_Field::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Type.BundleType.Field.id)
}
inline std::string* FirrtlPB_Type_BundleType_Field::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Type_BundleType_Field::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.BundleType.Field.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Type_BundleType_Field::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.BundleType.Field.id)
}

// .firrtl.FirrtlPB.Type type = 3;
inline bool FirrtlPB_Type_BundleType_Field::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool FirrtlPB_Type_BundleType_Field::has_type() const {
  return _internal_has_type();
}
inline void FirrtlPB_Type_BundleType_Field::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Type_BundleType_Field::_internal_type() const {
  const ::firrtl::FirrtlPB_Type* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Type*>(
      &::firrtl::_FirrtlPB_Type_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Type_BundleType_Field::type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.BundleType.Field.type)
  return _internal_type();
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Type_BundleType_Field::release_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.BundleType.Field.type)
  
  ::firrtl::FirrtlPB_Type* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Type_BundleType_Field::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Type>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Type_BundleType_Field::mutable_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.BundleType.Field.type)
  return _internal_mutable_type();
}
inline void FirrtlPB_Type_BundleType_Field::set_allocated_type(::firrtl::FirrtlPB_Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.BundleType.Field.type)
}

// -------------------------------------------------------------------

// FirrtlPB_Type_BundleType

// repeated .firrtl.FirrtlPB.Type.BundleType.Field field = 1;
inline int FirrtlPB_Type_BundleType::_internal_field_size() const {
  return field_.size();
}
inline int FirrtlPB_Type_BundleType::field_size() const {
  return _internal_field_size();
}
inline void FirrtlPB_Type_BundleType::clear_field() {
  field_.Clear();
}
inline ::firrtl::FirrtlPB_Type_BundleType_Field* FirrtlPB_Type_BundleType::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.BundleType.field)
  return field_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Type_BundleType_Field >*
FirrtlPB_Type_BundleType::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Type.BundleType.field)
  return &field_;
}
inline const ::firrtl::FirrtlPB_Type_BundleType_Field& FirrtlPB_Type_BundleType::_internal_field(int index) const {
  return field_.Get(index);
}
inline const ::firrtl::FirrtlPB_Type_BundleType_Field& FirrtlPB_Type_BundleType::field(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.BundleType.field)
  return _internal_field(index);
}
inline ::firrtl::FirrtlPB_Type_BundleType_Field* FirrtlPB_Type_BundleType::_internal_add_field() {
  return field_.Add();
}
inline ::firrtl::FirrtlPB_Type_BundleType_Field* FirrtlPB_Type_BundleType::add_field() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Type.BundleType.field)
  return _internal_add_field();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Type_BundleType_Field >&
FirrtlPB_Type_BundleType::field() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Type.BundleType.field)
  return field_;
}

// -------------------------------------------------------------------

// FirrtlPB_Type_VectorType

// .firrtl.FirrtlPB.Type type = 1;
inline bool FirrtlPB_Type_VectorType::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool FirrtlPB_Type_VectorType::has_type() const {
  return _internal_has_type();
}
inline void FirrtlPB_Type_VectorType::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Type_VectorType::_internal_type() const {
  const ::firrtl::FirrtlPB_Type* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Type*>(
      &::firrtl::_FirrtlPB_Type_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Type_VectorType::type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.VectorType.type)
  return _internal_type();
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Type_VectorType::release_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.VectorType.type)
  
  ::firrtl::FirrtlPB_Type* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Type_VectorType::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Type>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Type_VectorType::mutable_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.VectorType.type)
  return _internal_mutable_type();
}
inline void FirrtlPB_Type_VectorType::set_allocated_type(::firrtl::FirrtlPB_Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.VectorType.type)
}

// uint32 size = 2;
inline void FirrtlPB_Type_VectorType::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_Type_VectorType::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FirrtlPB_Type_VectorType::size() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.VectorType.size)
  return _internal_size();
}
inline void FirrtlPB_Type_VectorType::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void FirrtlPB_Type_VectorType::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Type.VectorType.size)
}

// -------------------------------------------------------------------

// FirrtlPB_Type_FixedType

// .firrtl.FirrtlPB.Width width = 1;
inline bool FirrtlPB_Type_FixedType::_internal_has_width() const {
  return this != internal_default_instance() && width_ != nullptr;
}
inline bool FirrtlPB_Type_FixedType::has_width() const {
  return _internal_has_width();
}
inline void FirrtlPB_Type_FixedType::clear_width() {
  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Type_FixedType::_internal_width() const {
  const ::firrtl::FirrtlPB_Width* p = width_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Width*>(
      &::firrtl::_FirrtlPB_Width_default_instance_);
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Type_FixedType::width() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.FixedType.width)
  return _internal_width();
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_FixedType::release_width() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.FixedType.width)
  
  ::firrtl::FirrtlPB_Width* temp = width_;
  width_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_FixedType::_internal_mutable_width() {
  
  if (width_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Width>(GetArenaNoVirtual());
    width_ = p;
  }
  return width_;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_FixedType::mutable_width() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.FixedType.width)
  return _internal_mutable_width();
}
inline void FirrtlPB_Type_FixedType::set_allocated_width(::firrtl::FirrtlPB_Width* width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete width_;
  }
  if (width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, width, submessage_arena);
    }
    
  } else {
    
  }
  width_ = width;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.FixedType.width)
}

// .firrtl.FirrtlPB.Width point = 2;
inline bool FirrtlPB_Type_FixedType::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool FirrtlPB_Type_FixedType::has_point() const {
  return _internal_has_point();
}
inline void FirrtlPB_Type_FixedType::clear_point() {
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Type_FixedType::_internal_point() const {
  const ::firrtl::FirrtlPB_Width* p = point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Width*>(
      &::firrtl::_FirrtlPB_Width_default_instance_);
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Type_FixedType::point() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.FixedType.point)
  return _internal_point();
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_FixedType::release_point() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.FixedType.point)
  
  ::firrtl::FirrtlPB_Width* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_FixedType::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Width>(GetArenaNoVirtual());
    point_ = p;
  }
  return point_;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_FixedType::mutable_point() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.FixedType.point)
  return _internal_mutable_point();
}
inline void FirrtlPB_Type_FixedType::set_allocated_point(::firrtl::FirrtlPB_Width* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.FixedType.point)
}

// -------------------------------------------------------------------

// FirrtlPB_Type_AnalogType

// .firrtl.FirrtlPB.Width width = 3;
inline bool FirrtlPB_Type_AnalogType::_internal_has_width() const {
  return this != internal_default_instance() && width_ != nullptr;
}
inline bool FirrtlPB_Type_AnalogType::has_width() const {
  return _internal_has_width();
}
inline void FirrtlPB_Type_AnalogType::clear_width() {
  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Type_AnalogType::_internal_width() const {
  const ::firrtl::FirrtlPB_Width* p = width_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Width*>(
      &::firrtl::_FirrtlPB_Width_default_instance_);
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Type_AnalogType::width() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.AnalogType.width)
  return _internal_width();
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_AnalogType::release_width() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.AnalogType.width)
  
  ::firrtl::FirrtlPB_Width* temp = width_;
  width_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_AnalogType::_internal_mutable_width() {
  
  if (width_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Width>(GetArenaNoVirtual());
    width_ = p;
  }
  return width_;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Type_AnalogType::mutable_width() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.AnalogType.width)
  return _internal_mutable_width();
}
inline void FirrtlPB_Type_AnalogType::set_allocated_width(::firrtl::FirrtlPB_Width* width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete width_;
  }
  if (width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, width, submessage_arena);
    }
    
  } else {
    
  }
  width_ = width;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.AnalogType.width)
}

// -------------------------------------------------------------------

// FirrtlPB_Type

// .firrtl.FirrtlPB.Type.UIntType uint_type = 2;
inline bool FirrtlPB_Type::_internal_has_uint_type() const {
  return type_case() == kUintType;
}
inline bool FirrtlPB_Type::has_uint_type() const {
  return _internal_has_uint_type();
}
inline void FirrtlPB_Type::set_has_uint_type() {
  _oneof_case_[0] = kUintType;
}
inline void FirrtlPB_Type::clear_uint_type() {
  if (_internal_has_uint_type()) {
    delete type_.uint_type_;
    clear_has_type();
  }
}
inline ::firrtl::FirrtlPB_Type_UIntType* FirrtlPB_Type::release_uint_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.uint_type)
  if (_internal_has_uint_type()) {
    clear_has_type();
      ::firrtl::FirrtlPB_Type_UIntType* temp = type_.uint_type_;
    type_.uint_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Type_UIntType& FirrtlPB_Type::_internal_uint_type() const {
  return _internal_has_uint_type()
      ? *type_.uint_type_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Type_UIntType*>(&::firrtl::_FirrtlPB_Type_UIntType_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type_UIntType& FirrtlPB_Type::uint_type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.uint_type)
  return _internal_uint_type();
}
inline ::firrtl::FirrtlPB_Type_UIntType* FirrtlPB_Type::_internal_mutable_uint_type() {
  if (!_internal_has_uint_type()) {
    clear_type();
    set_has_uint_type();
    type_.uint_type_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Type_UIntType >(
        GetArenaNoVirtual());
  }
  return type_.uint_type_;
}
inline ::firrtl::FirrtlPB_Type_UIntType* FirrtlPB_Type::mutable_uint_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.uint_type)
  return _internal_mutable_uint_type();
}

// .firrtl.FirrtlPB.Type.SIntType sint_type = 3;
inline bool FirrtlPB_Type::_internal_has_sint_type() const {
  return type_case() == kSintType;
}
inline bool FirrtlPB_Type::has_sint_type() const {
  return _internal_has_sint_type();
}
inline void FirrtlPB_Type::set_has_sint_type() {
  _oneof_case_[0] = kSintType;
}
inline void FirrtlPB_Type::clear_sint_type() {
  if (_internal_has_sint_type()) {
    delete type_.sint_type_;
    clear_has_type();
  }
}
inline ::firrtl::FirrtlPB_Type_SIntType* FirrtlPB_Type::release_sint_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.sint_type)
  if (_internal_has_sint_type()) {
    clear_has_type();
      ::firrtl::FirrtlPB_Type_SIntType* temp = type_.sint_type_;
    type_.sint_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Type_SIntType& FirrtlPB_Type::_internal_sint_type() const {
  return _internal_has_sint_type()
      ? *type_.sint_type_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Type_SIntType*>(&::firrtl::_FirrtlPB_Type_SIntType_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type_SIntType& FirrtlPB_Type::sint_type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.sint_type)
  return _internal_sint_type();
}
inline ::firrtl::FirrtlPB_Type_SIntType* FirrtlPB_Type::_internal_mutable_sint_type() {
  if (!_internal_has_sint_type()) {
    clear_type();
    set_has_sint_type();
    type_.sint_type_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Type_SIntType >(
        GetArenaNoVirtual());
  }
  return type_.sint_type_;
}
inline ::firrtl::FirrtlPB_Type_SIntType* FirrtlPB_Type::mutable_sint_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.sint_type)
  return _internal_mutable_sint_type();
}

// .firrtl.FirrtlPB.Type.ClockType clock_type = 4;
inline bool FirrtlPB_Type::_internal_has_clock_type() const {
  return type_case() == kClockType;
}
inline bool FirrtlPB_Type::has_clock_type() const {
  return _internal_has_clock_type();
}
inline void FirrtlPB_Type::set_has_clock_type() {
  _oneof_case_[0] = kClockType;
}
inline void FirrtlPB_Type::clear_clock_type() {
  if (_internal_has_clock_type()) {
    delete type_.clock_type_;
    clear_has_type();
  }
}
inline ::firrtl::FirrtlPB_Type_ClockType* FirrtlPB_Type::release_clock_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.clock_type)
  if (_internal_has_clock_type()) {
    clear_has_type();
      ::firrtl::FirrtlPB_Type_ClockType* temp = type_.clock_type_;
    type_.clock_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Type_ClockType& FirrtlPB_Type::_internal_clock_type() const {
  return _internal_has_clock_type()
      ? *type_.clock_type_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Type_ClockType*>(&::firrtl::_FirrtlPB_Type_ClockType_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type_ClockType& FirrtlPB_Type::clock_type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.clock_type)
  return _internal_clock_type();
}
inline ::firrtl::FirrtlPB_Type_ClockType* FirrtlPB_Type::_internal_mutable_clock_type() {
  if (!_internal_has_clock_type()) {
    clear_type();
    set_has_clock_type();
    type_.clock_type_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Type_ClockType >(
        GetArenaNoVirtual());
  }
  return type_.clock_type_;
}
inline ::firrtl::FirrtlPB_Type_ClockType* FirrtlPB_Type::mutable_clock_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.clock_type)
  return _internal_mutable_clock_type();
}

// .firrtl.FirrtlPB.Type.BundleType bundle_type = 5;
inline bool FirrtlPB_Type::_internal_has_bundle_type() const {
  return type_case() == kBundleType;
}
inline bool FirrtlPB_Type::has_bundle_type() const {
  return _internal_has_bundle_type();
}
inline void FirrtlPB_Type::set_has_bundle_type() {
  _oneof_case_[0] = kBundleType;
}
inline void FirrtlPB_Type::clear_bundle_type() {
  if (_internal_has_bundle_type()) {
    delete type_.bundle_type_;
    clear_has_type();
  }
}
inline ::firrtl::FirrtlPB_Type_BundleType* FirrtlPB_Type::release_bundle_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.bundle_type)
  if (_internal_has_bundle_type()) {
    clear_has_type();
      ::firrtl::FirrtlPB_Type_BundleType* temp = type_.bundle_type_;
    type_.bundle_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Type_BundleType& FirrtlPB_Type::_internal_bundle_type() const {
  return _internal_has_bundle_type()
      ? *type_.bundle_type_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Type_BundleType*>(&::firrtl::_FirrtlPB_Type_BundleType_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type_BundleType& FirrtlPB_Type::bundle_type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.bundle_type)
  return _internal_bundle_type();
}
inline ::firrtl::FirrtlPB_Type_BundleType* FirrtlPB_Type::_internal_mutable_bundle_type() {
  if (!_internal_has_bundle_type()) {
    clear_type();
    set_has_bundle_type();
    type_.bundle_type_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Type_BundleType >(
        GetArenaNoVirtual());
  }
  return type_.bundle_type_;
}
inline ::firrtl::FirrtlPB_Type_BundleType* FirrtlPB_Type::mutable_bundle_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.bundle_type)
  return _internal_mutable_bundle_type();
}

// .firrtl.FirrtlPB.Type.VectorType vector_type = 6;
inline bool FirrtlPB_Type::_internal_has_vector_type() const {
  return type_case() == kVectorType;
}
inline bool FirrtlPB_Type::has_vector_type() const {
  return _internal_has_vector_type();
}
inline void FirrtlPB_Type::set_has_vector_type() {
  _oneof_case_[0] = kVectorType;
}
inline void FirrtlPB_Type::clear_vector_type() {
  if (_internal_has_vector_type()) {
    delete type_.vector_type_;
    clear_has_type();
  }
}
inline ::firrtl::FirrtlPB_Type_VectorType* FirrtlPB_Type::release_vector_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.vector_type)
  if (_internal_has_vector_type()) {
    clear_has_type();
      ::firrtl::FirrtlPB_Type_VectorType* temp = type_.vector_type_;
    type_.vector_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Type_VectorType& FirrtlPB_Type::_internal_vector_type() const {
  return _internal_has_vector_type()
      ? *type_.vector_type_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Type_VectorType*>(&::firrtl::_FirrtlPB_Type_VectorType_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type_VectorType& FirrtlPB_Type::vector_type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.vector_type)
  return _internal_vector_type();
}
inline ::firrtl::FirrtlPB_Type_VectorType* FirrtlPB_Type::_internal_mutable_vector_type() {
  if (!_internal_has_vector_type()) {
    clear_type();
    set_has_vector_type();
    type_.vector_type_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Type_VectorType >(
        GetArenaNoVirtual());
  }
  return type_.vector_type_;
}
inline ::firrtl::FirrtlPB_Type_VectorType* FirrtlPB_Type::mutable_vector_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.vector_type)
  return _internal_mutable_vector_type();
}

// .firrtl.FirrtlPB.Type.FixedType fixed_type = 7;
inline bool FirrtlPB_Type::_internal_has_fixed_type() const {
  return type_case() == kFixedType;
}
inline bool FirrtlPB_Type::has_fixed_type() const {
  return _internal_has_fixed_type();
}
inline void FirrtlPB_Type::set_has_fixed_type() {
  _oneof_case_[0] = kFixedType;
}
inline void FirrtlPB_Type::clear_fixed_type() {
  if (_internal_has_fixed_type()) {
    delete type_.fixed_type_;
    clear_has_type();
  }
}
inline ::firrtl::FirrtlPB_Type_FixedType* FirrtlPB_Type::release_fixed_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.fixed_type)
  if (_internal_has_fixed_type()) {
    clear_has_type();
      ::firrtl::FirrtlPB_Type_FixedType* temp = type_.fixed_type_;
    type_.fixed_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Type_FixedType& FirrtlPB_Type::_internal_fixed_type() const {
  return _internal_has_fixed_type()
      ? *type_.fixed_type_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Type_FixedType*>(&::firrtl::_FirrtlPB_Type_FixedType_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type_FixedType& FirrtlPB_Type::fixed_type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.fixed_type)
  return _internal_fixed_type();
}
inline ::firrtl::FirrtlPB_Type_FixedType* FirrtlPB_Type::_internal_mutable_fixed_type() {
  if (!_internal_has_fixed_type()) {
    clear_type();
    set_has_fixed_type();
    type_.fixed_type_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Type_FixedType >(
        GetArenaNoVirtual());
  }
  return type_.fixed_type_;
}
inline ::firrtl::FirrtlPB_Type_FixedType* FirrtlPB_Type::mutable_fixed_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.fixed_type)
  return _internal_mutable_fixed_type();
}

// .firrtl.FirrtlPB.Type.AnalogType analog_type = 8;
inline bool FirrtlPB_Type::_internal_has_analog_type() const {
  return type_case() == kAnalogType;
}
inline bool FirrtlPB_Type::has_analog_type() const {
  return _internal_has_analog_type();
}
inline void FirrtlPB_Type::set_has_analog_type() {
  _oneof_case_[0] = kAnalogType;
}
inline void FirrtlPB_Type::clear_analog_type() {
  if (_internal_has_analog_type()) {
    delete type_.analog_type_;
    clear_has_type();
  }
}
inline ::firrtl::FirrtlPB_Type_AnalogType* FirrtlPB_Type::release_analog_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.analog_type)
  if (_internal_has_analog_type()) {
    clear_has_type();
      ::firrtl::FirrtlPB_Type_AnalogType* temp = type_.analog_type_;
    type_.analog_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Type_AnalogType& FirrtlPB_Type::_internal_analog_type() const {
  return _internal_has_analog_type()
      ? *type_.analog_type_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Type_AnalogType*>(&::firrtl::_FirrtlPB_Type_AnalogType_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type_AnalogType& FirrtlPB_Type::analog_type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.analog_type)
  return _internal_analog_type();
}
inline ::firrtl::FirrtlPB_Type_AnalogType* FirrtlPB_Type::_internal_mutable_analog_type() {
  if (!_internal_has_analog_type()) {
    clear_type();
    set_has_analog_type();
    type_.analog_type_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Type_AnalogType >(
        GetArenaNoVirtual());
  }
  return type_.analog_type_;
}
inline ::firrtl::FirrtlPB_Type_AnalogType* FirrtlPB_Type::mutable_analog_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.analog_type)
  return _internal_mutable_analog_type();
}

// .firrtl.FirrtlPB.Type.AsyncResetType async_reset_type = 9;
inline bool FirrtlPB_Type::_internal_has_async_reset_type() const {
  return type_case() == kAsyncResetType;
}
inline bool FirrtlPB_Type::has_async_reset_type() const {
  return _internal_has_async_reset_type();
}
inline void FirrtlPB_Type::set_has_async_reset_type() {
  _oneof_case_[0] = kAsyncResetType;
}
inline void FirrtlPB_Type::clear_async_reset_type() {
  if (_internal_has_async_reset_type()) {
    delete type_.async_reset_type_;
    clear_has_type();
  }
}
inline ::firrtl::FirrtlPB_Type_AsyncResetType* FirrtlPB_Type::release_async_reset_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.async_reset_type)
  if (_internal_has_async_reset_type()) {
    clear_has_type();
      ::firrtl::FirrtlPB_Type_AsyncResetType* temp = type_.async_reset_type_;
    type_.async_reset_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Type_AsyncResetType& FirrtlPB_Type::_internal_async_reset_type() const {
  return _internal_has_async_reset_type()
      ? *type_.async_reset_type_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Type_AsyncResetType*>(&::firrtl::_FirrtlPB_Type_AsyncResetType_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type_AsyncResetType& FirrtlPB_Type::async_reset_type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.async_reset_type)
  return _internal_async_reset_type();
}
inline ::firrtl::FirrtlPB_Type_AsyncResetType* FirrtlPB_Type::_internal_mutable_async_reset_type() {
  if (!_internal_has_async_reset_type()) {
    clear_type();
    set_has_async_reset_type();
    type_.async_reset_type_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Type_AsyncResetType >(
        GetArenaNoVirtual());
  }
  return type_.async_reset_type_;
}
inline ::firrtl::FirrtlPB_Type_AsyncResetType* FirrtlPB_Type::mutable_async_reset_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.async_reset_type)
  return _internal_mutable_async_reset_type();
}

// .firrtl.FirrtlPB.Type.ResetType reset_type = 10;
inline bool FirrtlPB_Type::_internal_has_reset_type() const {
  return type_case() == kResetType;
}
inline bool FirrtlPB_Type::has_reset_type() const {
  return _internal_has_reset_type();
}
inline void FirrtlPB_Type::set_has_reset_type() {
  _oneof_case_[0] = kResetType;
}
inline void FirrtlPB_Type::clear_reset_type() {
  if (_internal_has_reset_type()) {
    delete type_.reset_type_;
    clear_has_type();
  }
}
inline ::firrtl::FirrtlPB_Type_ResetType* FirrtlPB_Type::release_reset_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Type.reset_type)
  if (_internal_has_reset_type()) {
    clear_has_type();
      ::firrtl::FirrtlPB_Type_ResetType* temp = type_.reset_type_;
    type_.reset_type_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Type_ResetType& FirrtlPB_Type::_internal_reset_type() const {
  return _internal_has_reset_type()
      ? *type_.reset_type_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Type_ResetType*>(&::firrtl::_FirrtlPB_Type_ResetType_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type_ResetType& FirrtlPB_Type::reset_type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Type.reset_type)
  return _internal_reset_type();
}
inline ::firrtl::FirrtlPB_Type_ResetType* FirrtlPB_Type::_internal_mutable_reset_type() {
  if (!_internal_has_reset_type()) {
    clear_type();
    set_has_reset_type();
    type_.reset_type_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Type_ResetType >(
        GetArenaNoVirtual());
  }
  return type_.reset_type_;
}
inline ::firrtl::FirrtlPB_Type_ResetType* FirrtlPB_Type::mutable_reset_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Type.reset_type)
  return _internal_mutable_reset_type();
}

inline bool FirrtlPB_Type::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void FirrtlPB_Type::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline FirrtlPB_Type::TypeCase FirrtlPB_Type::type_case() const {
  return FirrtlPB_Type::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FirrtlPB_Port

// string id = 1;
inline void FirrtlPB_Port::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Port::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Port.id)
  return _internal_id();
}
inline void FirrtlPB_Port::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Port.id)
}
inline std::string* FirrtlPB_Port::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Port.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Port::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Port::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Port::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Port.id)
}
inline void FirrtlPB_Port::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Port.id)
}
inline void FirrtlPB_Port::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Port.id)
}
inline std::string* FirrtlPB_Port::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Port::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Port.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Port::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Port.id)
}

// .firrtl.FirrtlPB.Port.Direction direction = 2;
inline void FirrtlPB_Port::clear_direction() {
  direction_ = 0;
}
inline ::firrtl::FirrtlPB_Port_Direction FirrtlPB_Port::_internal_direction() const {
  return static_cast< ::firrtl::FirrtlPB_Port_Direction >(direction_);
}
inline ::firrtl::FirrtlPB_Port_Direction FirrtlPB_Port::direction() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Port.direction)
  return _internal_direction();
}
inline void FirrtlPB_Port::_internal_set_direction(::firrtl::FirrtlPB_Port_Direction value) {
  
  direction_ = value;
}
inline void FirrtlPB_Port::set_direction(::firrtl::FirrtlPB_Port_Direction value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Port.direction)
}

// .firrtl.FirrtlPB.Type type = 3;
inline bool FirrtlPB_Port::_internal_has_type() const {
  return this != internal_default_instance() && type_ != nullptr;
}
inline bool FirrtlPB_Port::has_type() const {
  return _internal_has_type();
}
inline void FirrtlPB_Port::clear_type() {
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Port::_internal_type() const {
  const ::firrtl::FirrtlPB_Type* p = type_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Type*>(
      &::firrtl::_FirrtlPB_Type_default_instance_);
}
inline const ::firrtl::FirrtlPB_Type& FirrtlPB_Port::type() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Port.type)
  return _internal_type();
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Port::release_type() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Port.type)
  
  ::firrtl::FirrtlPB_Type* temp = type_;
  type_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Port::_internal_mutable_type() {
  
  if (type_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Type>(GetArenaNoVirtual());
    type_ = p;
  }
  return type_;
}
inline ::firrtl::FirrtlPB_Type* FirrtlPB_Port::mutable_type() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Port.type)
  return _internal_mutable_type();
}
inline void FirrtlPB_Port::set_allocated_type(::firrtl::FirrtlPB_Type* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete type_;
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    
  } else {
    
  }
  type_ = type;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Port.type)
}

// -------------------------------------------------------------------

// FirrtlPB_Expression_Reference

// string id = 1;
inline void FirrtlPB_Expression_Reference::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Expression_Reference::id() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.Reference.id)
  return _internal_id();
}
inline void FirrtlPB_Expression_Reference::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Expression.Reference.id)
}
inline std::string* FirrtlPB_Expression_Reference::mutable_id() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.Reference.id)
  return _internal_mutable_id();
}
inline const std::string& FirrtlPB_Expression_Reference::_internal_id() const {
  return id_.GetNoArena();
}
inline void FirrtlPB_Expression_Reference::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Expression_Reference::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Expression.Reference.id)
}
inline void FirrtlPB_Expression_Reference::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Expression.Reference.id)
}
inline void FirrtlPB_Expression_Reference::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Expression.Reference.id)
}
inline std::string* FirrtlPB_Expression_Reference::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Expression_Reference::release_id() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.Reference.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Expression_Reference::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.Reference.id)
}

// -------------------------------------------------------------------

// FirrtlPB_Expression_IntegerLiteral

// string value = 1;
inline void FirrtlPB_Expression_IntegerLiteral::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Expression_IntegerLiteral::value() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.IntegerLiteral.value)
  return _internal_value();
}
inline void FirrtlPB_Expression_IntegerLiteral::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Expression.IntegerLiteral.value)
}
inline std::string* FirrtlPB_Expression_IntegerLiteral::mutable_value() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.IntegerLiteral.value)
  return _internal_mutable_value();
}
inline const std::string& FirrtlPB_Expression_IntegerLiteral::_internal_value() const {
  return value_.GetNoArena();
}
inline void FirrtlPB_Expression_IntegerLiteral::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Expression_IntegerLiteral::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Expression.IntegerLiteral.value)
}
inline void FirrtlPB_Expression_IntegerLiteral::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Expression.IntegerLiteral.value)
}
inline void FirrtlPB_Expression_IntegerLiteral::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Expression.IntegerLiteral.value)
}
inline std::string* FirrtlPB_Expression_IntegerLiteral::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Expression_IntegerLiteral::release_value() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.IntegerLiteral.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Expression_IntegerLiteral::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.IntegerLiteral.value)
}

// -------------------------------------------------------------------

// FirrtlPB_Expression_UIntLiteral

// .firrtl.FirrtlPB.Expression.IntegerLiteral value = 1;
inline bool FirrtlPB_Expression_UIntLiteral::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool FirrtlPB_Expression_UIntLiteral::has_value() const {
  return _internal_has_value();
}
inline void FirrtlPB_Expression_UIntLiteral::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression_IntegerLiteral& FirrtlPB_Expression_UIntLiteral::_internal_value() const {
  const ::firrtl::FirrtlPB_Expression_IntegerLiteral* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression_IntegerLiteral*>(
      &::firrtl::_FirrtlPB_Expression_IntegerLiteral_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_IntegerLiteral& FirrtlPB_Expression_UIntLiteral::value() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.UIntLiteral.value)
  return _internal_value();
}
inline ::firrtl::FirrtlPB_Expression_IntegerLiteral* FirrtlPB_Expression_UIntLiteral::release_value() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.UIntLiteral.value)
  
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression_IntegerLiteral* FirrtlPB_Expression_UIntLiteral::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression_IntegerLiteral>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::firrtl::FirrtlPB_Expression_IntegerLiteral* FirrtlPB_Expression_UIntLiteral::mutable_value() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.UIntLiteral.value)
  return _internal_mutable_value();
}
inline void FirrtlPB_Expression_UIntLiteral::set_allocated_value(::firrtl::FirrtlPB_Expression_IntegerLiteral* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.UIntLiteral.value)
}

// .firrtl.FirrtlPB.Width width = 2;
inline bool FirrtlPB_Expression_UIntLiteral::_internal_has_width() const {
  return this != internal_default_instance() && width_ != nullptr;
}
inline bool FirrtlPB_Expression_UIntLiteral::has_width() const {
  return _internal_has_width();
}
inline void FirrtlPB_Expression_UIntLiteral::clear_width() {
  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Expression_UIntLiteral::_internal_width() const {
  const ::firrtl::FirrtlPB_Width* p = width_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Width*>(
      &::firrtl::_FirrtlPB_Width_default_instance_);
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Expression_UIntLiteral::width() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.UIntLiteral.width)
  return _internal_width();
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Expression_UIntLiteral::release_width() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.UIntLiteral.width)
  
  ::firrtl::FirrtlPB_Width* temp = width_;
  width_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Expression_UIntLiteral::_internal_mutable_width() {
  
  if (width_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Width>(GetArenaNoVirtual());
    width_ = p;
  }
  return width_;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Expression_UIntLiteral::mutable_width() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.UIntLiteral.width)
  return _internal_mutable_width();
}
inline void FirrtlPB_Expression_UIntLiteral::set_allocated_width(::firrtl::FirrtlPB_Width* width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete width_;
  }
  if (width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, width, submessage_arena);
    }
    
  } else {
    
  }
  width_ = width;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.UIntLiteral.width)
}

// -------------------------------------------------------------------

// FirrtlPB_Expression_SIntLiteral

// .firrtl.FirrtlPB.Expression.IntegerLiteral value = 1;
inline bool FirrtlPB_Expression_SIntLiteral::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool FirrtlPB_Expression_SIntLiteral::has_value() const {
  return _internal_has_value();
}
inline void FirrtlPB_Expression_SIntLiteral::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression_IntegerLiteral& FirrtlPB_Expression_SIntLiteral::_internal_value() const {
  const ::firrtl::FirrtlPB_Expression_IntegerLiteral* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression_IntegerLiteral*>(
      &::firrtl::_FirrtlPB_Expression_IntegerLiteral_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_IntegerLiteral& FirrtlPB_Expression_SIntLiteral::value() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.SIntLiteral.value)
  return _internal_value();
}
inline ::firrtl::FirrtlPB_Expression_IntegerLiteral* FirrtlPB_Expression_SIntLiteral::release_value() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.SIntLiteral.value)
  
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression_IntegerLiteral* FirrtlPB_Expression_SIntLiteral::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression_IntegerLiteral>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::firrtl::FirrtlPB_Expression_IntegerLiteral* FirrtlPB_Expression_SIntLiteral::mutable_value() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.SIntLiteral.value)
  return _internal_mutable_value();
}
inline void FirrtlPB_Expression_SIntLiteral::set_allocated_value(::firrtl::FirrtlPB_Expression_IntegerLiteral* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.SIntLiteral.value)
}

// .firrtl.FirrtlPB.Width width = 2;
inline bool FirrtlPB_Expression_SIntLiteral::_internal_has_width() const {
  return this != internal_default_instance() && width_ != nullptr;
}
inline bool FirrtlPB_Expression_SIntLiteral::has_width() const {
  return _internal_has_width();
}
inline void FirrtlPB_Expression_SIntLiteral::clear_width() {
  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Expression_SIntLiteral::_internal_width() const {
  const ::firrtl::FirrtlPB_Width* p = width_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Width*>(
      &::firrtl::_FirrtlPB_Width_default_instance_);
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Expression_SIntLiteral::width() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.SIntLiteral.width)
  return _internal_width();
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Expression_SIntLiteral::release_width() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.SIntLiteral.width)
  
  ::firrtl::FirrtlPB_Width* temp = width_;
  width_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Expression_SIntLiteral::_internal_mutable_width() {
  
  if (width_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Width>(GetArenaNoVirtual());
    width_ = p;
  }
  return width_;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Expression_SIntLiteral::mutable_width() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.SIntLiteral.width)
  return _internal_mutable_width();
}
inline void FirrtlPB_Expression_SIntLiteral::set_allocated_width(::firrtl::FirrtlPB_Width* width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete width_;
  }
  if (width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, width, submessage_arena);
    }
    
  } else {
    
  }
  width_ = width;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.SIntLiteral.width)
}

// -------------------------------------------------------------------

// FirrtlPB_Expression_FixedLiteral

// .firrtl.FirrtlPB.BigInt value = 1;
inline bool FirrtlPB_Expression_FixedLiteral::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool FirrtlPB_Expression_FixedLiteral::has_value() const {
  return _internal_has_value();
}
inline void FirrtlPB_Expression_FixedLiteral::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::firrtl::FirrtlPB_BigInt& FirrtlPB_Expression_FixedLiteral::_internal_value() const {
  const ::firrtl::FirrtlPB_BigInt* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_BigInt*>(
      &::firrtl::_FirrtlPB_BigInt_default_instance_);
}
inline const ::firrtl::FirrtlPB_BigInt& FirrtlPB_Expression_FixedLiteral::value() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.FixedLiteral.value)
  return _internal_value();
}
inline ::firrtl::FirrtlPB_BigInt* FirrtlPB_Expression_FixedLiteral::release_value() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.FixedLiteral.value)
  
  ::firrtl::FirrtlPB_BigInt* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_BigInt* FirrtlPB_Expression_FixedLiteral::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_BigInt>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::firrtl::FirrtlPB_BigInt* FirrtlPB_Expression_FixedLiteral::mutable_value() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.FixedLiteral.value)
  return _internal_mutable_value();
}
inline void FirrtlPB_Expression_FixedLiteral::set_allocated_value(::firrtl::FirrtlPB_BigInt* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.FixedLiteral.value)
}

// .firrtl.FirrtlPB.Width width = 2;
inline bool FirrtlPB_Expression_FixedLiteral::_internal_has_width() const {
  return this != internal_default_instance() && width_ != nullptr;
}
inline bool FirrtlPB_Expression_FixedLiteral::has_width() const {
  return _internal_has_width();
}
inline void FirrtlPB_Expression_FixedLiteral::clear_width() {
  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Expression_FixedLiteral::_internal_width() const {
  const ::firrtl::FirrtlPB_Width* p = width_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Width*>(
      &::firrtl::_FirrtlPB_Width_default_instance_);
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Expression_FixedLiteral::width() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.FixedLiteral.width)
  return _internal_width();
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Expression_FixedLiteral::release_width() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.FixedLiteral.width)
  
  ::firrtl::FirrtlPB_Width* temp = width_;
  width_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Expression_FixedLiteral::_internal_mutable_width() {
  
  if (width_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Width>(GetArenaNoVirtual());
    width_ = p;
  }
  return width_;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Expression_FixedLiteral::mutable_width() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.FixedLiteral.width)
  return _internal_mutable_width();
}
inline void FirrtlPB_Expression_FixedLiteral::set_allocated_width(::firrtl::FirrtlPB_Width* width) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete width_;
  }
  if (width) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      width = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, width, submessage_arena);
    }
    
  } else {
    
  }
  width_ = width;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.FixedLiteral.width)
}

// .firrtl.FirrtlPB.Width point = 3;
inline bool FirrtlPB_Expression_FixedLiteral::_internal_has_point() const {
  return this != internal_default_instance() && point_ != nullptr;
}
inline bool FirrtlPB_Expression_FixedLiteral::has_point() const {
  return _internal_has_point();
}
inline void FirrtlPB_Expression_FixedLiteral::clear_point() {
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Expression_FixedLiteral::_internal_point() const {
  const ::firrtl::FirrtlPB_Width* p = point_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Width*>(
      &::firrtl::_FirrtlPB_Width_default_instance_);
}
inline const ::firrtl::FirrtlPB_Width& FirrtlPB_Expression_FixedLiteral::point() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.FixedLiteral.point)
  return _internal_point();
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Expression_FixedLiteral::release_point() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.FixedLiteral.point)
  
  ::firrtl::FirrtlPB_Width* temp = point_;
  point_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Expression_FixedLiteral::_internal_mutable_point() {
  
  if (point_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Width>(GetArenaNoVirtual());
    point_ = p;
  }
  return point_;
}
inline ::firrtl::FirrtlPB_Width* FirrtlPB_Expression_FixedLiteral::mutable_point() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.FixedLiteral.point)
  return _internal_mutable_point();
}
inline void FirrtlPB_Expression_FixedLiteral::set_allocated_point(::firrtl::FirrtlPB_Width* point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete point_;
  }
  if (point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, point, submessage_arena);
    }
    
  } else {
    
  }
  point_ = point;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.FixedLiteral.point)
}

// -------------------------------------------------------------------

// FirrtlPB_Expression_ValidIf

// .firrtl.FirrtlPB.Expression condition = 1;
inline bool FirrtlPB_Expression_ValidIf::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool FirrtlPB_Expression_ValidIf::has_condition() const {
  return _internal_has_condition();
}
inline void FirrtlPB_Expression_ValidIf::clear_condition() {
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_ValidIf::_internal_condition() const {
  const ::firrtl::FirrtlPB_Expression* p = condition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_ValidIf::condition() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.ValidIf.condition)
  return _internal_condition();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_ValidIf::release_condition() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.ValidIf.condition)
  
  ::firrtl::FirrtlPB_Expression* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_ValidIf::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    condition_ = p;
  }
  return condition_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_ValidIf::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.ValidIf.condition)
  return _internal_mutable_condition();
}
inline void FirrtlPB_Expression_ValidIf::set_allocated_condition(::firrtl::FirrtlPB_Expression* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.ValidIf.condition)
}

// .firrtl.FirrtlPB.Expression value = 2;
inline bool FirrtlPB_Expression_ValidIf::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool FirrtlPB_Expression_ValidIf::has_value() const {
  return _internal_has_value();
}
inline void FirrtlPB_Expression_ValidIf::clear_value() {
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_ValidIf::_internal_value() const {
  const ::firrtl::FirrtlPB_Expression* p = value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_ValidIf::value() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.ValidIf.value)
  return _internal_value();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_ValidIf::release_value() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.ValidIf.value)
  
  ::firrtl::FirrtlPB_Expression* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_ValidIf::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    value_ = p;
  }
  return value_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_ValidIf::mutable_value() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.ValidIf.value)
  return _internal_mutable_value();
}
inline void FirrtlPB_Expression_ValidIf::set_allocated_value(::firrtl::FirrtlPB_Expression* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete value_;
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.ValidIf.value)
}

// -------------------------------------------------------------------

// FirrtlPB_Expression_Mux

// .firrtl.FirrtlPB.Expression condition = 1;
inline bool FirrtlPB_Expression_Mux::_internal_has_condition() const {
  return this != internal_default_instance() && condition_ != nullptr;
}
inline bool FirrtlPB_Expression_Mux::has_condition() const {
  return _internal_has_condition();
}
inline void FirrtlPB_Expression_Mux::clear_condition() {
  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_Mux::_internal_condition() const {
  const ::firrtl::FirrtlPB_Expression* p = condition_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_Mux::condition() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.Mux.condition)
  return _internal_condition();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_Mux::release_condition() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.Mux.condition)
  
  ::firrtl::FirrtlPB_Expression* temp = condition_;
  condition_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_Mux::_internal_mutable_condition() {
  
  if (condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    condition_ = p;
  }
  return condition_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_Mux::mutable_condition() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.Mux.condition)
  return _internal_mutable_condition();
}
inline void FirrtlPB_Expression_Mux::set_allocated_condition(::firrtl::FirrtlPB_Expression* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete condition_;
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    
  } else {
    
  }
  condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.Mux.condition)
}

// .firrtl.FirrtlPB.Expression t_value = 2;
inline bool FirrtlPB_Expression_Mux::_internal_has_t_value() const {
  return this != internal_default_instance() && t_value_ != nullptr;
}
inline bool FirrtlPB_Expression_Mux::has_t_value() const {
  return _internal_has_t_value();
}
inline void FirrtlPB_Expression_Mux::clear_t_value() {
  if (GetArenaNoVirtual() == nullptr && t_value_ != nullptr) {
    delete t_value_;
  }
  t_value_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_Mux::_internal_t_value() const {
  const ::firrtl::FirrtlPB_Expression* p = t_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_Mux::t_value() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.Mux.t_value)
  return _internal_t_value();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_Mux::release_t_value() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.Mux.t_value)
  
  ::firrtl::FirrtlPB_Expression* temp = t_value_;
  t_value_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_Mux::_internal_mutable_t_value() {
  
  if (t_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    t_value_ = p;
  }
  return t_value_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_Mux::mutable_t_value() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.Mux.t_value)
  return _internal_mutable_t_value();
}
inline void FirrtlPB_Expression_Mux::set_allocated_t_value(::firrtl::FirrtlPB_Expression* t_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete t_value_;
  }
  if (t_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      t_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, t_value, submessage_arena);
    }
    
  } else {
    
  }
  t_value_ = t_value;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.Mux.t_value)
}

// .firrtl.FirrtlPB.Expression f_value = 3;
inline bool FirrtlPB_Expression_Mux::_internal_has_f_value() const {
  return this != internal_default_instance() && f_value_ != nullptr;
}
inline bool FirrtlPB_Expression_Mux::has_f_value() const {
  return _internal_has_f_value();
}
inline void FirrtlPB_Expression_Mux::clear_f_value() {
  if (GetArenaNoVirtual() == nullptr && f_value_ != nullptr) {
    delete f_value_;
  }
  f_value_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_Mux::_internal_f_value() const {
  const ::firrtl::FirrtlPB_Expression* p = f_value_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_Mux::f_value() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.Mux.f_value)
  return _internal_f_value();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_Mux::release_f_value() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.Mux.f_value)
  
  ::firrtl::FirrtlPB_Expression* temp = f_value_;
  f_value_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_Mux::_internal_mutable_f_value() {
  
  if (f_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    f_value_ = p;
  }
  return f_value_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_Mux::mutable_f_value() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.Mux.f_value)
  return _internal_mutable_f_value();
}
inline void FirrtlPB_Expression_Mux::set_allocated_f_value(::firrtl::FirrtlPB_Expression* f_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete f_value_;
  }
  if (f_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      f_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, f_value, submessage_arena);
    }
    
  } else {
    
  }
  f_value_ = f_value;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.Mux.f_value)
}

// -------------------------------------------------------------------

// FirrtlPB_Expression_SubField

// .firrtl.FirrtlPB.Expression expression = 1;
inline bool FirrtlPB_Expression_SubField::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool FirrtlPB_Expression_SubField::has_expression() const {
  return _internal_has_expression();
}
inline void FirrtlPB_Expression_SubField::clear_expression() {
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_SubField::_internal_expression() const {
  const ::firrtl::FirrtlPB_Expression* p = expression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_SubField::expression() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.SubField.expression)
  return _internal_expression();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_SubField::release_expression() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.SubField.expression)
  
  ::firrtl::FirrtlPB_Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_SubField::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    expression_ = p;
  }
  return expression_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_SubField::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.SubField.expression)
  return _internal_mutable_expression();
}
inline void FirrtlPB_Expression_SubField::set_allocated_expression(::firrtl::FirrtlPB_Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.SubField.expression)
}

// string field = 2;
inline void FirrtlPB_Expression_SubField::clear_field() {
  field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& FirrtlPB_Expression_SubField::field() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.SubField.field)
  return _internal_field();
}
inline void FirrtlPB_Expression_SubField::set_field(const std::string& value) {
  _internal_set_field(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Expression.SubField.field)
}
inline std::string* FirrtlPB_Expression_SubField::mutable_field() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.SubField.field)
  return _internal_mutable_field();
}
inline const std::string& FirrtlPB_Expression_SubField::_internal_field() const {
  return field_.GetNoArena();
}
inline void FirrtlPB_Expression_SubField::_internal_set_field(const std::string& value) {
  
  field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void FirrtlPB_Expression_SubField::set_field(std::string&& value) {
  
  field_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:firrtl.FirrtlPB.Expression.SubField.field)
}
inline void FirrtlPB_Expression_SubField::set_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:firrtl.FirrtlPB.Expression.SubField.field)
}
inline void FirrtlPB_Expression_SubField::set_field(const char* value, size_t size) {
  
  field_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:firrtl.FirrtlPB.Expression.SubField.field)
}
inline std::string* FirrtlPB_Expression_SubField::_internal_mutable_field() {
  
  return field_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* FirrtlPB_Expression_SubField::release_field() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.SubField.field)
  
  return field_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void FirrtlPB_Expression_SubField::set_allocated_field(std::string* field) {
  if (field != nullptr) {
    
  } else {
    
  }
  field_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.SubField.field)
}

// -------------------------------------------------------------------

// FirrtlPB_Expression_SubIndex

// .firrtl.FirrtlPB.Expression expression = 1;
inline bool FirrtlPB_Expression_SubIndex::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool FirrtlPB_Expression_SubIndex::has_expression() const {
  return _internal_has_expression();
}
inline void FirrtlPB_Expression_SubIndex::clear_expression() {
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_SubIndex::_internal_expression() const {
  const ::firrtl::FirrtlPB_Expression* p = expression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_SubIndex::expression() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.SubIndex.expression)
  return _internal_expression();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_SubIndex::release_expression() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.SubIndex.expression)
  
  ::firrtl::FirrtlPB_Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_SubIndex::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    expression_ = p;
  }
  return expression_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_SubIndex::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.SubIndex.expression)
  return _internal_mutable_expression();
}
inline void FirrtlPB_Expression_SubIndex::set_allocated_expression(::firrtl::FirrtlPB_Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.SubIndex.expression)
}

// .firrtl.FirrtlPB.Expression.IntegerLiteral index = 2;
inline bool FirrtlPB_Expression_SubIndex::_internal_has_index() const {
  return this != internal_default_instance() && index_ != nullptr;
}
inline bool FirrtlPB_Expression_SubIndex::has_index() const {
  return _internal_has_index();
}
inline void FirrtlPB_Expression_SubIndex::clear_index() {
  if (GetArenaNoVirtual() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression_IntegerLiteral& FirrtlPB_Expression_SubIndex::_internal_index() const {
  const ::firrtl::FirrtlPB_Expression_IntegerLiteral* p = index_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression_IntegerLiteral*>(
      &::firrtl::_FirrtlPB_Expression_IntegerLiteral_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_IntegerLiteral& FirrtlPB_Expression_SubIndex::index() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.SubIndex.index)
  return _internal_index();
}
inline ::firrtl::FirrtlPB_Expression_IntegerLiteral* FirrtlPB_Expression_SubIndex::release_index() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.SubIndex.index)
  
  ::firrtl::FirrtlPB_Expression_IntegerLiteral* temp = index_;
  index_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression_IntegerLiteral* FirrtlPB_Expression_SubIndex::_internal_mutable_index() {
  
  if (index_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression_IntegerLiteral>(GetArenaNoVirtual());
    index_ = p;
  }
  return index_;
}
inline ::firrtl::FirrtlPB_Expression_IntegerLiteral* FirrtlPB_Expression_SubIndex::mutable_index() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.SubIndex.index)
  return _internal_mutable_index();
}
inline void FirrtlPB_Expression_SubIndex::set_allocated_index(::firrtl::FirrtlPB_Expression_IntegerLiteral* index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete index_;
  }
  if (index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    
  } else {
    
  }
  index_ = index;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.SubIndex.index)
}

// -------------------------------------------------------------------

// FirrtlPB_Expression_SubAccess

// .firrtl.FirrtlPB.Expression expression = 1;
inline bool FirrtlPB_Expression_SubAccess::_internal_has_expression() const {
  return this != internal_default_instance() && expression_ != nullptr;
}
inline bool FirrtlPB_Expression_SubAccess::has_expression() const {
  return _internal_has_expression();
}
inline void FirrtlPB_Expression_SubAccess::clear_expression() {
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_SubAccess::_internal_expression() const {
  const ::firrtl::FirrtlPB_Expression* p = expression_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_SubAccess::expression() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.SubAccess.expression)
  return _internal_expression();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_SubAccess::release_expression() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.SubAccess.expression)
  
  ::firrtl::FirrtlPB_Expression* temp = expression_;
  expression_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_SubAccess::_internal_mutable_expression() {
  
  if (expression_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    expression_ = p;
  }
  return expression_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_SubAccess::mutable_expression() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.SubAccess.expression)
  return _internal_mutable_expression();
}
inline void FirrtlPB_Expression_SubAccess::set_allocated_expression(::firrtl::FirrtlPB_Expression* expression) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete expression_;
  }
  if (expression) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      expression = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expression, submessage_arena);
    }
    
  } else {
    
  }
  expression_ = expression;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.SubAccess.expression)
}

// .firrtl.FirrtlPB.Expression index = 2;
inline bool FirrtlPB_Expression_SubAccess::_internal_has_index() const {
  return this != internal_default_instance() && index_ != nullptr;
}
inline bool FirrtlPB_Expression_SubAccess::has_index() const {
  return _internal_has_index();
}
inline void FirrtlPB_Expression_SubAccess::clear_index() {
  if (GetArenaNoVirtual() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_SubAccess::_internal_index() const {
  const ::firrtl::FirrtlPB_Expression* p = index_;
  return p != nullptr ? *p : *reinterpret_cast<const ::firrtl::FirrtlPB_Expression*>(
      &::firrtl::_FirrtlPB_Expression_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_SubAccess::index() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.SubAccess.index)
  return _internal_index();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_SubAccess::release_index() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.SubAccess.index)
  
  ::firrtl::FirrtlPB_Expression* temp = index_;
  index_ = nullptr;
  return temp;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_SubAccess::_internal_mutable_index() {
  
  if (index_ == nullptr) {
    auto* p = CreateMaybeMessage<::firrtl::FirrtlPB_Expression>(GetArenaNoVirtual());
    index_ = p;
  }
  return index_;
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_SubAccess::mutable_index() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.SubAccess.index)
  return _internal_mutable_index();
}
inline void FirrtlPB_Expression_SubAccess::set_allocated_index(::firrtl::FirrtlPB_Expression* index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete index_;
  }
  if (index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, index, submessage_arena);
    }
    
  } else {
    
  }
  index_ = index;
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.SubAccess.index)
}

// -------------------------------------------------------------------

// FirrtlPB_Expression_PrimOp

// .firrtl.FirrtlPB.Expression.PrimOp.Op op = 1;
inline void FirrtlPB_Expression_PrimOp::clear_op() {
  op_ = 0;
}
inline ::firrtl::FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::_internal_op() const {
  return static_cast< ::firrtl::FirrtlPB_Expression_PrimOp_Op >(op_);
}
inline ::firrtl::FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::op() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.PrimOp.op)
  return _internal_op();
}
inline void FirrtlPB_Expression_PrimOp::_internal_set_op(::firrtl::FirrtlPB_Expression_PrimOp_Op value) {
  
  op_ = value;
}
inline void FirrtlPB_Expression_PrimOp::set_op(::firrtl::FirrtlPB_Expression_PrimOp_Op value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:firrtl.FirrtlPB.Expression.PrimOp.op)
}

// repeated .firrtl.FirrtlPB.Expression arg = 2;
inline int FirrtlPB_Expression_PrimOp::_internal_arg_size() const {
  return arg_.size();
}
inline int FirrtlPB_Expression_PrimOp::arg_size() const {
  return _internal_arg_size();
}
inline void FirrtlPB_Expression_PrimOp::clear_arg() {
  arg_.Clear();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_PrimOp::mutable_arg(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.PrimOp.arg)
  return arg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression >*
FirrtlPB_Expression_PrimOp::mutable_arg() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Expression.PrimOp.arg)
  return &arg_;
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_PrimOp::_internal_arg(int index) const {
  return arg_.Get(index);
}
inline const ::firrtl::FirrtlPB_Expression& FirrtlPB_Expression_PrimOp::arg(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.PrimOp.arg)
  return _internal_arg(index);
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_PrimOp::_internal_add_arg() {
  return arg_.Add();
}
inline ::firrtl::FirrtlPB_Expression* FirrtlPB_Expression_PrimOp::add_arg() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Expression.PrimOp.arg)
  return _internal_add_arg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression >&
FirrtlPB_Expression_PrimOp::arg() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Expression.PrimOp.arg)
  return arg_;
}

// repeated .firrtl.FirrtlPB.Expression.IntegerLiteral const = 3;
inline int FirrtlPB_Expression_PrimOp::_internal_const__size() const {
  return const__.size();
}
inline int FirrtlPB_Expression_PrimOp::const__size() const {
  return _internal_const__size();
}
inline void FirrtlPB_Expression_PrimOp::clear_const_() {
  const__.Clear();
}
inline ::firrtl::FirrtlPB_Expression_IntegerLiteral* FirrtlPB_Expression_PrimOp::mutable_const_(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.PrimOp.const)
  return const__.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression_IntegerLiteral >*
FirrtlPB_Expression_PrimOp::mutable_const_() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.Expression.PrimOp.const)
  return &const__;
}
inline const ::firrtl::FirrtlPB_Expression_IntegerLiteral& FirrtlPB_Expression_PrimOp::_internal_const_(int index) const {
  return const__.Get(index);
}
inline const ::firrtl::FirrtlPB_Expression_IntegerLiteral& FirrtlPB_Expression_PrimOp::const_(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.PrimOp.const)
  return _internal_const_(index);
}
inline ::firrtl::FirrtlPB_Expression_IntegerLiteral* FirrtlPB_Expression_PrimOp::_internal_add_const_() {
  return const__.Add();
}
inline ::firrtl::FirrtlPB_Expression_IntegerLiteral* FirrtlPB_Expression_PrimOp::add_const_() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.Expression.PrimOp.const)
  return _internal_add_const_();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Expression_IntegerLiteral >&
FirrtlPB_Expression_PrimOp::const_() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.Expression.PrimOp.const)
  return const__;
}

// -------------------------------------------------------------------

// FirrtlPB_Expression

// .firrtl.FirrtlPB.Expression.Reference reference = 1;
inline bool FirrtlPB_Expression::_internal_has_reference() const {
  return expression_case() == kReference;
}
inline bool FirrtlPB_Expression::has_reference() const {
  return _internal_has_reference();
}
inline void FirrtlPB_Expression::set_has_reference() {
  _oneof_case_[0] = kReference;
}
inline void FirrtlPB_Expression::clear_reference() {
  if (_internal_has_reference()) {
    delete expression_.reference_;
    clear_has_expression();
  }
}
inline ::firrtl::FirrtlPB_Expression_Reference* FirrtlPB_Expression::release_reference() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.reference)
  if (_internal_has_reference()) {
    clear_has_expression();
      ::firrtl::FirrtlPB_Expression_Reference* temp = expression_.reference_;
    expression_.reference_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Expression_Reference& FirrtlPB_Expression::_internal_reference() const {
  return _internal_has_reference()
      ? *expression_.reference_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Expression_Reference*>(&::firrtl::_FirrtlPB_Expression_Reference_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_Reference& FirrtlPB_Expression::reference() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.reference)
  return _internal_reference();
}
inline ::firrtl::FirrtlPB_Expression_Reference* FirrtlPB_Expression::_internal_mutable_reference() {
  if (!_internal_has_reference()) {
    clear_expression();
    set_has_reference();
    expression_.reference_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_Reference >(
        GetArenaNoVirtual());
  }
  return expression_.reference_;
}
inline ::firrtl::FirrtlPB_Expression_Reference* FirrtlPB_Expression::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.reference)
  return _internal_mutable_reference();
}

// .firrtl.FirrtlPB.Expression.UIntLiteral uint_literal = 2;
inline bool FirrtlPB_Expression::_internal_has_uint_literal() const {
  return expression_case() == kUintLiteral;
}
inline bool FirrtlPB_Expression::has_uint_literal() const {
  return _internal_has_uint_literal();
}
inline void FirrtlPB_Expression::set_has_uint_literal() {
  _oneof_case_[0] = kUintLiteral;
}
inline void FirrtlPB_Expression::clear_uint_literal() {
  if (_internal_has_uint_literal()) {
    delete expression_.uint_literal_;
    clear_has_expression();
  }
}
inline ::firrtl::FirrtlPB_Expression_UIntLiteral* FirrtlPB_Expression::release_uint_literal() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.uint_literal)
  if (_internal_has_uint_literal()) {
    clear_has_expression();
      ::firrtl::FirrtlPB_Expression_UIntLiteral* temp = expression_.uint_literal_;
    expression_.uint_literal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Expression_UIntLiteral& FirrtlPB_Expression::_internal_uint_literal() const {
  return _internal_has_uint_literal()
      ? *expression_.uint_literal_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Expression_UIntLiteral*>(&::firrtl::_FirrtlPB_Expression_UIntLiteral_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_UIntLiteral& FirrtlPB_Expression::uint_literal() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.uint_literal)
  return _internal_uint_literal();
}
inline ::firrtl::FirrtlPB_Expression_UIntLiteral* FirrtlPB_Expression::_internal_mutable_uint_literal() {
  if (!_internal_has_uint_literal()) {
    clear_expression();
    set_has_uint_literal();
    expression_.uint_literal_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_UIntLiteral >(
        GetArenaNoVirtual());
  }
  return expression_.uint_literal_;
}
inline ::firrtl::FirrtlPB_Expression_UIntLiteral* FirrtlPB_Expression::mutable_uint_literal() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.uint_literal)
  return _internal_mutable_uint_literal();
}

// .firrtl.FirrtlPB.Expression.SIntLiteral sint_literal = 3;
inline bool FirrtlPB_Expression::_internal_has_sint_literal() const {
  return expression_case() == kSintLiteral;
}
inline bool FirrtlPB_Expression::has_sint_literal() const {
  return _internal_has_sint_literal();
}
inline void FirrtlPB_Expression::set_has_sint_literal() {
  _oneof_case_[0] = kSintLiteral;
}
inline void FirrtlPB_Expression::clear_sint_literal() {
  if (_internal_has_sint_literal()) {
    delete expression_.sint_literal_;
    clear_has_expression();
  }
}
inline ::firrtl::FirrtlPB_Expression_SIntLiteral* FirrtlPB_Expression::release_sint_literal() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.sint_literal)
  if (_internal_has_sint_literal()) {
    clear_has_expression();
      ::firrtl::FirrtlPB_Expression_SIntLiteral* temp = expression_.sint_literal_;
    expression_.sint_literal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Expression_SIntLiteral& FirrtlPB_Expression::_internal_sint_literal() const {
  return _internal_has_sint_literal()
      ? *expression_.sint_literal_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Expression_SIntLiteral*>(&::firrtl::_FirrtlPB_Expression_SIntLiteral_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_SIntLiteral& FirrtlPB_Expression::sint_literal() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.sint_literal)
  return _internal_sint_literal();
}
inline ::firrtl::FirrtlPB_Expression_SIntLiteral* FirrtlPB_Expression::_internal_mutable_sint_literal() {
  if (!_internal_has_sint_literal()) {
    clear_expression();
    set_has_sint_literal();
    expression_.sint_literal_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_SIntLiteral >(
        GetArenaNoVirtual());
  }
  return expression_.sint_literal_;
}
inline ::firrtl::FirrtlPB_Expression_SIntLiteral* FirrtlPB_Expression::mutable_sint_literal() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.sint_literal)
  return _internal_mutable_sint_literal();
}

// .firrtl.FirrtlPB.Expression.FixedLiteral fixed_literal = 11;
inline bool FirrtlPB_Expression::_internal_has_fixed_literal() const {
  return expression_case() == kFixedLiteral;
}
inline bool FirrtlPB_Expression::has_fixed_literal() const {
  return _internal_has_fixed_literal();
}
inline void FirrtlPB_Expression::set_has_fixed_literal() {
  _oneof_case_[0] = kFixedLiteral;
}
inline void FirrtlPB_Expression::clear_fixed_literal() {
  if (_internal_has_fixed_literal()) {
    delete expression_.fixed_literal_;
    clear_has_expression();
  }
}
inline ::firrtl::FirrtlPB_Expression_FixedLiteral* FirrtlPB_Expression::release_fixed_literal() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.fixed_literal)
  if (_internal_has_fixed_literal()) {
    clear_has_expression();
      ::firrtl::FirrtlPB_Expression_FixedLiteral* temp = expression_.fixed_literal_;
    expression_.fixed_literal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Expression_FixedLiteral& FirrtlPB_Expression::_internal_fixed_literal() const {
  return _internal_has_fixed_literal()
      ? *expression_.fixed_literal_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Expression_FixedLiteral*>(&::firrtl::_FirrtlPB_Expression_FixedLiteral_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_FixedLiteral& FirrtlPB_Expression::fixed_literal() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.fixed_literal)
  return _internal_fixed_literal();
}
inline ::firrtl::FirrtlPB_Expression_FixedLiteral* FirrtlPB_Expression::_internal_mutable_fixed_literal() {
  if (!_internal_has_fixed_literal()) {
    clear_expression();
    set_has_fixed_literal();
    expression_.fixed_literal_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_FixedLiteral >(
        GetArenaNoVirtual());
  }
  return expression_.fixed_literal_;
}
inline ::firrtl::FirrtlPB_Expression_FixedLiteral* FirrtlPB_Expression::mutable_fixed_literal() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.fixed_literal)
  return _internal_mutable_fixed_literal();
}

// .firrtl.FirrtlPB.Expression.ValidIf valid_if = 4;
inline bool FirrtlPB_Expression::_internal_has_valid_if() const {
  return expression_case() == kValidIf;
}
inline bool FirrtlPB_Expression::has_valid_if() const {
  return _internal_has_valid_if();
}
inline void FirrtlPB_Expression::set_has_valid_if() {
  _oneof_case_[0] = kValidIf;
}
inline void FirrtlPB_Expression::clear_valid_if() {
  if (_internal_has_valid_if()) {
    delete expression_.valid_if_;
    clear_has_expression();
  }
}
inline ::firrtl::FirrtlPB_Expression_ValidIf* FirrtlPB_Expression::release_valid_if() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.valid_if)
  if (_internal_has_valid_if()) {
    clear_has_expression();
      ::firrtl::FirrtlPB_Expression_ValidIf* temp = expression_.valid_if_;
    expression_.valid_if_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Expression_ValidIf& FirrtlPB_Expression::_internal_valid_if() const {
  return _internal_has_valid_if()
      ? *expression_.valid_if_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Expression_ValidIf*>(&::firrtl::_FirrtlPB_Expression_ValidIf_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_ValidIf& FirrtlPB_Expression::valid_if() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.valid_if)
  return _internal_valid_if();
}
inline ::firrtl::FirrtlPB_Expression_ValidIf* FirrtlPB_Expression::_internal_mutable_valid_if() {
  if (!_internal_has_valid_if()) {
    clear_expression();
    set_has_valid_if();
    expression_.valid_if_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_ValidIf >(
        GetArenaNoVirtual());
  }
  return expression_.valid_if_;
}
inline ::firrtl::FirrtlPB_Expression_ValidIf* FirrtlPB_Expression::mutable_valid_if() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.valid_if)
  return _internal_mutable_valid_if();
}

// .firrtl.FirrtlPB.Expression.Mux mux = 6;
inline bool FirrtlPB_Expression::_internal_has_mux() const {
  return expression_case() == kMux;
}
inline bool FirrtlPB_Expression::has_mux() const {
  return _internal_has_mux();
}
inline void FirrtlPB_Expression::set_has_mux() {
  _oneof_case_[0] = kMux;
}
inline void FirrtlPB_Expression::clear_mux() {
  if (_internal_has_mux()) {
    delete expression_.mux_;
    clear_has_expression();
  }
}
inline ::firrtl::FirrtlPB_Expression_Mux* FirrtlPB_Expression::release_mux() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.mux)
  if (_internal_has_mux()) {
    clear_has_expression();
      ::firrtl::FirrtlPB_Expression_Mux* temp = expression_.mux_;
    expression_.mux_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Expression_Mux& FirrtlPB_Expression::_internal_mux() const {
  return _internal_has_mux()
      ? *expression_.mux_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Expression_Mux*>(&::firrtl::_FirrtlPB_Expression_Mux_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_Mux& FirrtlPB_Expression::mux() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.mux)
  return _internal_mux();
}
inline ::firrtl::FirrtlPB_Expression_Mux* FirrtlPB_Expression::_internal_mutable_mux() {
  if (!_internal_has_mux()) {
    clear_expression();
    set_has_mux();
    expression_.mux_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_Mux >(
        GetArenaNoVirtual());
  }
  return expression_.mux_;
}
inline ::firrtl::FirrtlPB_Expression_Mux* FirrtlPB_Expression::mutable_mux() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.mux)
  return _internal_mutable_mux();
}

// .firrtl.FirrtlPB.Expression.SubField sub_field = 7;
inline bool FirrtlPB_Expression::_internal_has_sub_field() const {
  return expression_case() == kSubField;
}
inline bool FirrtlPB_Expression::has_sub_field() const {
  return _internal_has_sub_field();
}
inline void FirrtlPB_Expression::set_has_sub_field() {
  _oneof_case_[0] = kSubField;
}
inline void FirrtlPB_Expression::clear_sub_field() {
  if (_internal_has_sub_field()) {
    delete expression_.sub_field_;
    clear_has_expression();
  }
}
inline ::firrtl::FirrtlPB_Expression_SubField* FirrtlPB_Expression::release_sub_field() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.sub_field)
  if (_internal_has_sub_field()) {
    clear_has_expression();
      ::firrtl::FirrtlPB_Expression_SubField* temp = expression_.sub_field_;
    expression_.sub_field_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Expression_SubField& FirrtlPB_Expression::_internal_sub_field() const {
  return _internal_has_sub_field()
      ? *expression_.sub_field_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Expression_SubField*>(&::firrtl::_FirrtlPB_Expression_SubField_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_SubField& FirrtlPB_Expression::sub_field() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.sub_field)
  return _internal_sub_field();
}
inline ::firrtl::FirrtlPB_Expression_SubField* FirrtlPB_Expression::_internal_mutable_sub_field() {
  if (!_internal_has_sub_field()) {
    clear_expression();
    set_has_sub_field();
    expression_.sub_field_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_SubField >(
        GetArenaNoVirtual());
  }
  return expression_.sub_field_;
}
inline ::firrtl::FirrtlPB_Expression_SubField* FirrtlPB_Expression::mutable_sub_field() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.sub_field)
  return _internal_mutable_sub_field();
}

// .firrtl.FirrtlPB.Expression.SubIndex sub_index = 8;
inline bool FirrtlPB_Expression::_internal_has_sub_index() const {
  return expression_case() == kSubIndex;
}
inline bool FirrtlPB_Expression::has_sub_index() const {
  return _internal_has_sub_index();
}
inline void FirrtlPB_Expression::set_has_sub_index() {
  _oneof_case_[0] = kSubIndex;
}
inline void FirrtlPB_Expression::clear_sub_index() {
  if (_internal_has_sub_index()) {
    delete expression_.sub_index_;
    clear_has_expression();
  }
}
inline ::firrtl::FirrtlPB_Expression_SubIndex* FirrtlPB_Expression::release_sub_index() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.sub_index)
  if (_internal_has_sub_index()) {
    clear_has_expression();
      ::firrtl::FirrtlPB_Expression_SubIndex* temp = expression_.sub_index_;
    expression_.sub_index_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Expression_SubIndex& FirrtlPB_Expression::_internal_sub_index() const {
  return _internal_has_sub_index()
      ? *expression_.sub_index_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Expression_SubIndex*>(&::firrtl::_FirrtlPB_Expression_SubIndex_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_SubIndex& FirrtlPB_Expression::sub_index() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.sub_index)
  return _internal_sub_index();
}
inline ::firrtl::FirrtlPB_Expression_SubIndex* FirrtlPB_Expression::_internal_mutable_sub_index() {
  if (!_internal_has_sub_index()) {
    clear_expression();
    set_has_sub_index();
    expression_.sub_index_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_SubIndex >(
        GetArenaNoVirtual());
  }
  return expression_.sub_index_;
}
inline ::firrtl::FirrtlPB_Expression_SubIndex* FirrtlPB_Expression::mutable_sub_index() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.sub_index)
  return _internal_mutable_sub_index();
}

// .firrtl.FirrtlPB.Expression.SubAccess sub_access = 9;
inline bool FirrtlPB_Expression::_internal_has_sub_access() const {
  return expression_case() == kSubAccess;
}
inline bool FirrtlPB_Expression::has_sub_access() const {
  return _internal_has_sub_access();
}
inline void FirrtlPB_Expression::set_has_sub_access() {
  _oneof_case_[0] = kSubAccess;
}
inline void FirrtlPB_Expression::clear_sub_access() {
  if (_internal_has_sub_access()) {
    delete expression_.sub_access_;
    clear_has_expression();
  }
}
inline ::firrtl::FirrtlPB_Expression_SubAccess* FirrtlPB_Expression::release_sub_access() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.sub_access)
  if (_internal_has_sub_access()) {
    clear_has_expression();
      ::firrtl::FirrtlPB_Expression_SubAccess* temp = expression_.sub_access_;
    expression_.sub_access_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Expression_SubAccess& FirrtlPB_Expression::_internal_sub_access() const {
  return _internal_has_sub_access()
      ? *expression_.sub_access_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Expression_SubAccess*>(&::firrtl::_FirrtlPB_Expression_SubAccess_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_SubAccess& FirrtlPB_Expression::sub_access() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.sub_access)
  return _internal_sub_access();
}
inline ::firrtl::FirrtlPB_Expression_SubAccess* FirrtlPB_Expression::_internal_mutable_sub_access() {
  if (!_internal_has_sub_access()) {
    clear_expression();
    set_has_sub_access();
    expression_.sub_access_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_SubAccess >(
        GetArenaNoVirtual());
  }
  return expression_.sub_access_;
}
inline ::firrtl::FirrtlPB_Expression_SubAccess* FirrtlPB_Expression::mutable_sub_access() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.sub_access)
  return _internal_mutable_sub_access();
}

// .firrtl.FirrtlPB.Expression.PrimOp prim_op = 10;
inline bool FirrtlPB_Expression::_internal_has_prim_op() const {
  return expression_case() == kPrimOp;
}
inline bool FirrtlPB_Expression::has_prim_op() const {
  return _internal_has_prim_op();
}
inline void FirrtlPB_Expression::set_has_prim_op() {
  _oneof_case_[0] = kPrimOp;
}
inline void FirrtlPB_Expression::clear_prim_op() {
  if (_internal_has_prim_op()) {
    delete expression_.prim_op_;
    clear_has_expression();
  }
}
inline ::firrtl::FirrtlPB_Expression_PrimOp* FirrtlPB_Expression::release_prim_op() {
  // @@protoc_insertion_point(field_release:firrtl.FirrtlPB.Expression.prim_op)
  if (_internal_has_prim_op()) {
    clear_has_expression();
      ::firrtl::FirrtlPB_Expression_PrimOp* temp = expression_.prim_op_;
    expression_.prim_op_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::firrtl::FirrtlPB_Expression_PrimOp& FirrtlPB_Expression::_internal_prim_op() const {
  return _internal_has_prim_op()
      ? *expression_.prim_op_
      : *reinterpret_cast< ::firrtl::FirrtlPB_Expression_PrimOp*>(&::firrtl::_FirrtlPB_Expression_PrimOp_default_instance_);
}
inline const ::firrtl::FirrtlPB_Expression_PrimOp& FirrtlPB_Expression::prim_op() const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.Expression.prim_op)
  return _internal_prim_op();
}
inline ::firrtl::FirrtlPB_Expression_PrimOp* FirrtlPB_Expression::_internal_mutable_prim_op() {
  if (!_internal_has_prim_op()) {
    clear_expression();
    set_has_prim_op();
    expression_.prim_op_ = CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_PrimOp >(
        GetArenaNoVirtual());
  }
  return expression_.prim_op_;
}
inline ::firrtl::FirrtlPB_Expression_PrimOp* FirrtlPB_Expression::mutable_prim_op() {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.Expression.prim_op)
  return _internal_mutable_prim_op();
}

inline bool FirrtlPB_Expression::has_expression() const {
  return expression_case() != EXPRESSION_NOT_SET;
}
inline void FirrtlPB_Expression::clear_has_expression() {
  _oneof_case_[0] = EXPRESSION_NOT_SET;
}
inline FirrtlPB_Expression::ExpressionCase FirrtlPB_Expression::expression_case() const {
  return FirrtlPB_Expression::ExpressionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FirrtlPB

// repeated .firrtl.FirrtlPB.Circuit circuit = 1;
inline int FirrtlPB::_internal_circuit_size() const {
  return circuit_.size();
}
inline int FirrtlPB::circuit_size() const {
  return _internal_circuit_size();
}
inline void FirrtlPB::clear_circuit() {
  circuit_.Clear();
}
inline ::firrtl::FirrtlPB_Circuit* FirrtlPB::mutable_circuit(int index) {
  // @@protoc_insertion_point(field_mutable:firrtl.FirrtlPB.circuit)
  return circuit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Circuit >*
FirrtlPB::mutable_circuit() {
  // @@protoc_insertion_point(field_mutable_list:firrtl.FirrtlPB.circuit)
  return &circuit_;
}
inline const ::firrtl::FirrtlPB_Circuit& FirrtlPB::_internal_circuit(int index) const {
  return circuit_.Get(index);
}
inline const ::firrtl::FirrtlPB_Circuit& FirrtlPB::circuit(int index) const {
  // @@protoc_insertion_point(field_get:firrtl.FirrtlPB.circuit)
  return _internal_circuit(index);
}
inline ::firrtl::FirrtlPB_Circuit* FirrtlPB::_internal_add_circuit() {
  return circuit_.Add();
}
inline ::firrtl::FirrtlPB_Circuit* FirrtlPB::add_circuit() {
  // @@protoc_insertion_point(field_add:firrtl.FirrtlPB.circuit)
  return _internal_add_circuit();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::firrtl::FirrtlPB_Circuit >&
FirrtlPB::circuit() const {
  // @@protoc_insertion_point(field_list:firrtl.FirrtlPB.circuit)
  return circuit_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace firrtl

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::firrtl::FirrtlPB_SourceInfo_None_Reason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firrtl::FirrtlPB_SourceInfo_None_Reason>() {
  return ::firrtl::FirrtlPB_SourceInfo_None_Reason_descriptor();
}
template <> struct is_proto_enum< ::firrtl::FirrtlPB_Statement_MemoryPort_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firrtl::FirrtlPB_Statement_MemoryPort_Direction>() {
  return ::firrtl::FirrtlPB_Statement_MemoryPort_Direction_descriptor();
}
template <> struct is_proto_enum< ::firrtl::FirrtlPB_Statement_ReadUnderWrite> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firrtl::FirrtlPB_Statement_ReadUnderWrite>() {
  return ::firrtl::FirrtlPB_Statement_ReadUnderWrite_descriptor();
}
template <> struct is_proto_enum< ::firrtl::FirrtlPB_Port_Direction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firrtl::FirrtlPB_Port_Direction>() {
  return ::firrtl::FirrtlPB_Port_Direction_descriptor();
}
template <> struct is_proto_enum< ::firrtl::FirrtlPB_Expression_PrimOp_Op> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::firrtl::FirrtlPB_Expression_PrimOp_Op>() {
  return ::firrtl::FirrtlPB_Expression_PrimOp_Op_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_inou_2ffirrtl_2ffirrtl_2eproto
