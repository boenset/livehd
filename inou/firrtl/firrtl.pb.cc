// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: inou/firrtl/firrtl.proto

#include "inou/firrtl/firrtl.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_BigInt_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Circuit_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Expression_FixedLiteral_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Expression_IntegerLiteral_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Expression_Reference_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Expression_SIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Expression_UIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Module_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Module_ExternalModule_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Module_ExternalModule_Parameter_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Module_UserModule_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Port_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_SourceInfo_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_SourceInfo_None_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_SourceInfo_Position_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_FirrtlPB_Statement_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_Attach_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Statement_CMemory_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Statement_CMemory_TypeAndDepth_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_Connect_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Statement_Instance_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_IsInvalid_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Statement_Memory_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_MemoryPort_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_Node_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_PartialConnect_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_Printf_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Statement_Register_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Statement_Skip_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_Stop_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_Wire_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Top_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Type_AnalogType_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Type_AsyncResetType_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Type_ClockType_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Type_FixedType_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Type_ResetType_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Type_SIntType_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Type_UIntType_inou_2ffirrtl_2ffirrtl_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_inou_2ffirrtl_2ffirrtl_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto;
namespace firrtl {
class FirrtlPB_SourceInfo_NoneDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_SourceInfo_None> _instance;
} _FirrtlPB_SourceInfo_None_default_instance_;
class FirrtlPB_SourceInfo_PositionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_SourceInfo_Position> _instance;
} _FirrtlPB_SourceInfo_Position_default_instance_;
class FirrtlPB_SourceInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_SourceInfo> _instance;
  const ::firrtl::FirrtlPB_SourceInfo_None* none_;
  const ::firrtl::FirrtlPB_SourceInfo_Position* position_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
} _FirrtlPB_SourceInfo_default_instance_;
class FirrtlPB_BigIntDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_BigInt> _instance;
} _FirrtlPB_BigInt_default_instance_;
class FirrtlPB_TopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Top> _instance;
} _FirrtlPB_Top_default_instance_;
class FirrtlPB_CircuitDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Circuit> _instance;
} _FirrtlPB_Circuit_default_instance_;
class FirrtlPB_Module_ExternalModule_ParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Module_ExternalModule_Parameter> _instance;
  const ::firrtl::FirrtlPB_BigInt* integer_;
  double double__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr raw_string_;
} _FirrtlPB_Module_ExternalModule_Parameter_default_instance_;
class FirrtlPB_Module_ExternalModuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Module_ExternalModule> _instance;
} _FirrtlPB_Module_ExternalModule_default_instance_;
class FirrtlPB_Module_UserModuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Module_UserModule> _instance;
} _FirrtlPB_Module_UserModule_default_instance_;
class FirrtlPB_ModuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Module> _instance;
  const ::firrtl::FirrtlPB_Module_ExternalModule* external_module_;
  const ::firrtl::FirrtlPB_Module_UserModule* user_module_;
} _FirrtlPB_Module_default_instance_;
class FirrtlPB_Statement_WireDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_Wire> _instance;
} _FirrtlPB_Statement_Wire_default_instance_;
class FirrtlPB_Statement_RegisterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_Register> _instance;
} _FirrtlPB_Statement_Register_default_instance_;
class FirrtlPB_Statement_MemoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_Memory> _instance;
  ::PROTOBUF_NAMESPACE_ID::uint32 uint_depth_;
  const ::firrtl::FirrtlPB_BigInt* bigint_depth_;
} _FirrtlPB_Statement_Memory_default_instance_;
class FirrtlPB_Statement_CMemory_TypeAndDepthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_CMemory_TypeAndDepth> _instance;
} _FirrtlPB_Statement_CMemory_TypeAndDepth_default_instance_;
class FirrtlPB_Statement_CMemoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_CMemory> _instance;
  const ::firrtl::FirrtlPB_Type_VectorType* vector_type_;
  const ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* type_and_depth_;
} _FirrtlPB_Statement_CMemory_default_instance_;
class FirrtlPB_Statement_InstanceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_Instance> _instance;
} _FirrtlPB_Statement_Instance_default_instance_;
class FirrtlPB_Statement_NodeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_Node> _instance;
} _FirrtlPB_Statement_Node_default_instance_;
class FirrtlPB_Statement_WhenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_When> _instance;
} _FirrtlPB_Statement_When_default_instance_;
class FirrtlPB_Statement_StopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_Stop> _instance;
} _FirrtlPB_Statement_Stop_default_instance_;
class FirrtlPB_Statement_PrintfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_Printf> _instance;
} _FirrtlPB_Statement_Printf_default_instance_;
class FirrtlPB_Statement_SkipDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_Skip> _instance;
} _FirrtlPB_Statement_Skip_default_instance_;
class FirrtlPB_Statement_ConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_Connect> _instance;
} _FirrtlPB_Statement_Connect_default_instance_;
class FirrtlPB_Statement_PartialConnectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_PartialConnect> _instance;
} _FirrtlPB_Statement_PartialConnect_default_instance_;
class FirrtlPB_Statement_IsInvalidDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_IsInvalid> _instance;
} _FirrtlPB_Statement_IsInvalid_default_instance_;
class FirrtlPB_Statement_MemoryPortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_MemoryPort> _instance;
} _FirrtlPB_Statement_MemoryPort_default_instance_;
class FirrtlPB_Statement_AttachDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement_Attach> _instance;
} _FirrtlPB_Statement_Attach_default_instance_;
class FirrtlPB_StatementDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Statement> _instance;
  const ::firrtl::FirrtlPB_Statement_Wire* wire_;
  const ::firrtl::FirrtlPB_Statement_Register* register__;
  const ::firrtl::FirrtlPB_Statement_Memory* memory_;
  const ::firrtl::FirrtlPB_Statement_CMemory* cmemory_;
  const ::firrtl::FirrtlPB_Statement_Instance* instance_;
  const ::firrtl::FirrtlPB_Statement_Node* node_;
  const ::firrtl::FirrtlPB_Statement_When* when_;
  const ::firrtl::FirrtlPB_Statement_Stop* stop_;
  const ::firrtl::FirrtlPB_Statement_Printf* printf_;
  const ::firrtl::FirrtlPB_Statement_Skip* skip_;
  const ::firrtl::FirrtlPB_Statement_Connect* connect_;
  const ::firrtl::FirrtlPB_Statement_PartialConnect* partial_connect_;
  const ::firrtl::FirrtlPB_Statement_IsInvalid* is_invalid_;
  const ::firrtl::FirrtlPB_Statement_MemoryPort* memory_port_;
  const ::firrtl::FirrtlPB_Statement_Attach* attach_;
} _FirrtlPB_Statement_default_instance_;
class FirrtlPB_WidthDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Width> _instance;
} _FirrtlPB_Width_default_instance_;
class FirrtlPB_Type_UIntTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Type_UIntType> _instance;
} _FirrtlPB_Type_UIntType_default_instance_;
class FirrtlPB_Type_SIntTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Type_SIntType> _instance;
} _FirrtlPB_Type_SIntType_default_instance_;
class FirrtlPB_Type_ClockTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Type_ClockType> _instance;
} _FirrtlPB_Type_ClockType_default_instance_;
class FirrtlPB_Type_AsyncResetTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Type_AsyncResetType> _instance;
} _FirrtlPB_Type_AsyncResetType_default_instance_;
class FirrtlPB_Type_ResetTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Type_ResetType> _instance;
} _FirrtlPB_Type_ResetType_default_instance_;
class FirrtlPB_Type_BundleType_FieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Type_BundleType_Field> _instance;
} _FirrtlPB_Type_BundleType_Field_default_instance_;
class FirrtlPB_Type_BundleTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Type_BundleType> _instance;
} _FirrtlPB_Type_BundleType_default_instance_;
class FirrtlPB_Type_VectorTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Type_VectorType> _instance;
} _FirrtlPB_Type_VectorType_default_instance_;
class FirrtlPB_Type_FixedTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Type_FixedType> _instance;
} _FirrtlPB_Type_FixedType_default_instance_;
class FirrtlPB_Type_AnalogTypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Type_AnalogType> _instance;
} _FirrtlPB_Type_AnalogType_default_instance_;
class FirrtlPB_TypeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Type> _instance;
  const ::firrtl::FirrtlPB_Type_UIntType* uint_type_;
  const ::firrtl::FirrtlPB_Type_SIntType* sint_type_;
  const ::firrtl::FirrtlPB_Type_ClockType* clock_type_;
  const ::firrtl::FirrtlPB_Type_BundleType* bundle_type_;
  const ::firrtl::FirrtlPB_Type_VectorType* vector_type_;
  const ::firrtl::FirrtlPB_Type_FixedType* fixed_type_;
  const ::firrtl::FirrtlPB_Type_AnalogType* analog_type_;
  const ::firrtl::FirrtlPB_Type_AsyncResetType* async_reset_type_;
  const ::firrtl::FirrtlPB_Type_ResetType* reset_type_;
} _FirrtlPB_Type_default_instance_;
class FirrtlPB_PortDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Port> _instance;
} _FirrtlPB_Port_default_instance_;
class FirrtlPB_Expression_ReferenceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Expression_Reference> _instance;
} _FirrtlPB_Expression_Reference_default_instance_;
class FirrtlPB_Expression_IntegerLiteralDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Expression_IntegerLiteral> _instance;
} _FirrtlPB_Expression_IntegerLiteral_default_instance_;
class FirrtlPB_Expression_UIntLiteralDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Expression_UIntLiteral> _instance;
} _FirrtlPB_Expression_UIntLiteral_default_instance_;
class FirrtlPB_Expression_SIntLiteralDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Expression_SIntLiteral> _instance;
} _FirrtlPB_Expression_SIntLiteral_default_instance_;
class FirrtlPB_Expression_FixedLiteralDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Expression_FixedLiteral> _instance;
} _FirrtlPB_Expression_FixedLiteral_default_instance_;
class FirrtlPB_Expression_ValidIfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Expression_ValidIf> _instance;
} _FirrtlPB_Expression_ValidIf_default_instance_;
class FirrtlPB_Expression_MuxDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Expression_Mux> _instance;
} _FirrtlPB_Expression_Mux_default_instance_;
class FirrtlPB_Expression_SubFieldDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Expression_SubField> _instance;
} _FirrtlPB_Expression_SubField_default_instance_;
class FirrtlPB_Expression_SubIndexDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Expression_SubIndex> _instance;
} _FirrtlPB_Expression_SubIndex_default_instance_;
class FirrtlPB_Expression_SubAccessDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Expression_SubAccess> _instance;
} _FirrtlPB_Expression_SubAccess_default_instance_;
class FirrtlPB_Expression_PrimOpDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Expression_PrimOp> _instance;
} _FirrtlPB_Expression_PrimOp_default_instance_;
class FirrtlPB_ExpressionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB_Expression> _instance;
  const ::firrtl::FirrtlPB_Expression_Reference* reference_;
  const ::firrtl::FirrtlPB_Expression_UIntLiteral* uint_literal_;
  const ::firrtl::FirrtlPB_Expression_SIntLiteral* sint_literal_;
  const ::firrtl::FirrtlPB_Expression_FixedLiteral* fixed_literal_;
  const ::firrtl::FirrtlPB_Expression_ValidIf* valid_if_;
  const ::firrtl::FirrtlPB_Expression_Mux* mux_;
  const ::firrtl::FirrtlPB_Expression_SubField* sub_field_;
  const ::firrtl::FirrtlPB_Expression_SubIndex* sub_index_;
  const ::firrtl::FirrtlPB_Expression_SubAccess* sub_access_;
  const ::firrtl::FirrtlPB_Expression_PrimOp* prim_op_;
} _FirrtlPB_Expression_default_instance_;
class FirrtlPBDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FirrtlPB> _instance;
} _FirrtlPB_default_instance_;
}  // namespace firrtl
static void InitDefaultsscc_info_FirrtlPB_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_default_instance_;
    new (ptr) ::firrtl::FirrtlPB();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Circuit_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_BigInt_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_BigInt_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_BigInt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_BigInt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_BigInt_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FirrtlPB_BigInt_inou_2ffirrtl_2ffirrtl_2eproto}, {}};

static void InitDefaultsscc_info_FirrtlPB_Circuit_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Circuit_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Circuit();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Circuit::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Circuit_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirrtlPB_Circuit_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Module_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Top_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Expression_ValidIf_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Expression_ValidIf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::firrtl::_FirrtlPB_Expression_Mux_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Expression_Mux();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::firrtl::_FirrtlPB_Expression_SubField_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Expression_SubField();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::firrtl::_FirrtlPB_Expression_SubIndex_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Expression_SubIndex();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::firrtl::_FirrtlPB_Expression_SubAccess_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Expression_SubAccess();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::firrtl::_FirrtlPB_Expression_PrimOp_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Expression_PrimOp();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::firrtl::_FirrtlPB_Expression_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Expression();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Expression_ValidIf::InitAsDefaultInstance();
  ::firrtl::FirrtlPB_Expression_Mux::InitAsDefaultInstance();
  ::firrtl::FirrtlPB_Expression_SubField::InitAsDefaultInstance();
  ::firrtl::FirrtlPB_Expression_SubIndex::InitAsDefaultInstance();
  ::firrtl::FirrtlPB_Expression_SubAccess::InitAsDefaultInstance();
  ::firrtl::FirrtlPB_Expression_PrimOp::InitAsDefaultInstance();
  ::firrtl::FirrtlPB_Expression::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Expression_Reference_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Expression_UIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Expression_SIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Expression_FixedLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Expression_IntegerLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Expression_FixedLiteral_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Expression_FixedLiteral_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Expression_FixedLiteral();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Expression_FixedLiteral::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Expression_FixedLiteral_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirrtlPB_Expression_FixedLiteral_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_BigInt_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Expression_IntegerLiteral_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Expression_IntegerLiteral_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Expression_IntegerLiteral();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Expression_IntegerLiteral::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Expression_IntegerLiteral_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FirrtlPB_Expression_IntegerLiteral_inou_2ffirrtl_2ffirrtl_2eproto}, {}};

static void InitDefaultsscc_info_FirrtlPB_Expression_Reference_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Expression_Reference_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Expression_Reference();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Expression_Reference::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Expression_Reference_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FirrtlPB_Expression_Reference_inou_2ffirrtl_2ffirrtl_2eproto}, {}};

static void InitDefaultsscc_info_FirrtlPB_Expression_SIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Expression_SIntLiteral_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Expression_SIntLiteral();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Expression_SIntLiteral::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Expression_SIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirrtlPB_Expression_SIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Expression_IntegerLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Expression_UIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Expression_UIntLiteral_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Expression_UIntLiteral();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Expression_UIntLiteral::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Expression_UIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirrtlPB_Expression_UIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Expression_IntegerLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Module_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Module_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Module();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Module::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Module_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirrtlPB_Module_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Module_ExternalModule_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Module_UserModule_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Module_ExternalModule_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Module_ExternalModule_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Module_ExternalModule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Module_ExternalModule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Module_ExternalModule_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirrtlPB_Module_ExternalModule_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Port_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Module_ExternalModule_Parameter_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Module_ExternalModule_Parameter_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Module_ExternalModule_Parameter_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Module_ExternalModule_Parameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Module_ExternalModule_Parameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Module_ExternalModule_Parameter_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Module_ExternalModule_Parameter_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_BigInt_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Module_UserModule_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Module_UserModule_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Module_UserModule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Module_UserModule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Module_UserModule_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirrtlPB_Module_UserModule_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Port_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Port_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Port_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Port();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Port::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Port_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Port_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_SourceInfo_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_SourceInfo_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_SourceInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_SourceInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_SourceInfo_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirrtlPB_SourceInfo_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_SourceInfo_None_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_SourceInfo_Position_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_SourceInfo_None_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_SourceInfo_None_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_SourceInfo_None();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_SourceInfo_None::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_SourceInfo_None_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FirrtlPB_SourceInfo_None_inou_2ffirrtl_2ffirrtl_2eproto}, {}};

static void InitDefaultsscc_info_FirrtlPB_SourceInfo_Position_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_SourceInfo_Position_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_SourceInfo_Position();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_SourceInfo_Position::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_SourceInfo_Position_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FirrtlPB_SourceInfo_Position_inou_2ffirrtl_2ffirrtl_2eproto}, {}};

static void InitDefaultsscc_info_FirrtlPB_Statement_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_When_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_When();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_When::InitAsDefaultInstance();
  ::firrtl::FirrtlPB_Statement::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<16> scc_info_FirrtlPB_Statement_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 16, 0, InitDefaultsscc_info_FirrtlPB_Statement_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Statement_Wire_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_Register_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_Memory_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_CMemory_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_Instance_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_Node_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_Stop_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_Printf_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_Skip_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_Connect_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_PartialConnect_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_IsInvalid_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_MemoryPort_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_Attach_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_SourceInfo_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_Attach_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_Attach_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_Attach();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_Attach::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_Attach_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Statement_Attach_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_CMemory_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_CMemory_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_CMemory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_CMemory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Statement_CMemory_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirrtlPB_Statement_CMemory_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Statement_CMemory_TypeAndDepth_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_CMemory_TypeAndDepth_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_CMemory_TypeAndDepth_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Statement_CMemory_TypeAndDepth_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirrtlPB_Statement_CMemory_TypeAndDepth_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_BigInt_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_Connect_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_Connect_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_Connect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_Connect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_Connect_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Statement_Connect_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_Instance_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_Instance_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_Instance();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_Instance::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Statement_Instance_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FirrtlPB_Statement_Instance_inou_2ffirrtl_2ffirrtl_2eproto}, {}};

static void InitDefaultsscc_info_FirrtlPB_Statement_IsInvalid_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_IsInvalid_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_IsInvalid();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_IsInvalid::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_IsInvalid_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Statement_IsInvalid_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_Memory_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_Memory_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_Memory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_Memory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Statement_Memory_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirrtlPB_Statement_Memory_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_BigInt_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_MemoryPort_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_MemoryPort_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_MemoryPort();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_MemoryPort::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_MemoryPort_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Statement_MemoryPort_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_Node_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_Node_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_Node();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_Node::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_Node_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Statement_Node_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_PartialConnect_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_PartialConnect_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_PartialConnect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_PartialConnect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_PartialConnect_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Statement_PartialConnect_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_Printf_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_Printf_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_Printf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_Printf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_Printf_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Statement_Printf_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_Register_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_Register_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_Register();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_Register::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_FirrtlPB_Statement_Register_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_FirrtlPB_Statement_Register_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_Skip_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_Skip_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_Skip();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_Skip::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Statement_Skip_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FirrtlPB_Statement_Skip_inou_2ffirrtl_2ffirrtl_2eproto}, {}};

static void InitDefaultsscc_info_FirrtlPB_Statement_Stop_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_Stop_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_Stop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_Stop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_Stop_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Statement_Stop_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Statement_Wire_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Statement_Wire_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Statement_Wire();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Statement_Wire::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Statement_Wire_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Statement_Wire_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Top_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Top_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Top();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Top::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Top_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FirrtlPB_Top_inou_2ffirrtl_2ffirrtl_2eproto}, {}};

static void InitDefaultsscc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Type_BundleType_Field_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Type_BundleType_Field();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::firrtl::_FirrtlPB_Type_BundleType_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Type_BundleType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::firrtl::_FirrtlPB_Type_VectorType_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Type_VectorType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::firrtl::_FirrtlPB_Type_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Type();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Type_BundleType_Field::InitAsDefaultInstance();
  ::firrtl::FirrtlPB_Type_BundleType::InitAsDefaultInstance();
  ::firrtl::FirrtlPB_Type_VectorType::InitAsDefaultInstance();
  ::firrtl::FirrtlPB_Type::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Type_UIntType_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Type_SIntType_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Type_ClockType_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Type_FixedType_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Type_AnalogType_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Type_AsyncResetType_inou_2ffirrtl_2ffirrtl_2eproto.base,
      &scc_info_FirrtlPB_Type_ResetType_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Type_AnalogType_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Type_AnalogType_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Type_AnalogType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Type_AnalogType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Type_AnalogType_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Type_AnalogType_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Type_AsyncResetType_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Type_AsyncResetType_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Type_AsyncResetType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Type_AsyncResetType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Type_AsyncResetType_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FirrtlPB_Type_AsyncResetType_inou_2ffirrtl_2ffirrtl_2eproto}, {}};

static void InitDefaultsscc_info_FirrtlPB_Type_ClockType_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Type_ClockType_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Type_ClockType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Type_ClockType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Type_ClockType_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FirrtlPB_Type_ClockType_inou_2ffirrtl_2ffirrtl_2eproto}, {}};

static void InitDefaultsscc_info_FirrtlPB_Type_FixedType_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Type_FixedType_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Type_FixedType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Type_FixedType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Type_FixedType_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Type_FixedType_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Type_ResetType_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Type_ResetType_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Type_ResetType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Type_ResetType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Type_ResetType_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FirrtlPB_Type_ResetType_inou_2ffirrtl_2ffirrtl_2eproto}, {}};

static void InitDefaultsscc_info_FirrtlPB_Type_SIntType_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Type_SIntType_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Type_SIntType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Type_SIntType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Type_SIntType_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Type_SIntType_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Type_UIntType_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Type_UIntType_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Type_UIntType();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Type_UIntType::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_FirrtlPB_Type_UIntType_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_FirrtlPB_Type_UIntType_inou_2ffirrtl_2ffirrtl_2eproto}, {
      &scc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto.base,}};

static void InitDefaultsscc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::firrtl::_FirrtlPB_Width_default_instance_;
    new (ptr) ::firrtl::FirrtlPB_Width();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::firrtl::FirrtlPB_Width::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_inou_2ffirrtl_2ffirrtl_2eproto[53];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_inou_2ffirrtl_2ffirrtl_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_inou_2ffirrtl_2ffirrtl_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_inou_2ffirrtl_2ffirrtl_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_SourceInfo_None, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_SourceInfo_None, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_SourceInfo_Position, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_SourceInfo_Position, filename_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_SourceInfo_Position, line_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_SourceInfo_Position, column_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_SourceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_SourceInfo, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::firrtl::FirrtlPB_SourceInfoDefaultTypeInternal, none_),
  offsetof(::firrtl::FirrtlPB_SourceInfoDefaultTypeInternal, position_),
  offsetof(::firrtl::FirrtlPB_SourceInfoDefaultTypeInternal, text_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_SourceInfo, source_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_BigInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_BigInt, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Top, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Top, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Circuit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Circuit, module_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Circuit, top_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_ExternalModule_Parameter, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_ExternalModule_Parameter, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_ExternalModule_Parameter, id_),
  offsetof(::firrtl::FirrtlPB_Module_ExternalModule_ParameterDefaultTypeInternal, integer_),
  offsetof(::firrtl::FirrtlPB_Module_ExternalModule_ParameterDefaultTypeInternal, double__),
  offsetof(::firrtl::FirrtlPB_Module_ExternalModule_ParameterDefaultTypeInternal, string_),
  offsetof(::firrtl::FirrtlPB_Module_ExternalModule_ParameterDefaultTypeInternal, raw_string_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_ExternalModule_Parameter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_ExternalModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_ExternalModule, id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_ExternalModule, port_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_ExternalModule, defined_name_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_ExternalModule, parameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_UserModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_UserModule, id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_UserModule, port_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module_UserModule, statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::firrtl::FirrtlPB_ModuleDefaultTypeInternal, external_module_),
  offsetof(::firrtl::FirrtlPB_ModuleDefaultTypeInternal, user_module_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Module, module_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Wire, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Wire, id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Wire, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Register, id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Register, type_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Register, clock_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Register, reset_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Register, init_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Memory, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Memory, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Memory, id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Memory, type_),
  offsetof(::firrtl::FirrtlPB_Statement_MemoryDefaultTypeInternal, uint_depth_),
  offsetof(::firrtl::FirrtlPB_Statement_MemoryDefaultTypeInternal, bigint_depth_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Memory, write_latency_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Memory, read_latency_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Memory, reader_id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Memory, writer_id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Memory, readwriter_id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Memory, read_under_write_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Memory, depth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth, data_type_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth, depth_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_CMemory, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_CMemory, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_CMemory, id_),
  offsetof(::firrtl::FirrtlPB_Statement_CMemoryDefaultTypeInternal, vector_type_),
  offsetof(::firrtl::FirrtlPB_Statement_CMemoryDefaultTypeInternal, type_and_depth_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_CMemory, sync_read_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_CMemory, read_under_write_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_CMemory, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Instance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Instance, id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Instance, module_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Node, id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Node, expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_When, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_When, predicate_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_When, consequent_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_When, otherwise_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Stop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Stop, return_value_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Stop, clk_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Stop, en_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Printf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Printf, value_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Printf, arg_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Printf, clk_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Printf, en_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Skip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Connect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Connect, location_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Connect, expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_PartialConnect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_PartialConnect, location_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_PartialConnect, expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_IsInvalid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_IsInvalid, expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_MemoryPort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_MemoryPort, direction_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_MemoryPort, id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_MemoryPort, memory_id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_MemoryPort, memory_index_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_MemoryPort, expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Attach, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement_Attach, expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, wire_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, register__),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, memory_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, cmemory_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, instance_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, node_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, when_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, stop_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, printf_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, skip_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, connect_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, partial_connect_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, is_invalid_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, memory_port_),
  offsetof(::firrtl::FirrtlPB_StatementDefaultTypeInternal, attach_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement, source_info_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Statement, statement_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Width, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Width, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_UIntType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_UIntType, width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_SIntType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_SIntType, width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_ClockType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_AsyncResetType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_ResetType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_BundleType_Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_BundleType_Field, is_flipped_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_BundleType_Field, id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_BundleType_Field, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_BundleType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_BundleType, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_VectorType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_VectorType, type_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_VectorType, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_FixedType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_FixedType, width_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_FixedType, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_AnalogType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type_AnalogType, width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::firrtl::FirrtlPB_TypeDefaultTypeInternal, uint_type_),
  offsetof(::firrtl::FirrtlPB_TypeDefaultTypeInternal, sint_type_),
  offsetof(::firrtl::FirrtlPB_TypeDefaultTypeInternal, clock_type_),
  offsetof(::firrtl::FirrtlPB_TypeDefaultTypeInternal, bundle_type_),
  offsetof(::firrtl::FirrtlPB_TypeDefaultTypeInternal, vector_type_),
  offsetof(::firrtl::FirrtlPB_TypeDefaultTypeInternal, fixed_type_),
  offsetof(::firrtl::FirrtlPB_TypeDefaultTypeInternal, analog_type_),
  offsetof(::firrtl::FirrtlPB_TypeDefaultTypeInternal, async_reset_type_),
  offsetof(::firrtl::FirrtlPB_TypeDefaultTypeInternal, reset_type_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Type, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Port, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Port, id_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Port, direction_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Port, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_Reference, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_Reference, id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_IntegerLiteral, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_IntegerLiteral, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_UIntLiteral, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_UIntLiteral, value_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_UIntLiteral, width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_SIntLiteral, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_SIntLiteral, value_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_SIntLiteral, width_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_FixedLiteral, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_FixedLiteral, value_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_FixedLiteral, width_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_FixedLiteral, point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_ValidIf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_ValidIf, condition_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_ValidIf, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_Mux, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_Mux, condition_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_Mux, t_value_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_Mux, f_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_SubField, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_SubField, expression_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_SubField, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_SubIndex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_SubIndex, expression_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_SubIndex, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_SubAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_SubAccess, expression_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_SubAccess, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_PrimOp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_PrimOp, op_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_PrimOp, arg_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression_PrimOp, const__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::firrtl::FirrtlPB_ExpressionDefaultTypeInternal, reference_),
  offsetof(::firrtl::FirrtlPB_ExpressionDefaultTypeInternal, uint_literal_),
  offsetof(::firrtl::FirrtlPB_ExpressionDefaultTypeInternal, sint_literal_),
  offsetof(::firrtl::FirrtlPB_ExpressionDefaultTypeInternal, fixed_literal_),
  offsetof(::firrtl::FirrtlPB_ExpressionDefaultTypeInternal, valid_if_),
  offsetof(::firrtl::FirrtlPB_ExpressionDefaultTypeInternal, mux_),
  offsetof(::firrtl::FirrtlPB_ExpressionDefaultTypeInternal, sub_field_),
  offsetof(::firrtl::FirrtlPB_ExpressionDefaultTypeInternal, sub_index_),
  offsetof(::firrtl::FirrtlPB_ExpressionDefaultTypeInternal, sub_access_),
  offsetof(::firrtl::FirrtlPB_ExpressionDefaultTypeInternal, prim_op_),
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB_Expression, expression_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::firrtl::FirrtlPB, circuit_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::firrtl::FirrtlPB_SourceInfo_None)},
  { 6, -1, sizeof(::firrtl::FirrtlPB_SourceInfo_Position)},
  { 14, -1, sizeof(::firrtl::FirrtlPB_SourceInfo)},
  { 23, -1, sizeof(::firrtl::FirrtlPB_BigInt)},
  { 29, -1, sizeof(::firrtl::FirrtlPB_Top)},
  { 35, -1, sizeof(::firrtl::FirrtlPB_Circuit)},
  { 42, -1, sizeof(::firrtl::FirrtlPB_Module_ExternalModule_Parameter)},
  { 53, -1, sizeof(::firrtl::FirrtlPB_Module_ExternalModule)},
  { 62, -1, sizeof(::firrtl::FirrtlPB_Module_UserModule)},
  { 70, -1, sizeof(::firrtl::FirrtlPB_Module)},
  { 78, -1, sizeof(::firrtl::FirrtlPB_Statement_Wire)},
  { 85, -1, sizeof(::firrtl::FirrtlPB_Statement_Register)},
  { 95, -1, sizeof(::firrtl::FirrtlPB_Statement_Memory)},
  { 111, -1, sizeof(::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth)},
  { 118, -1, sizeof(::firrtl::FirrtlPB_Statement_CMemory)},
  { 129, -1, sizeof(::firrtl::FirrtlPB_Statement_Instance)},
  { 136, -1, sizeof(::firrtl::FirrtlPB_Statement_Node)},
  { 143, -1, sizeof(::firrtl::FirrtlPB_Statement_When)},
  { 151, -1, sizeof(::firrtl::FirrtlPB_Statement_Stop)},
  { 159, -1, sizeof(::firrtl::FirrtlPB_Statement_Printf)},
  { 168, -1, sizeof(::firrtl::FirrtlPB_Statement_Skip)},
  { 173, -1, sizeof(::firrtl::FirrtlPB_Statement_Connect)},
  { 180, -1, sizeof(::firrtl::FirrtlPB_Statement_PartialConnect)},
  { 187, -1, sizeof(::firrtl::FirrtlPB_Statement_IsInvalid)},
  { 193, -1, sizeof(::firrtl::FirrtlPB_Statement_MemoryPort)},
  { 203, -1, sizeof(::firrtl::FirrtlPB_Statement_Attach)},
  { 209, -1, sizeof(::firrtl::FirrtlPB_Statement)},
  { 231, -1, sizeof(::firrtl::FirrtlPB_Width)},
  { 237, -1, sizeof(::firrtl::FirrtlPB_Type_UIntType)},
  { 243, -1, sizeof(::firrtl::FirrtlPB_Type_SIntType)},
  { 249, -1, sizeof(::firrtl::FirrtlPB_Type_ClockType)},
  { 254, -1, sizeof(::firrtl::FirrtlPB_Type_AsyncResetType)},
  { 259, -1, sizeof(::firrtl::FirrtlPB_Type_ResetType)},
  { 264, -1, sizeof(::firrtl::FirrtlPB_Type_BundleType_Field)},
  { 272, -1, sizeof(::firrtl::FirrtlPB_Type_BundleType)},
  { 278, -1, sizeof(::firrtl::FirrtlPB_Type_VectorType)},
  { 285, -1, sizeof(::firrtl::FirrtlPB_Type_FixedType)},
  { 292, -1, sizeof(::firrtl::FirrtlPB_Type_AnalogType)},
  { 298, -1, sizeof(::firrtl::FirrtlPB_Type)},
  { 313, -1, sizeof(::firrtl::FirrtlPB_Port)},
  { 321, -1, sizeof(::firrtl::FirrtlPB_Expression_Reference)},
  { 327, -1, sizeof(::firrtl::FirrtlPB_Expression_IntegerLiteral)},
  { 333, -1, sizeof(::firrtl::FirrtlPB_Expression_UIntLiteral)},
  { 340, -1, sizeof(::firrtl::FirrtlPB_Expression_SIntLiteral)},
  { 347, -1, sizeof(::firrtl::FirrtlPB_Expression_FixedLiteral)},
  { 355, -1, sizeof(::firrtl::FirrtlPB_Expression_ValidIf)},
  { 362, -1, sizeof(::firrtl::FirrtlPB_Expression_Mux)},
  { 370, -1, sizeof(::firrtl::FirrtlPB_Expression_SubField)},
  { 377, -1, sizeof(::firrtl::FirrtlPB_Expression_SubIndex)},
  { 384, -1, sizeof(::firrtl::FirrtlPB_Expression_SubAccess)},
  { 391, -1, sizeof(::firrtl::FirrtlPB_Expression_PrimOp)},
  { 399, -1, sizeof(::firrtl::FirrtlPB_Expression)},
  { 415, -1, sizeof(::firrtl::FirrtlPB)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_SourceInfo_None_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_SourceInfo_Position_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_SourceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_BigInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Top_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Circuit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Module_ExternalModule_Parameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Module_ExternalModule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Module_UserModule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Module_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_Wire_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_Register_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_Memory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_CMemory_TypeAndDepth_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_CMemory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_Instance_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_When_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_Stop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_Printf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_Skip_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_Connect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_PartialConnect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_IsInvalid_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_MemoryPort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_Attach_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Statement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Width_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Type_UIntType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Type_SIntType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Type_ClockType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Type_AsyncResetType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Type_ResetType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Type_BundleType_Field_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Type_BundleType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Type_VectorType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Type_FixedType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Type_AnalogType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Type_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Port_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Expression_Reference_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Expression_IntegerLiteral_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Expression_UIntLiteral_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Expression_SIntLiteral_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Expression_FixedLiteral_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Expression_ValidIf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Expression_Mux_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Expression_SubField_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Expression_SubIndex_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Expression_SubAccess_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Expression_PrimOp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_Expression_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::firrtl::_FirrtlPB_default_instance_),
};

const char descriptor_table_protodef_inou_2ffirrtl_2ffirrtl_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030inou/firrtl/firrtl.proto\022\006firrtl\"\214\?\n\010F"
  "irrtlPB\022)\n\007circuit\030\001 \003(\0132\030.firrtl.Firrtl"
  "PB.Circuit\032\276\003\n\nSourceInfo\0220\n\004none\030\001 \001(\0132"
  " .firrtl.FirrtlPB.SourceInfo.NoneH\000\0228\n\010p"
  "osition\030\002 \001(\0132$.firrtl.FirrtlPB.SourceIn"
  "fo.PositionH\000\022\016\n\004text\030\003 \001(\tH\000\032\350\001\n\004None\0227"
  "\n\006reason\030\001 \001(\0162\'.firrtl.FirrtlPB.SourceI"
  "nfo.None.Reason\"\246\001\n\006Reason\022#\n\037NONE_SOURC"
  "E_INFO_REASON_UNKNOWN\020\000\022\'\n#NONE_SOURCE_I"
  "NFO_REASON_UNLOCATABLE\020\001\022&\n\"NONE_SOURCE_"
  "INFO_REASON_SUPPRESSED\020\002\022&\n\"NONE_SOURCE_"
  "INFO_REASON_DEPRECATED\020\003\032:\n\010Position\022\020\n\010"
  "filename\030\001 \001(\t\022\014\n\004line\030\002 \001(\r\022\016\n\006column\030\003"
  " \001(\rB\r\n\013source_info\032\027\n\006BigInt\022\r\n\005value\030\001"
  " \001(\014\032\023\n\003Top\022\014\n\004name\030\001 \001(\t\032U\n\007Circuit\022\'\n\006"
  "module\030\001 \003(\0132\027.firrtl.FirrtlPB.Module\022!\n"
  "\003top\030\002 \003(\0132\024.firrtl.FirrtlPB.Top\032\246\004\n\006Mod"
  "ule\022A\n\017external_module\030\001 \001(\0132&.firrtl.Fi"
  "rrtlPB.Module.ExternalModuleH\000\0229\n\013user_m"
  "odule\030\002 \001(\0132\".firrtl.FirrtlPB.Module.Use"
  "rModuleH\000\032\245\002\n\016ExternalModule\022\n\n\002id\030\001 \001(\t"
  "\022#\n\004port\030\002 \003(\0132\025.firrtl.FirrtlPB.Port\022\024\n"
  "\014defined_name\030\003 \001(\t\022C\n\tparameter\030\004 \003(\01320"
  ".firrtl.FirrtlPB.Module.ExternalModule.P"
  "arameter\032\206\001\n\tParameter\022\n\n\002id\030\001 \001(\t\022*\n\007in"
  "teger\030\002 \001(\0132\027.firrtl.FirrtlPB.BigIntH\000\022\020"
  "\n\006double\030\003 \001(\001H\000\022\020\n\006string\030\004 \001(\tH\000\022\024\n\nra"
  "w_string\030\005 \001(\tH\000B\007\n\005value\032l\n\nUserModule\022"
  "\n\n\002id\030\001 \001(\t\022#\n\004port\030\002 \003(\0132\025.firrtl.Firrt"
  "lPB.Port\022-\n\tstatement\030\003 \003(\0132\032.firrtl.Fir"
  "rtlPB.StatementB\010\n\006module\032\301\030\n\tStatement\022"
  "/\n\004wire\030\001 \001(\0132\037.firrtl.FirrtlPB.Statemen"
  "t.WireH\000\0227\n\010register\030\002 \001(\0132#.firrtl.Firr"
  "tlPB.Statement.RegisterH\000\0223\n\006memory\030\003 \001("
  "\0132!.firrtl.FirrtlPB.Statement.MemoryH\000\0225"
  "\n\007cmemory\030\004 \001(\0132\".firrtl.FirrtlPB.Statem"
  "ent.CMemoryH\000\0227\n\010instance\030\005 \001(\0132#.firrtl"
  ".FirrtlPB.Statement.InstanceH\000\022/\n\004node\030\006"
  " \001(\0132\037.firrtl.FirrtlPB.Statement.NodeH\000\022"
  "/\n\004when\030\007 \001(\0132\037.firrtl.FirrtlPB.Statemen"
  "t.WhenH\000\022/\n\004stop\030\010 \001(\0132\037.firrtl.FirrtlPB"
  ".Statement.StopH\000\0223\n\006printf\030\n \001(\0132!.firr"
  "tl.FirrtlPB.Statement.PrintfH\000\022/\n\004skip\030\016"
  " \001(\0132\037.firrtl.FirrtlPB.Statement.SkipH\000\022"
  "5\n\007connect\030\017 \001(\0132\".firrtl.FirrtlPB.State"
  "ment.ConnectH\000\022D\n\017partial_connect\030\020 \001(\0132"
  ").firrtl.FirrtlPB.Statement.PartialConne"
  "ctH\000\022:\n\nis_invalid\030\021 \001(\0132$.firrtl.Firrtl"
  "PB.Statement.IsInvalidH\000\022<\n\013memory_port\030"
  "\022 \001(\0132%.firrtl.FirrtlPB.Statement.Memory"
  "PortH\000\0223\n\006attach\030\024 \001(\0132!.firrtl.FirrtlPB"
  ".Statement.AttachH\000\0220\n\013source_info\030\023 \001(\013"
  "2\033.firrtl.FirrtlPB.SourceInfo\0327\n\004Wire\022\n\n"
  "\002id\030\001 \001(\t\022#\n\004type\030\002 \001(\0132\025.firrtl.FirrtlP"
  "B.Type\032\276\001\n\010Register\022\n\n\002id\030\001 \001(\t\022#\n\004type\030"
  "\002 \001(\0132\025.firrtl.FirrtlPB.Type\022*\n\005clock\030\003 "
  "\001(\0132\033.firrtl.FirrtlPB.Expression\022*\n\005rese"
  "t\030\004 \001(\0132\033.firrtl.FirrtlPB.Expression\022)\n\004"
  "init\030\005 \001(\0132\033.firrtl.FirrtlPB.Expression\032"
  "\270\002\n\006Memory\022\n\n\002id\030\001 \001(\t\022#\n\004type\030\002 \001(\0132\025.f"
  "irrtl.FirrtlPB.Type\022\024\n\nuint_depth\030\003 \001(\rH"
  "\000\022/\n\014bigint_depth\030\t \001(\0132\027.firrtl.FirrtlP"
  "B.BigIntH\000\022\025\n\rwrite_latency\030\004 \001(\r\022\024\n\014rea"
  "d_latency\030\005 \001(\r\022\021\n\treader_id\030\006 \003(\t\022\021\n\twr"
  "iter_id\030\007 \003(\t\022\025\n\rreadwriter_id\030\010 \003(\t\022C\n\020"
  "read_under_write\030\n \001(\0162).firrtl.FirrtlPB"
  ".Statement.ReadUnderWriteB\007\n\005depth\032\333\002\n\007C"
  "Memory\022\n\n\002id\030\001 \001(\t\0227\n\013vector_type\030\002 \001(\0132"
  " .firrtl.FirrtlPB.Type.VectorTypeH\000\022I\n\016t"
  "ype_and_depth\030\004 \001(\0132/.firrtl.FirrtlPB.St"
  "atement.CMemory.TypeAndDepthH\000\022\021\n\tsync_r"
  "ead\030\003 \001(\010\022C\n\020read_under_write\030\005 \001(\0162).fi"
  "rrtl.FirrtlPB.Statement.ReadUnderWrite\032`"
  "\n\014TypeAndDepth\022(\n\tdata_type\030\001 \001(\0132\025.firr"
  "tl.FirrtlPB.Type\022&\n\005depth\030\002 \001(\0132\027.firrtl"
  ".FirrtlPB.BigIntB\006\n\004type\032)\n\010Instance\022\n\n\002"
  "id\030\001 \001(\t\022\021\n\tmodule_id\030\002 \001(\t\032C\n\004Node\022\n\n\002i"
  "d\030\001 \001(\t\022/\n\nexpression\030\002 \001(\0132\033.firrtl.Fir"
  "rtlPB.Expression\032\225\001\n\004When\022.\n\tpredicate\030\001"
  " \001(\0132\033.firrtl.FirrtlPB.Expression\022.\n\ncon"
  "sequent\030\002 \003(\0132\032.firrtl.FirrtlPB.Statemen"
  "t\022-\n\totherwise\030\003 \003(\0132\032.firrtl.FirrtlPB.S"
  "tatement\032o\n\004Stop\022\024\n\014return_value\030\001 \001(\005\022("
  "\n\003clk\030\002 \001(\0132\033.firrtl.FirrtlPB.Expression"
  "\022\'\n\002en\030\003 \001(\0132\033.firrtl.FirrtlPB.Expressio"
  "n\032\224\001\n\006Printf\022\r\n\005value\030\001 \001(\t\022(\n\003arg\030\002 \003(\013"
  "2\033.firrtl.FirrtlPB.Expression\022(\n\003clk\030\003 \001"
  "(\0132\033.firrtl.FirrtlPB.Expression\022\'\n\002en\030\004 "
  "\001(\0132\033.firrtl.FirrtlPB.Expression\032\006\n\004Skip"
  "\032i\n\007Connect\022-\n\010location\030\001 \001(\0132\033.firrtl.F"
  "irrtlPB.Expression\022/\n\nexpression\030\002 \001(\0132\033"
  ".firrtl.FirrtlPB.Expression\032p\n\016PartialCo"
  "nnect\022-\n\010location\030\001 \001(\0132\033.firrtl.FirrtlP"
  "B.Expression\022/\n\nexpression\030\002 \001(\0132\033.firrt"
  "l.FirrtlPB.Expression\032<\n\tIsInvalid\022/\n\nex"
  "pression\030\001 \001(\0132\033.firrtl.FirrtlPB.Express"
  "ion\032\214\003\n\nMemoryPort\022B\n\tdirection\030\001 \001(\0162/."
  "firrtl.FirrtlPB.Statement.MemoryPort.Dir"
  "ection\022\n\n\002id\030\002 \001(\t\022\021\n\tmemory_id\030\003 \001(\t\0221\n"
  "\014memory_index\030\004 \001(\0132\033.firrtl.FirrtlPB.Ex"
  "pression\022/\n\nexpression\030\005 \001(\0132\033.firrtl.Fi"
  "rrtlPB.Expression\"\266\001\n\tDirection\022!\n\035MEMOR"
  "Y_PORT_DIRECTION_UNKNOWN\020\000\022\037\n\033MEMORY_POR"
  "T_DIRECTION_INFER\020\001\022\036\n\032MEMORY_PORT_DIREC"
  "TION_READ\020\002\022\037\n\033MEMORY_PORT_DIRECTION_WRI"
  "TE\020\003\022$\n MEMORY_PORT_DIRECTION_READ_WRITE"
  "\020\004\0329\n\006Attach\022/\n\nexpression\030\001 \003(\0132\033.firrt"
  "l.FirrtlPB.Expression\"1\n\016ReadUnderWrite\022"
  "\r\n\tUNDEFINED\020\000\022\007\n\003OLD\020\001\022\007\n\003NEW\020\002B\013\n\tstat"
  "ement\032\026\n\005Width\022\r\n\005value\030\001 \001(\r\032\201\010\n\004Type\0223"
  "\n\tuint_type\030\002 \001(\0132\036.firrtl.FirrtlPB.Type"
  ".UIntTypeH\000\0223\n\tsint_type\030\003 \001(\0132\036.firrtl."
  "FirrtlPB.Type.SIntTypeH\000\0225\n\nclock_type\030\004"
  " \001(\0132\037.firrtl.FirrtlPB.Type.ClockTypeH\000\022"
  "7\n\013bundle_type\030\005 \001(\0132 .firrtl.FirrtlPB.T"
  "ype.BundleTypeH\000\0227\n\013vector_type\030\006 \001(\0132 ."
  "firrtl.FirrtlPB.Type.VectorTypeH\000\0225\n\nfix"
  "ed_type\030\007 \001(\0132\037.firrtl.FirrtlPB.Type.Fix"
  "edTypeH\000\0227\n\013analog_type\030\010 \001(\0132 .firrtl.F"
  "irrtlPB.Type.AnalogTypeH\000\022@\n\020async_reset"
  "_type\030\t \001(\0132$.firrtl.FirrtlPB.Type.Async"
  "ResetTypeH\000\0225\n\nreset_type\030\n \001(\0132\037.firrtl"
  ".FirrtlPB.Type.ResetTypeH\000\0321\n\010UIntType\022%"
  "\n\005width\030\001 \001(\0132\026.firrtl.FirrtlPB.Width\0321\n"
  "\010SIntType\022%\n\005width\030\001 \001(\0132\026.firrtl.Firrtl"
  "PB.Width\032\013\n\tClockType\032\020\n\016AsyncResetType\032"
  "\013\n\tResetType\032\221\001\n\nBundleType\0225\n\005field\030\001 \003"
  "(\0132&.firrtl.FirrtlPB.Type.BundleType.Fie"
  "ld\032L\n\005Field\022\022\n\nis_flipped\030\001 \001(\010\022\n\n\002id\030\002 "
  "\001(\t\022#\n\004type\030\003 \001(\0132\025.firrtl.FirrtlPB.Type"
  "\032\?\n\nVectorType\022#\n\004type\030\001 \001(\0132\025.firrtl.Fi"
  "rrtlPB.Type\022\014\n\004size\030\002 \001(\r\032Y\n\tFixedType\022%"
  "\n\005width\030\001 \001(\0132\026.firrtl.FirrtlPB.Width\022%\n"
  "\005point\030\002 \001(\0132\026.firrtl.FirrtlPB.Width\0323\n\n"
  "AnalogType\022%\n\005width\030\003 \001(\0132\026.firrtl.Firrt"
  "lPB.WidthB\006\n\004type\032\303\001\n\004Port\022\n\n\002id\030\001 \001(\t\0222"
  "\n\tdirection\030\002 \001(\0162\037.firrtl.FirrtlPB.Port"
  ".Direction\022#\n\004type\030\003 \001(\0132\025.firrtl.Firrtl"
  "PB.Type\"V\n\tDirection\022\032\n\026PORT_DIRECTION_U"
  "NKNOWN\020\000\022\025\n\021PORT_DIRECTION_IN\020\001\022\026\n\022PORT_"
  "DIRECTION_OUT\020\002\032\277\023\n\nExpression\022:\n\trefere"
  "nce\030\001 \001(\0132%.firrtl.FirrtlPB.Expression.R"
  "eferenceH\000\022\?\n\014uint_literal\030\002 \001(\0132\'.firrt"
  "l.FirrtlPB.Expression.UIntLiteralH\000\022\?\n\014s"
  "int_literal\030\003 \001(\0132\'.firrtl.FirrtlPB.Expr"
  "ession.SIntLiteralH\000\022A\n\rfixed_literal\030\013 "
  "\001(\0132(.firrtl.FirrtlPB.Expression.FixedLi"
  "teralH\000\0227\n\010valid_if\030\004 \001(\0132#.firrtl.Firrt"
  "lPB.Expression.ValidIfH\000\022.\n\003mux\030\006 \001(\0132\037."
  "firrtl.FirrtlPB.Expression.MuxH\000\0229\n\tsub_"
  "field\030\007 \001(\0132$.firrtl.FirrtlPB.Expression"
  ".SubFieldH\000\0229\n\tsub_index\030\010 \001(\0132$.firrtl."
  "FirrtlPB.Expression.SubIndexH\000\022;\n\nsub_ac"
  "cess\030\t \001(\0132%.firrtl.FirrtlPB.Expression."
  "SubAccessH\000\0225\n\007prim_op\030\n \001(\0132\".firrtl.Fi"
  "rrtlPB.Expression.PrimOpH\000\032\027\n\tReference\022"
  "\n\n\002id\030\001 \001(\t\032\037\n\016IntegerLiteral\022\r\n\005value\030\001"
  " \001(\t\032o\n\013UIntLiteral\0229\n\005value\030\001 \001(\0132*.fir"
  "rtl.FirrtlPB.Expression.IntegerLiteral\022%"
  "\n\005width\030\002 \001(\0132\026.firrtl.FirrtlPB.Width\032o\n"
  "\013SIntLiteral\0229\n\005value\030\001 \001(\0132*.firrtl.Fir"
  "rtlPB.Expression.IntegerLiteral\022%\n\005width"
  "\030\002 \001(\0132\026.firrtl.FirrtlPB.Width\032\204\001\n\014Fixed"
  "Literal\022&\n\005value\030\001 \001(\0132\027.firrtl.FirrtlPB"
  ".BigInt\022%\n\005width\030\002 \001(\0132\026.firrtl.FirrtlPB"
  ".Width\022%\n\005point\030\003 \001(\0132\026.firrtl.FirrtlPB."
  "Width\032e\n\007ValidIf\022.\n\tcondition\030\001 \001(\0132\033.fi"
  "rrtl.FirrtlPB.Expression\022*\n\005value\030\002 \001(\0132"
  "\033.firrtl.FirrtlPB.Expression\032\221\001\n\003Mux\022.\n\t"
  "condition\030\001 \001(\0132\033.firrtl.FirrtlPB.Expres"
  "sion\022,\n\007t_value\030\002 \001(\0132\033.firrtl.FirrtlPB."
  "Expression\022,\n\007f_value\030\003 \001(\0132\033.firrtl.Fir"
  "rtlPB.Expression\032J\n\010SubField\022/\n\nexpressi"
  "on\030\001 \001(\0132\033.firrtl.FirrtlPB.Expression\022\r\n"
  "\005field\030\002 \001(\t\032v\n\010SubIndex\022/\n\nexpression\030\001"
  " \001(\0132\033.firrtl.FirrtlPB.Expression\0229\n\005ind"
  "ex\030\002 \001(\0132*.firrtl.FirrtlPB.Expression.In"
  "tegerLiteral\032h\n\tSubAccess\022/\n\nexpression\030"
  "\001 \001(\0132\033.firrtl.FirrtlPB.Expression\022*\n\005in"
  "dex\030\002 \001(\0132\033.firrtl.FirrtlPB.Expression\032\374"
  "\006\n\006PrimOp\0221\n\002op\030\001 \001(\0162%.firrtl.FirrtlPB."
  "Expression.PrimOp.Op\022(\n\003arg\030\002 \003(\0132\033.firr"
  "tl.FirrtlPB.Expression\0229\n\005const\030\003 \003(\0132*."
  "firrtl.FirrtlPB.Expression.IntegerLitera"
  "l\"\331\005\n\002Op\022\016\n\nOP_UNKNOWN\020\000\022\n\n\006OP_ADD\020\001\022\n\n\006"
  "OP_SUB\020\002\022\013\n\007OP_TAIL\020\003\022\013\n\007OP_HEAD\020\004\022\014\n\010OP"
  "_TIMES\020\005\022\r\n\tOP_DIVIDE\020\006\022\n\n\006OP_REM\020\007\022\021\n\rO"
  "P_SHIFT_LEFT\020\010\022\022\n\016OP_SHIFT_RIGHT\020\t\022\031\n\025OP"
  "_DYNAMIC_SHIFT_LEFT\020\n\022\032\n\026OP_DYNAMIC_SHIF"
  "T_RIGHT\020\013\022\016\n\nOP_BIT_AND\020\014\022\r\n\tOP_BIT_OR\020\r"
  "\022\016\n\nOP_BIT_XOR\020\016\022\016\n\nOP_BIT_NOT\020\017\022\r\n\tOP_C"
  "ONCAT\020\020\022\013\n\007OP_LESS\020\021\022\016\n\nOP_LESS_EQ\020\022\022\016\n\n"
  "OP_GREATER\020\023\022\021\n\rOP_GREATER_EQ\020\024\022\014\n\010OP_EQ"
  "UAL\020\025\022\n\n\006OP_PAD\020\026\022\020\n\014OP_NOT_EQUAL\020\027\022\n\n\006O"
  "P_NEG\020\030\022\021\n\rOP_XOR_REDUCE\020\032\022\016\n\nOP_CONVERT"
  "\020\033\022\016\n\nOP_AS_UINT\020\034\022\016\n\nOP_AS_SINT\020\035\022\023\n\017OP"
  "_EXTRACT_BITS\020\036\022\017\n\013OP_AS_CLOCK\020\037\022\025\n\021OP_A"
  "S_FIXED_POINT\020 \022\021\n\rOP_AND_REDUCE\020!\022\020\n\014OP"
  "_OR_REDUCE\020\"\022\031\n\025OP_INCREASE_PRECISION\020#\022"
  "\031\n\025OP_DECREASE_PRECISION\020$\022\024\n\020OP_SET_PRE"
  "CISION\020%\022\025\n\021OP_AS_ASYNC_RESET\020&\022\013\n\007OP_WR"
  "AP\020\'\022\013\n\007OP_CLIP\020(\022\016\n\nOP_SQUEEZE\020)\022\022\n\016OP_"
  "AS_INTERVAL\020*B\014\n\nexpressionJ\004\010\005\020\006B\026\n\006fir"
  "rtlB\014FirrtlProtosb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto_sccs[43] = {
  &scc_info_FirrtlPB_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_BigInt_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Circuit_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Expression_FixedLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Expression_IntegerLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Expression_Reference_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Expression_SIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Expression_UIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Module_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Module_ExternalModule_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Module_ExternalModule_Parameter_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Module_UserModule_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Port_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_SourceInfo_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_SourceInfo_None_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_SourceInfo_Position_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_Attach_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_CMemory_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_CMemory_TypeAndDepth_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_Connect_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_Instance_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_IsInvalid_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_Memory_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_MemoryPort_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_Node_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_PartialConnect_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_Printf_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_Register_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_Skip_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_Stop_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Statement_Wire_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Top_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Type_AnalogType_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Type_AsyncResetType_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Type_ClockType_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Type_FixedType_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Type_ResetType_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Type_SIntType_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Type_UIntType_inou_2ffirrtl_2ffirrtl_2eproto.base,
  &scc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto_once;
static bool descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto = {
  &descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto_initialized, descriptor_table_protodef_inou_2ffirrtl_2ffirrtl_2eproto, "inou/firrtl/firrtl.proto", 8145,
  &descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto_once, descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto_sccs, descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto_deps, 43, 0,
  schemas, file_default_instances, TableStruct_inou_2ffirrtl_2ffirrtl_2eproto::offsets,
  file_level_metadata_inou_2ffirrtl_2ffirrtl_2eproto, 53, file_level_enum_descriptors_inou_2ffirrtl_2ffirrtl_2eproto, file_level_service_descriptors_inou_2ffirrtl_2ffirrtl_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_inou_2ffirrtl_2ffirrtl_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto)), true);
namespace firrtl {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirrtlPB_SourceInfo_None_Reason_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
  return file_level_enum_descriptors_inou_2ffirrtl_2ffirrtl_2eproto[0];
}
bool FirrtlPB_SourceInfo_None_Reason_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FirrtlPB_SourceInfo_None_Reason FirrtlPB_SourceInfo_None::NONE_SOURCE_INFO_REASON_UNKNOWN;
constexpr FirrtlPB_SourceInfo_None_Reason FirrtlPB_SourceInfo_None::NONE_SOURCE_INFO_REASON_UNLOCATABLE;
constexpr FirrtlPB_SourceInfo_None_Reason FirrtlPB_SourceInfo_None::NONE_SOURCE_INFO_REASON_SUPPRESSED;
constexpr FirrtlPB_SourceInfo_None_Reason FirrtlPB_SourceInfo_None::NONE_SOURCE_INFO_REASON_DEPRECATED;
constexpr FirrtlPB_SourceInfo_None_Reason FirrtlPB_SourceInfo_None::Reason_MIN;
constexpr FirrtlPB_SourceInfo_None_Reason FirrtlPB_SourceInfo_None::Reason_MAX;
constexpr int FirrtlPB_SourceInfo_None::Reason_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirrtlPB_Statement_MemoryPort_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
  return file_level_enum_descriptors_inou_2ffirrtl_2ffirrtl_2eproto[1];
}
bool FirrtlPB_Statement_MemoryPort_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FirrtlPB_Statement_MemoryPort_Direction FirrtlPB_Statement_MemoryPort::MEMORY_PORT_DIRECTION_UNKNOWN;
constexpr FirrtlPB_Statement_MemoryPort_Direction FirrtlPB_Statement_MemoryPort::MEMORY_PORT_DIRECTION_INFER;
constexpr FirrtlPB_Statement_MemoryPort_Direction FirrtlPB_Statement_MemoryPort::MEMORY_PORT_DIRECTION_READ;
constexpr FirrtlPB_Statement_MemoryPort_Direction FirrtlPB_Statement_MemoryPort::MEMORY_PORT_DIRECTION_WRITE;
constexpr FirrtlPB_Statement_MemoryPort_Direction FirrtlPB_Statement_MemoryPort::MEMORY_PORT_DIRECTION_READ_WRITE;
constexpr FirrtlPB_Statement_MemoryPort_Direction FirrtlPB_Statement_MemoryPort::Direction_MIN;
constexpr FirrtlPB_Statement_MemoryPort_Direction FirrtlPB_Statement_MemoryPort::Direction_MAX;
constexpr int FirrtlPB_Statement_MemoryPort::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirrtlPB_Statement_ReadUnderWrite_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
  return file_level_enum_descriptors_inou_2ffirrtl_2ffirrtl_2eproto[2];
}
bool FirrtlPB_Statement_ReadUnderWrite_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FirrtlPB_Statement_ReadUnderWrite FirrtlPB_Statement::UNDEFINED;
constexpr FirrtlPB_Statement_ReadUnderWrite FirrtlPB_Statement::OLD;
constexpr FirrtlPB_Statement_ReadUnderWrite FirrtlPB_Statement::NEW;
constexpr FirrtlPB_Statement_ReadUnderWrite FirrtlPB_Statement::ReadUnderWrite_MIN;
constexpr FirrtlPB_Statement_ReadUnderWrite FirrtlPB_Statement::ReadUnderWrite_MAX;
constexpr int FirrtlPB_Statement::ReadUnderWrite_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirrtlPB_Port_Direction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
  return file_level_enum_descriptors_inou_2ffirrtl_2ffirrtl_2eproto[3];
}
bool FirrtlPB_Port_Direction_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FirrtlPB_Port_Direction FirrtlPB_Port::PORT_DIRECTION_UNKNOWN;
constexpr FirrtlPB_Port_Direction FirrtlPB_Port::PORT_DIRECTION_IN;
constexpr FirrtlPB_Port_Direction FirrtlPB_Port::PORT_DIRECTION_OUT;
constexpr FirrtlPB_Port_Direction FirrtlPB_Port::Direction_MIN;
constexpr FirrtlPB_Port_Direction FirrtlPB_Port::Direction_MAX;
constexpr int FirrtlPB_Port::Direction_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FirrtlPB_Expression_PrimOp_Op_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_inou_2ffirrtl_2ffirrtl_2eproto);
  return file_level_enum_descriptors_inou_2ffirrtl_2ffirrtl_2eproto[4];
}
bool FirrtlPB_Expression_PrimOp_Op_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_UNKNOWN;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_ADD;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_SUB;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_TAIL;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_HEAD;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_TIMES;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_DIVIDE;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_REM;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_SHIFT_LEFT;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_SHIFT_RIGHT;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_DYNAMIC_SHIFT_LEFT;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_DYNAMIC_SHIFT_RIGHT;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_BIT_AND;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_BIT_OR;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_BIT_XOR;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_BIT_NOT;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_CONCAT;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_LESS;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_LESS_EQ;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_GREATER;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_GREATER_EQ;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_EQUAL;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_PAD;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_NOT_EQUAL;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_NEG;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_XOR_REDUCE;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_CONVERT;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_AS_UINT;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_AS_SINT;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_EXTRACT_BITS;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_AS_CLOCK;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_AS_FIXED_POINT;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_AND_REDUCE;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_OR_REDUCE;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_INCREASE_PRECISION;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_DECREASE_PRECISION;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_SET_PRECISION;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_AS_ASYNC_RESET;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_WRAP;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_CLIP;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_SQUEEZE;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::OP_AS_INTERVAL;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::Op_MIN;
constexpr FirrtlPB_Expression_PrimOp_Op FirrtlPB_Expression_PrimOp::Op_MAX;
constexpr int FirrtlPB_Expression_PrimOp::Op_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void FirrtlPB_SourceInfo_None::InitAsDefaultInstance() {
}
class FirrtlPB_SourceInfo_None::_Internal {
 public:
};

FirrtlPB_SourceInfo_None::FirrtlPB_SourceInfo_None()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.SourceInfo.None)
}
FirrtlPB_SourceInfo_None::FirrtlPB_SourceInfo_None(const FirrtlPB_SourceInfo_None& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.SourceInfo.None)
}

void FirrtlPB_SourceInfo_None::SharedCtor() {
  reason_ = 0;
}

FirrtlPB_SourceInfo_None::~FirrtlPB_SourceInfo_None() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.SourceInfo.None)
  SharedDtor();
}

void FirrtlPB_SourceInfo_None::SharedDtor() {
}

void FirrtlPB_SourceInfo_None::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_SourceInfo_None& FirrtlPB_SourceInfo_None::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_SourceInfo_None_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_SourceInfo_None::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.SourceInfo.None)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reason_ = 0;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_SourceInfo_None::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.SourceInfo.None.Reason reason = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::firrtl::FirrtlPB_SourceInfo_None_Reason>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_SourceInfo_None::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.SourceInfo.None)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.SourceInfo.None.Reason reason = 1;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.SourceInfo.None)
  return target;
}

size_t FirrtlPB_SourceInfo_None::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.SourceInfo.None)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.SourceInfo.None.Reason reason = 1;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_SourceInfo_None::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.SourceInfo.None)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_SourceInfo_None* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_SourceInfo_None>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.SourceInfo.None)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.SourceInfo.None)
    MergeFrom(*source);
  }
}

void FirrtlPB_SourceInfo_None::MergeFrom(const FirrtlPB_SourceInfo_None& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.SourceInfo.None)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void FirrtlPB_SourceInfo_None::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.SourceInfo.None)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_SourceInfo_None::CopyFrom(const FirrtlPB_SourceInfo_None& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.SourceInfo.None)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_SourceInfo_None::IsInitialized() const {
  return true;
}

void FirrtlPB_SourceInfo_None::InternalSwap(FirrtlPB_SourceInfo_None* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(reason_, other->reason_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_SourceInfo_None::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_SourceInfo_Position::InitAsDefaultInstance() {
}
class FirrtlPB_SourceInfo_Position::_Internal {
 public:
};

FirrtlPB_SourceInfo_Position::FirrtlPB_SourceInfo_Position()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.SourceInfo.Position)
}
FirrtlPB_SourceInfo_Position::FirrtlPB_SourceInfo_Position(const FirrtlPB_SourceInfo_Position& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  ::memcpy(&line_, &from.line_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_) -
    reinterpret_cast<char*>(&line_)) + sizeof(column_));
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.SourceInfo.Position)
}

void FirrtlPB_SourceInfo_Position::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_SourceInfo_Position_inou_2ffirrtl_2ffirrtl_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_) -
      reinterpret_cast<char*>(&line_)) + sizeof(column_));
}

FirrtlPB_SourceInfo_Position::~FirrtlPB_SourceInfo_Position() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.SourceInfo.Position)
  SharedDtor();
}

void FirrtlPB_SourceInfo_Position::SharedDtor() {
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FirrtlPB_SourceInfo_Position::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_SourceInfo_Position& FirrtlPB_SourceInfo_Position::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_SourceInfo_Position_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_SourceInfo_Position::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.SourceInfo.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&line_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_) -
      reinterpret_cast<char*>(&line_)) + sizeof(column_));
  _internal_metadata_.Clear();
}

const char* FirrtlPB_SourceInfo_Position::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.SourceInfo.Position.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 line = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          line_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 column = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          column_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_SourceInfo_Position::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.SourceInfo.Position)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.SourceInfo.Position.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  // uint32 line = 2;
  if (this->line() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_line(), target);
  }

  // uint32 column = 3;
  if (this->column() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_column(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.SourceInfo.Position)
  return target;
}

size_t FirrtlPB_SourceInfo_Position::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.SourceInfo.Position)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  // uint32 line = 2;
  if (this->line() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_line());
  }

  // uint32 column = 3;
  if (this->column() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_column());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_SourceInfo_Position::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.SourceInfo.Position)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_SourceInfo_Position* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_SourceInfo_Position>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.SourceInfo.Position)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.SourceInfo.Position)
    MergeFrom(*source);
  }
}

void FirrtlPB_SourceInfo_Position::MergeFrom(const FirrtlPB_SourceInfo_Position& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.SourceInfo.Position)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {

    filename_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.filename_);
  }
  if (from.line() != 0) {
    _internal_set_line(from._internal_line());
  }
  if (from.column() != 0) {
    _internal_set_column(from._internal_column());
  }
}

void FirrtlPB_SourceInfo_Position::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.SourceInfo.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_SourceInfo_Position::CopyFrom(const FirrtlPB_SourceInfo_Position& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.SourceInfo.Position)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_SourceInfo_Position::IsInitialized() const {
  return true;
}

void FirrtlPB_SourceInfo_Position::InternalSwap(FirrtlPB_SourceInfo_Position* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(line_, other->line_);
  swap(column_, other->column_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_SourceInfo_Position::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_SourceInfo::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_SourceInfo_default_instance_.none_ = const_cast< ::firrtl::FirrtlPB_SourceInfo_None*>(
      ::firrtl::FirrtlPB_SourceInfo_None::internal_default_instance());
  ::firrtl::_FirrtlPB_SourceInfo_default_instance_.position_ = const_cast< ::firrtl::FirrtlPB_SourceInfo_Position*>(
      ::firrtl::FirrtlPB_SourceInfo_Position::internal_default_instance());
  ::firrtl::_FirrtlPB_SourceInfo_default_instance_.text_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class FirrtlPB_SourceInfo::_Internal {
 public:
  static const ::firrtl::FirrtlPB_SourceInfo_None& none(const FirrtlPB_SourceInfo* msg);
  static const ::firrtl::FirrtlPB_SourceInfo_Position& position(const FirrtlPB_SourceInfo* msg);
};

const ::firrtl::FirrtlPB_SourceInfo_None&
FirrtlPB_SourceInfo::_Internal::none(const FirrtlPB_SourceInfo* msg) {
  return *msg->source_info_.none_;
}
const ::firrtl::FirrtlPB_SourceInfo_Position&
FirrtlPB_SourceInfo::_Internal::position(const FirrtlPB_SourceInfo* msg) {
  return *msg->source_info_.position_;
}
void FirrtlPB_SourceInfo::set_allocated_none(::firrtl::FirrtlPB_SourceInfo_None* none) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_source_info();
  if (none) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      none = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, none, submessage_arena);
    }
    set_has_none();
    source_info_.none_ = none;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.SourceInfo.none)
}
void FirrtlPB_SourceInfo::set_allocated_position(::firrtl::FirrtlPB_SourceInfo_Position* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_source_info();
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    set_has_position();
    source_info_.position_ = position;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.SourceInfo.position)
}
FirrtlPB_SourceInfo::FirrtlPB_SourceInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.SourceInfo)
}
FirrtlPB_SourceInfo::FirrtlPB_SourceInfo(const FirrtlPB_SourceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_source_info();
  switch (from.source_info_case()) {
    case kNone: {
      _internal_mutable_none()->::firrtl::FirrtlPB_SourceInfo_None::MergeFrom(from._internal_none());
      break;
    }
    case kPosition: {
      _internal_mutable_position()->::firrtl::FirrtlPB_SourceInfo_Position::MergeFrom(from._internal_position());
      break;
    }
    case kText: {
      _internal_set_text(from._internal_text());
      break;
    }
    case SOURCE_INFO_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.SourceInfo)
}

void FirrtlPB_SourceInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_SourceInfo_inou_2ffirrtl_2ffirrtl_2eproto.base);
  clear_has_source_info();
}

FirrtlPB_SourceInfo::~FirrtlPB_SourceInfo() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.SourceInfo)
  SharedDtor();
}

void FirrtlPB_SourceInfo::SharedDtor() {
  if (has_source_info()) {
    clear_source_info();
  }
}

void FirrtlPB_SourceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_SourceInfo& FirrtlPB_SourceInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_SourceInfo_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_SourceInfo::clear_source_info() {
// @@protoc_insertion_point(one_of_clear_start:firrtl.FirrtlPB.SourceInfo)
  switch (source_info_case()) {
    case kNone: {
      delete source_info_.none_;
      break;
    }
    case kPosition: {
      delete source_info_.position_;
      break;
    }
    case kText: {
      source_info_.text_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case SOURCE_INFO_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = SOURCE_INFO_NOT_SET;
}


void FirrtlPB_SourceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.SourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_source_info();
  _internal_metadata_.Clear();
}

const char* FirrtlPB_SourceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.SourceInfo.None none = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_none(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.SourceInfo.Position position = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string text = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_text();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.SourceInfo.text"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_SourceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.SourceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.SourceInfo.None none = 1;
  if (_internal_has_none()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::none(this), target, stream);
  }

  // .firrtl.FirrtlPB.SourceInfo.Position position = 2;
  if (_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::position(this), target, stream);
  }

  // string text = 3;
  if (_internal_has_text()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.SourceInfo.text");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_text(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.SourceInfo)
  return target;
}

size_t FirrtlPB_SourceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.SourceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (source_info_case()) {
    // .firrtl.FirrtlPB.SourceInfo.None none = 1;
    case kNone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_info_.none_);
      break;
    }
    // .firrtl.FirrtlPB.SourceInfo.Position position = 2;
    case kPosition: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *source_info_.position_);
      break;
    }
    // string text = 3;
    case kText: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text());
      break;
    }
    case SOURCE_INFO_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_SourceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_SourceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_SourceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.SourceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.SourceInfo)
    MergeFrom(*source);
  }
}

void FirrtlPB_SourceInfo::MergeFrom(const FirrtlPB_SourceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.SourceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.source_info_case()) {
    case kNone: {
      _internal_mutable_none()->::firrtl::FirrtlPB_SourceInfo_None::MergeFrom(from._internal_none());
      break;
    }
    case kPosition: {
      _internal_mutable_position()->::firrtl::FirrtlPB_SourceInfo_Position::MergeFrom(from._internal_position());
      break;
    }
    case kText: {
      _internal_set_text(from._internal_text());
      break;
    }
    case SOURCE_INFO_NOT_SET: {
      break;
    }
  }
}

void FirrtlPB_SourceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_SourceInfo::CopyFrom(const FirrtlPB_SourceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.SourceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_SourceInfo::IsInitialized() const {
  return true;
}

void FirrtlPB_SourceInfo::InternalSwap(FirrtlPB_SourceInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(source_info_, other->source_info_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_SourceInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_BigInt::InitAsDefaultInstance() {
}
class FirrtlPB_BigInt::_Internal {
 public:
};

FirrtlPB_BigInt::FirrtlPB_BigInt()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.BigInt)
}
FirrtlPB_BigInt::FirrtlPB_BigInt(const FirrtlPB_BigInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.BigInt)
}

void FirrtlPB_BigInt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_BigInt_inou_2ffirrtl_2ffirrtl_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FirrtlPB_BigInt::~FirrtlPB_BigInt() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.BigInt)
  SharedDtor();
}

void FirrtlPB_BigInt::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FirrtlPB_BigInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_BigInt& FirrtlPB_BigInt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_BigInt_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_BigInt::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.BigInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FirrtlPB_BigInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bytes value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_BigInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.BigInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.BigInt)
  return target;
}

size_t FirrtlPB_BigInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.BigInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_BigInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.BigInt)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_BigInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_BigInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.BigInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.BigInt)
    MergeFrom(*source);
  }
}

void FirrtlPB_BigInt::MergeFrom(const FirrtlPB_BigInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.BigInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void FirrtlPB_BigInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.BigInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_BigInt::CopyFrom(const FirrtlPB_BigInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.BigInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_BigInt::IsInitialized() const {
  return true;
}

void FirrtlPB_BigInt::InternalSwap(FirrtlPB_BigInt* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_BigInt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Top::InitAsDefaultInstance() {
}
class FirrtlPB_Top::_Internal {
 public:
};

FirrtlPB_Top::FirrtlPB_Top()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Top)
}
FirrtlPB_Top::FirrtlPB_Top(const FirrtlPB_Top& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Top)
}

void FirrtlPB_Top::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Top_inou_2ffirrtl_2ffirrtl_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FirrtlPB_Top::~FirrtlPB_Top() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Top)
  SharedDtor();
}

void FirrtlPB_Top::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FirrtlPB_Top::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Top& FirrtlPB_Top::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Top_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Top::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Top)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Top::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Top.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Top::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Top)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Top.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Top)
  return target;
}

size_t FirrtlPB_Top::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Top)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Top::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Top)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Top* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Top>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Top)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Top)
    MergeFrom(*source);
  }
}

void FirrtlPB_Top::MergeFrom(const FirrtlPB_Top& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Top)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void FirrtlPB_Top::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Top)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Top::CopyFrom(const FirrtlPB_Top& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Top)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Top::IsInitialized() const {
  return true;
}

void FirrtlPB_Top::InternalSwap(FirrtlPB_Top* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Top::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Circuit::InitAsDefaultInstance() {
}
class FirrtlPB_Circuit::_Internal {
 public:
};

FirrtlPB_Circuit::FirrtlPB_Circuit()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Circuit)
}
FirrtlPB_Circuit::FirrtlPB_Circuit(const FirrtlPB_Circuit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      module_(from.module_),
      top_(from.top_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Circuit)
}

void FirrtlPB_Circuit::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Circuit_inou_2ffirrtl_2ffirrtl_2eproto.base);
}

FirrtlPB_Circuit::~FirrtlPB_Circuit() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Circuit)
  SharedDtor();
}

void FirrtlPB_Circuit::SharedDtor() {
}

void FirrtlPB_Circuit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Circuit& FirrtlPB_Circuit::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Circuit_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Circuit::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Circuit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  module_.Clear();
  top_.Clear();
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Circuit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .firrtl.FirrtlPB.Module module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_module(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .firrtl.FirrtlPB.Top top = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_top(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Circuit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Circuit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Module module = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_module_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_module(i), target, stream);
  }

  // repeated .firrtl.FirrtlPB.Top top = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_top_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_top(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Circuit)
  return target;
}

size_t FirrtlPB_Circuit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Circuit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Module module = 1;
  total_size += 1UL * this->_internal_module_size();
  for (const auto& msg : this->module_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .firrtl.FirrtlPB.Top top = 2;
  total_size += 1UL * this->_internal_top_size();
  for (const auto& msg : this->top_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Circuit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Circuit)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Circuit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Circuit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Circuit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Circuit)
    MergeFrom(*source);
  }
}

void FirrtlPB_Circuit::MergeFrom(const FirrtlPB_Circuit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Circuit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  module_.MergeFrom(from.module_);
  top_.MergeFrom(from.top_);
}

void FirrtlPB_Circuit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Circuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Circuit::CopyFrom(const FirrtlPB_Circuit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Circuit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Circuit::IsInitialized() const {
  return true;
}

void FirrtlPB_Circuit::InternalSwap(FirrtlPB_Circuit* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  module_.InternalSwap(&other->module_);
  top_.InternalSwap(&other->top_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Circuit::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Module_ExternalModule_Parameter::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Module_ExternalModule_Parameter_default_instance_.integer_ = const_cast< ::firrtl::FirrtlPB_BigInt*>(
      ::firrtl::FirrtlPB_BigInt::internal_default_instance());
  ::firrtl::_FirrtlPB_Module_ExternalModule_Parameter_default_instance_.double__ = 0;
  ::firrtl::_FirrtlPB_Module_ExternalModule_Parameter_default_instance_.string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::firrtl::_FirrtlPB_Module_ExternalModule_Parameter_default_instance_.raw_string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
class FirrtlPB_Module_ExternalModule_Parameter::_Internal {
 public:
  static const ::firrtl::FirrtlPB_BigInt& integer(const FirrtlPB_Module_ExternalModule_Parameter* msg);
};

const ::firrtl::FirrtlPB_BigInt&
FirrtlPB_Module_ExternalModule_Parameter::_Internal::integer(const FirrtlPB_Module_ExternalModule_Parameter* msg) {
  return *msg->value_.integer_;
}
void FirrtlPB_Module_ExternalModule_Parameter::set_allocated_integer(::firrtl::FirrtlPB_BigInt* integer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_value();
  if (integer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      integer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integer, submessage_arena);
    }
    set_has_integer();
    value_.integer_ = integer;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Module.ExternalModule.Parameter.integer)
}
FirrtlPB_Module_ExternalModule_Parameter::FirrtlPB_Module_ExternalModule_Parameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
}
FirrtlPB_Module_ExternalModule_Parameter::FirrtlPB_Module_ExternalModule_Parameter(const FirrtlPB_Module_ExternalModule_Parameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  clear_has_value();
  switch (from.value_case()) {
    case kInteger: {
      _internal_mutable_integer()->::firrtl::FirrtlPB_BigInt::MergeFrom(from._internal_integer());
      break;
    }
    case kDouble: {
      _internal_set_double_(from._internal_double_());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kRawString: {
      _internal_set_raw_string(from._internal_raw_string());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
}

void FirrtlPB_Module_ExternalModule_Parameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Module_ExternalModule_Parameter_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}

FirrtlPB_Module_ExternalModule_Parameter::~FirrtlPB_Module_ExternalModule_Parameter() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
  SharedDtor();
}

void FirrtlPB_Module_ExternalModule_Parameter::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_value()) {
    clear_value();
  }
}

void FirrtlPB_Module_ExternalModule_Parameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Module_ExternalModule_Parameter& FirrtlPB_Module_ExternalModule_Parameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Module_ExternalModule_Parameter_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Module_ExternalModule_Parameter::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
  switch (value_case()) {
    case kInteger: {
      delete value_.integer_;
      break;
    }
    case kDouble: {
      // No need to clear
      break;
    }
    case kString: {
      value_.string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRawString: {
      value_.raw_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void FirrtlPB_Module_ExternalModule_Parameter::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_value();
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Module_ExternalModule_Parameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Module.ExternalModule.Parameter.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.BigInt integer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_integer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double double = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _internal_set_double_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Module.ExternalModule.Parameter.string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string raw_string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_raw_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Module.ExternalModule.Parameter.raw_string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Module_ExternalModule_Parameter::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Module.ExternalModule.Parameter.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .firrtl.FirrtlPB.BigInt integer = 2;
  if (_internal_has_integer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::integer(this), target, stream);
  }

  // double double = 3;
  if (_internal_has_double_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_(), target);
  }

  // string string = 4;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Module.ExternalModule.Parameter.string");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_string(), target);
  }

  // string raw_string = 5;
  if (_internal_has_raw_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_raw_string().data(), static_cast<int>(this->_internal_raw_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Module.ExternalModule.Parameter.raw_string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_raw_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
  return target;
}

size_t FirrtlPB_Module_ExternalModule_Parameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  switch (value_case()) {
    // .firrtl.FirrtlPB.BigInt integer = 2;
    case kInteger: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.integer_);
      break;
    }
    // double double = 3;
    case kDouble: {
      total_size += 1 + 8;
      break;
    }
    // string string = 4;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    // string raw_string = 5;
    case kRawString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_raw_string());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Module_ExternalModule_Parameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Module_ExternalModule_Parameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Module_ExternalModule_Parameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
    MergeFrom(*source);
  }
}

void FirrtlPB_Module_ExternalModule_Parameter::MergeFrom(const FirrtlPB_Module_ExternalModule_Parameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  switch (from.value_case()) {
    case kInteger: {
      _internal_mutable_integer()->::firrtl::FirrtlPB_BigInt::MergeFrom(from._internal_integer());
      break;
    }
    case kDouble: {
      _internal_set_double_(from._internal_double_());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kRawString: {
      _internal_set_raw_string(from._internal_raw_string());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void FirrtlPB_Module_ExternalModule_Parameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Module_ExternalModule_Parameter::CopyFrom(const FirrtlPB_Module_ExternalModule_Parameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Module.ExternalModule.Parameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Module_ExternalModule_Parameter::IsInitialized() const {
  return true;
}

void FirrtlPB_Module_ExternalModule_Parameter::InternalSwap(FirrtlPB_Module_ExternalModule_Parameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Module_ExternalModule_Parameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Module_ExternalModule::InitAsDefaultInstance() {
}
class FirrtlPB_Module_ExternalModule::_Internal {
 public:
};

FirrtlPB_Module_ExternalModule::FirrtlPB_Module_ExternalModule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Module.ExternalModule)
}
FirrtlPB_Module_ExternalModule::FirrtlPB_Module_ExternalModule(const FirrtlPB_Module_ExternalModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      port_(from.port_),
      parameter_(from.parameter_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  defined_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_defined_name().empty()) {
    defined_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.defined_name_);
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Module.ExternalModule)
}

void FirrtlPB_Module_ExternalModule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Module_ExternalModule_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defined_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FirrtlPB_Module_ExternalModule::~FirrtlPB_Module_ExternalModule() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Module.ExternalModule)
  SharedDtor();
}

void FirrtlPB_Module_ExternalModule::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defined_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FirrtlPB_Module_ExternalModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Module_ExternalModule& FirrtlPB_Module_ExternalModule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Module_ExternalModule_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Module_ExternalModule::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Module.ExternalModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_.Clear();
  parameter_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  defined_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Module_ExternalModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Module.ExternalModule.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .firrtl.FirrtlPB.Port port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_port(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // string defined_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_defined_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Module.ExternalModule.defined_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .firrtl.FirrtlPB.Module.ExternalModule.Parameter parameter = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parameter(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Module_ExternalModule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Module.ExternalModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Module.ExternalModule.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .firrtl.FirrtlPB.Port port = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_port_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_port(i), target, stream);
  }

  // string defined_name = 3;
  if (this->defined_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_defined_name().data(), static_cast<int>(this->_internal_defined_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Module.ExternalModule.defined_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_defined_name(), target);
  }

  // repeated .firrtl.FirrtlPB.Module.ExternalModule.Parameter parameter = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parameter_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_parameter(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Module.ExternalModule)
  return target;
}

size_t FirrtlPB_Module_ExternalModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Module.ExternalModule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Port port = 2;
  total_size += 1UL * this->_internal_port_size();
  for (const auto& msg : this->port_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .firrtl.FirrtlPB.Module.ExternalModule.Parameter parameter = 4;
  total_size += 1UL * this->_internal_parameter_size();
  for (const auto& msg : this->parameter_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string defined_name = 3;
  if (this->defined_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_defined_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Module_ExternalModule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Module.ExternalModule)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Module_ExternalModule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Module_ExternalModule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Module.ExternalModule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Module.ExternalModule)
    MergeFrom(*source);
  }
}

void FirrtlPB_Module_ExternalModule::MergeFrom(const FirrtlPB_Module_ExternalModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Module.ExternalModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  port_.MergeFrom(from.port_);
  parameter_.MergeFrom(from.parameter_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.defined_name().size() > 0) {

    defined_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.defined_name_);
  }
}

void FirrtlPB_Module_ExternalModule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Module.ExternalModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Module_ExternalModule::CopyFrom(const FirrtlPB_Module_ExternalModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Module.ExternalModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Module_ExternalModule::IsInitialized() const {
  return true;
}

void FirrtlPB_Module_ExternalModule::InternalSwap(FirrtlPB_Module_ExternalModule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  port_.InternalSwap(&other->port_);
  parameter_.InternalSwap(&other->parameter_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  defined_name_.Swap(&other->defined_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Module_ExternalModule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Module_UserModule::InitAsDefaultInstance() {
}
class FirrtlPB_Module_UserModule::_Internal {
 public:
};

FirrtlPB_Module_UserModule::FirrtlPB_Module_UserModule()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Module.UserModule)
}
FirrtlPB_Module_UserModule::FirrtlPB_Module_UserModule(const FirrtlPB_Module_UserModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      port_(from.port_),
      statement_(from.statement_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Module.UserModule)
}

void FirrtlPB_Module_UserModule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Module_UserModule_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FirrtlPB_Module_UserModule::~FirrtlPB_Module_UserModule() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Module.UserModule)
  SharedDtor();
}

void FirrtlPB_Module_UserModule::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FirrtlPB_Module_UserModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Module_UserModule& FirrtlPB_Module_UserModule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Module_UserModule_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Module_UserModule::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Module.UserModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  port_.Clear();
  statement_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Module_UserModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Module.UserModule.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .firrtl.FirrtlPB.Port port = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_port(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .firrtl.FirrtlPB.Statement statement = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_statement(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Module_UserModule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Module.UserModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Module.UserModule.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .firrtl.FirrtlPB.Port port = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_port_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_port(i), target, stream);
  }

  // repeated .firrtl.FirrtlPB.Statement statement = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_statement_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_statement(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Module.UserModule)
  return target;
}

size_t FirrtlPB_Module_UserModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Module.UserModule)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Port port = 2;
  total_size += 1UL * this->_internal_port_size();
  for (const auto& msg : this->port_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .firrtl.FirrtlPB.Statement statement = 3;
  total_size += 1UL * this->_internal_statement_size();
  for (const auto& msg : this->statement_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Module_UserModule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Module.UserModule)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Module_UserModule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Module_UserModule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Module.UserModule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Module.UserModule)
    MergeFrom(*source);
  }
}

void FirrtlPB_Module_UserModule::MergeFrom(const FirrtlPB_Module_UserModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Module.UserModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  port_.MergeFrom(from.port_);
  statement_.MergeFrom(from.statement_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void FirrtlPB_Module_UserModule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Module.UserModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Module_UserModule::CopyFrom(const FirrtlPB_Module_UserModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Module.UserModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Module_UserModule::IsInitialized() const {
  return true;
}

void FirrtlPB_Module_UserModule::InternalSwap(FirrtlPB_Module_UserModule* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  port_.InternalSwap(&other->port_);
  statement_.InternalSwap(&other->statement_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Module_UserModule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Module::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Module_default_instance_.external_module_ = const_cast< ::firrtl::FirrtlPB_Module_ExternalModule*>(
      ::firrtl::FirrtlPB_Module_ExternalModule::internal_default_instance());
  ::firrtl::_FirrtlPB_Module_default_instance_.user_module_ = const_cast< ::firrtl::FirrtlPB_Module_UserModule*>(
      ::firrtl::FirrtlPB_Module_UserModule::internal_default_instance());
}
class FirrtlPB_Module::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Module_ExternalModule& external_module(const FirrtlPB_Module* msg);
  static const ::firrtl::FirrtlPB_Module_UserModule& user_module(const FirrtlPB_Module* msg);
};

const ::firrtl::FirrtlPB_Module_ExternalModule&
FirrtlPB_Module::_Internal::external_module(const FirrtlPB_Module* msg) {
  return *msg->module_.external_module_;
}
const ::firrtl::FirrtlPB_Module_UserModule&
FirrtlPB_Module::_Internal::user_module(const FirrtlPB_Module* msg) {
  return *msg->module_.user_module_;
}
void FirrtlPB_Module::set_allocated_external_module(::firrtl::FirrtlPB_Module_ExternalModule* external_module) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_module();
  if (external_module) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      external_module = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, external_module, submessage_arena);
    }
    set_has_external_module();
    module_.external_module_ = external_module;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Module.external_module)
}
void FirrtlPB_Module::set_allocated_user_module(::firrtl::FirrtlPB_Module_UserModule* user_module) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_module();
  if (user_module) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      user_module = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_module, submessage_arena);
    }
    set_has_user_module();
    module_.user_module_ = user_module;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Module.user_module)
}
FirrtlPB_Module::FirrtlPB_Module()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Module)
}
FirrtlPB_Module::FirrtlPB_Module(const FirrtlPB_Module& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_module();
  switch (from.module_case()) {
    case kExternalModule: {
      _internal_mutable_external_module()->::firrtl::FirrtlPB_Module_ExternalModule::MergeFrom(from._internal_external_module());
      break;
    }
    case kUserModule: {
      _internal_mutable_user_module()->::firrtl::FirrtlPB_Module_UserModule::MergeFrom(from._internal_user_module());
      break;
    }
    case MODULE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Module)
}

void FirrtlPB_Module::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Module_inou_2ffirrtl_2ffirrtl_2eproto.base);
  clear_has_module();
}

FirrtlPB_Module::~FirrtlPB_Module() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Module)
  SharedDtor();
}

void FirrtlPB_Module::SharedDtor() {
  if (has_module()) {
    clear_module();
  }
}

void FirrtlPB_Module::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Module& FirrtlPB_Module::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Module_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Module::clear_module() {
// @@protoc_insertion_point(one_of_clear_start:firrtl.FirrtlPB.Module)
  switch (module_case()) {
    case kExternalModule: {
      delete module_.external_module_;
      break;
    }
    case kUserModule: {
      delete module_.user_module_;
      break;
    }
    case MODULE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MODULE_NOT_SET;
}


void FirrtlPB_Module::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Module)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_module();
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Module::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Module.ExternalModule external_module = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_external_module(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Module.UserModule user_module = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_module(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Module::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Module)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Module.ExternalModule external_module = 1;
  if (_internal_has_external_module()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::external_module(this), target, stream);
  }

  // .firrtl.FirrtlPB.Module.UserModule user_module = 2;
  if (_internal_has_user_module()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::user_module(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Module)
  return target;
}

size_t FirrtlPB_Module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Module)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (module_case()) {
    // .firrtl.FirrtlPB.Module.ExternalModule external_module = 1;
    case kExternalModule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *module_.external_module_);
      break;
    }
    // .firrtl.FirrtlPB.Module.UserModule user_module = 2;
    case kUserModule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *module_.user_module_);
      break;
    }
    case MODULE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Module::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Module)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Module* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Module>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Module)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Module)
    MergeFrom(*source);
  }
}

void FirrtlPB_Module::MergeFrom(const FirrtlPB_Module& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Module)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.module_case()) {
    case kExternalModule: {
      _internal_mutable_external_module()->::firrtl::FirrtlPB_Module_ExternalModule::MergeFrom(from._internal_external_module());
      break;
    }
    case kUserModule: {
      _internal_mutable_user_module()->::firrtl::FirrtlPB_Module_UserModule::MergeFrom(from._internal_user_module());
      break;
    }
    case MODULE_NOT_SET: {
      break;
    }
  }
}

void FirrtlPB_Module::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Module::CopyFrom(const FirrtlPB_Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Module::IsInitialized() const {
  return true;
}

void FirrtlPB_Module::InternalSwap(FirrtlPB_Module* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(module_, other->module_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Module::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_Wire::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_Wire_default_instance_._instance.get_mutable()->type_ = const_cast< ::firrtl::FirrtlPB_Type*>(
      ::firrtl::FirrtlPB_Type::internal_default_instance());
}
class FirrtlPB_Statement_Wire::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Type& type(const FirrtlPB_Statement_Wire* msg);
};

const ::firrtl::FirrtlPB_Type&
FirrtlPB_Statement_Wire::_Internal::type(const FirrtlPB_Statement_Wire* msg) {
  return *msg->type_;
}
FirrtlPB_Statement_Wire::FirrtlPB_Statement_Wire()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.Wire)
}
FirrtlPB_Statement_Wire::FirrtlPB_Statement_Wire(const FirrtlPB_Statement_Wire& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_type()) {
    type_ = new ::firrtl::FirrtlPB_Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.Wire)
}

void FirrtlPB_Statement_Wire::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_Wire_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  type_ = nullptr;
}

FirrtlPB_Statement_Wire::~FirrtlPB_Statement_Wire() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.Wire)
  SharedDtor();
}

void FirrtlPB_Statement_Wire::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void FirrtlPB_Statement_Wire::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_Wire& FirrtlPB_Statement_Wire::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_Wire_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_Wire::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.Wire)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_Wire::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.Wire.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_Wire::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.Wire)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.Wire.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .firrtl.FirrtlPB.Type type = 2;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.Wire)
  return target;
}

size_t FirrtlPB_Statement_Wire::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.Wire)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .firrtl.FirrtlPB.Type type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_Wire::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.Wire)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_Wire* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_Wire>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.Wire)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.Wire)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_Wire::MergeFrom(const FirrtlPB_Statement_Wire& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.Wire)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_type()) {
    _internal_mutable_type()->::firrtl::FirrtlPB_Type::MergeFrom(from._internal_type());
  }
}

void FirrtlPB_Statement_Wire::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.Wire)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_Wire::CopyFrom(const FirrtlPB_Statement_Wire& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.Wire)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_Wire::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_Wire::InternalSwap(FirrtlPB_Statement_Wire* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_Wire::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_Register::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_Register_default_instance_._instance.get_mutable()->type_ = const_cast< ::firrtl::FirrtlPB_Type*>(
      ::firrtl::FirrtlPB_Type::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_Register_default_instance_._instance.get_mutable()->clock_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_Register_default_instance_._instance.get_mutable()->reset_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_Register_default_instance_._instance.get_mutable()->init_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Statement_Register::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Type& type(const FirrtlPB_Statement_Register* msg);
  static const ::firrtl::FirrtlPB_Expression& clock(const FirrtlPB_Statement_Register* msg);
  static const ::firrtl::FirrtlPB_Expression& reset(const FirrtlPB_Statement_Register* msg);
  static const ::firrtl::FirrtlPB_Expression& init(const FirrtlPB_Statement_Register* msg);
};

const ::firrtl::FirrtlPB_Type&
FirrtlPB_Statement_Register::_Internal::type(const FirrtlPB_Statement_Register* msg) {
  return *msg->type_;
}
const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_Register::_Internal::clock(const FirrtlPB_Statement_Register* msg) {
  return *msg->clock_;
}
const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_Register::_Internal::reset(const FirrtlPB_Statement_Register* msg) {
  return *msg->reset_;
}
const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_Register::_Internal::init(const FirrtlPB_Statement_Register* msg) {
  return *msg->init_;
}
FirrtlPB_Statement_Register::FirrtlPB_Statement_Register()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.Register)
}
FirrtlPB_Statement_Register::FirrtlPB_Statement_Register(const FirrtlPB_Statement_Register& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_type()) {
    type_ = new ::firrtl::FirrtlPB_Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  if (from._internal_has_clock()) {
    clock_ = new ::firrtl::FirrtlPB_Expression(*from.clock_);
  } else {
    clock_ = nullptr;
  }
  if (from._internal_has_reset()) {
    reset_ = new ::firrtl::FirrtlPB_Expression(*from.reset_);
  } else {
    reset_ = nullptr;
  }
  if (from._internal_has_init()) {
    init_ = new ::firrtl::FirrtlPB_Expression(*from.init_);
  } else {
    init_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.Register)
}

void FirrtlPB_Statement_Register::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_Register_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&init_) -
      reinterpret_cast<char*>(&type_)) + sizeof(init_));
}

FirrtlPB_Statement_Register::~FirrtlPB_Statement_Register() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.Register)
  SharedDtor();
}

void FirrtlPB_Statement_Register::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
  if (this != internal_default_instance()) delete clock_;
  if (this != internal_default_instance()) delete reset_;
  if (this != internal_default_instance()) delete init_;
}

void FirrtlPB_Statement_Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_Register& FirrtlPB_Statement_Register::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_Register_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_Register::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && clock_ != nullptr) {
    delete clock_;
  }
  clock_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && reset_ != nullptr) {
    delete reset_;
  }
  reset_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && init_ != nullptr) {
    delete init_;
  }
  init_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_Register::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.Register.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression clock = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_clock(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression reset = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression init = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_init(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_Register::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.Register.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .firrtl.FirrtlPB.Type type = 2;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression clock = 3;
  if (this->has_clock()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::clock(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression reset = 4;
  if (this->has_reset()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reset(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression init = 5;
  if (this->has_init()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::init(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.Register)
  return target;
}

size_t FirrtlPB_Statement_Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.Register)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .firrtl.FirrtlPB.Type type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .firrtl.FirrtlPB.Expression clock = 3;
  if (this->has_clock()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clock_);
  }

  // .firrtl.FirrtlPB.Expression reset = 4;
  if (this->has_reset()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reset_);
  }

  // .firrtl.FirrtlPB.Expression init = 5;
  if (this->has_init()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *init_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_Register::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.Register)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_Register* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_Register>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.Register)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.Register)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_Register::MergeFrom(const FirrtlPB_Statement_Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.Register)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_type()) {
    _internal_mutable_type()->::firrtl::FirrtlPB_Type::MergeFrom(from._internal_type());
  }
  if (from.has_clock()) {
    _internal_mutable_clock()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_clock());
  }
  if (from.has_reset()) {
    _internal_mutable_reset()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_reset());
  }
  if (from.has_init()) {
    _internal_mutable_init()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_init());
  }
}

void FirrtlPB_Statement_Register::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_Register::CopyFrom(const FirrtlPB_Statement_Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_Register::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_Register::InternalSwap(FirrtlPB_Statement_Register* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(clock_, other->clock_);
  swap(reset_, other->reset_);
  swap(init_, other->init_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_Register::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_Memory::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_Memory_default_instance_._instance.get_mutable()->type_ = const_cast< ::firrtl::FirrtlPB_Type*>(
      ::firrtl::FirrtlPB_Type::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_Memory_default_instance_.uint_depth_ = 0u;
  ::firrtl::_FirrtlPB_Statement_Memory_default_instance_.bigint_depth_ = const_cast< ::firrtl::FirrtlPB_BigInt*>(
      ::firrtl::FirrtlPB_BigInt::internal_default_instance());
}
class FirrtlPB_Statement_Memory::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Type& type(const FirrtlPB_Statement_Memory* msg);
  static const ::firrtl::FirrtlPB_BigInt& bigint_depth(const FirrtlPB_Statement_Memory* msg);
};

const ::firrtl::FirrtlPB_Type&
FirrtlPB_Statement_Memory::_Internal::type(const FirrtlPB_Statement_Memory* msg) {
  return *msg->type_;
}
const ::firrtl::FirrtlPB_BigInt&
FirrtlPB_Statement_Memory::_Internal::bigint_depth(const FirrtlPB_Statement_Memory* msg) {
  return *msg->depth_.bigint_depth_;
}
void FirrtlPB_Statement_Memory::set_allocated_bigint_depth(::firrtl::FirrtlPB_BigInt* bigint_depth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_depth();
  if (bigint_depth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bigint_depth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bigint_depth, submessage_arena);
    }
    set_has_bigint_depth();
    depth_.bigint_depth_ = bigint_depth;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.Memory.bigint_depth)
}
FirrtlPB_Statement_Memory::FirrtlPB_Statement_Memory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.Memory)
}
FirrtlPB_Statement_Memory::FirrtlPB_Statement_Memory(const FirrtlPB_Statement_Memory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      reader_id_(from.reader_id_),
      writer_id_(from.writer_id_),
      readwriter_id_(from.readwriter_id_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_type()) {
    type_ = new ::firrtl::FirrtlPB_Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  ::memcpy(&write_latency_, &from.write_latency_,
    static_cast<size_t>(reinterpret_cast<char*>(&read_under_write_) -
    reinterpret_cast<char*>(&write_latency_)) + sizeof(read_under_write_));
  clear_has_depth();
  switch (from.depth_case()) {
    case kUintDepth: {
      _internal_set_uint_depth(from._internal_uint_depth());
      break;
    }
    case kBigintDepth: {
      _internal_mutable_bigint_depth()->::firrtl::FirrtlPB_BigInt::MergeFrom(from._internal_bigint_depth());
      break;
    }
    case DEPTH_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.Memory)
}

void FirrtlPB_Statement_Memory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_Memory_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_under_write_) -
      reinterpret_cast<char*>(&type_)) + sizeof(read_under_write_));
  clear_has_depth();
}

FirrtlPB_Statement_Memory::~FirrtlPB_Statement_Memory() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.Memory)
  SharedDtor();
}

void FirrtlPB_Statement_Memory::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
  if (has_depth()) {
    clear_depth();
  }
}

void FirrtlPB_Statement_Memory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_Memory& FirrtlPB_Statement_Memory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_Memory_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_Memory::clear_depth() {
// @@protoc_insertion_point(one_of_clear_start:firrtl.FirrtlPB.Statement.Memory)
  switch (depth_case()) {
    case kUintDepth: {
      // No need to clear
      break;
    }
    case kBigintDepth: {
      delete depth_.bigint_depth_;
      break;
    }
    case DEPTH_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DEPTH_NOT_SET;
}


void FirrtlPB_Statement_Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.Memory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reader_id_.Clear();
  writer_id_.Clear();
  readwriter_id_.Clear();
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  ::memset(&write_latency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_under_write_) -
      reinterpret_cast<char*>(&write_latency_)) + sizeof(read_under_write_));
  clear_depth();
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_Memory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.Memory.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 uint_depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _internal_set_uint_depth(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 write_latency = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          write_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 read_latency = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          read_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string reader_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_reader_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.Memory.reader_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string writer_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_writer_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.Memory.writer_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string readwriter_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_readwriter_id();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.Memory.readwriter_id"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.BigInt bigint_depth = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_bigint_depth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.ReadUnderWrite read_under_write = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_read_under_write(static_cast<::firrtl::FirrtlPB_Statement_ReadUnderWrite>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_Memory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.Memory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.Memory.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .firrtl.FirrtlPB.Type type = 2;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::type(this), target, stream);
  }

  // uint32 uint_depth = 3;
  if (_internal_has_uint_depth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_uint_depth(), target);
  }

  // uint32 write_latency = 4;
  if (this->write_latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_write_latency(), target);
  }

  // uint32 read_latency = 5;
  if (this->read_latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_read_latency(), target);
  }

  // repeated string reader_id = 6;
  for (int i = 0, n = this->_internal_reader_id_size(); i < n; i++) {
    const auto& s = this->_internal_reader_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.Memory.reader_id");
    target = stream->WriteString(6, s, target);
  }

  // repeated string writer_id = 7;
  for (int i = 0, n = this->_internal_writer_id_size(); i < n; i++) {
    const auto& s = this->_internal_writer_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.Memory.writer_id");
    target = stream->WriteString(7, s, target);
  }

  // repeated string readwriter_id = 8;
  for (int i = 0, n = this->_internal_readwriter_id_size(); i < n; i++) {
    const auto& s = this->_internal_readwriter_id(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.Memory.readwriter_id");
    target = stream->WriteString(8, s, target);
  }

  // .firrtl.FirrtlPB.BigInt bigint_depth = 9;
  if (_internal_has_bigint_depth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::bigint_depth(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.ReadUnderWrite read_under_write = 10;
  if (this->read_under_write() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_read_under_write(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.Memory)
  return target;
}

size_t FirrtlPB_Statement_Memory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.Memory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string reader_id = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(reader_id_.size());
  for (int i = 0, n = reader_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      reader_id_.Get(i));
  }

  // repeated string writer_id = 7;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(writer_id_.size());
  for (int i = 0, n = writer_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      writer_id_.Get(i));
  }

  // repeated string readwriter_id = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(readwriter_id_.size());
  for (int i = 0, n = readwriter_id_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      readwriter_id_.Get(i));
  }

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .firrtl.FirrtlPB.Type type = 2;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // uint32 write_latency = 4;
  if (this->write_latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_write_latency());
  }

  // uint32 read_latency = 5;
  if (this->read_latency() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_read_latency());
  }

  // .firrtl.FirrtlPB.Statement.ReadUnderWrite read_under_write = 10;
  if (this->read_under_write() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_read_under_write());
  }

  switch (depth_case()) {
    // uint32 uint_depth = 3;
    case kUintDepth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_uint_depth());
      break;
    }
    // .firrtl.FirrtlPB.BigInt bigint_depth = 9;
    case kBigintDepth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *depth_.bigint_depth_);
      break;
    }
    case DEPTH_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_Memory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_Memory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_Memory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.Memory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.Memory)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_Memory::MergeFrom(const FirrtlPB_Statement_Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reader_id_.MergeFrom(from.reader_id_);
  writer_id_.MergeFrom(from.writer_id_);
  readwriter_id_.MergeFrom(from.readwriter_id_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_type()) {
    _internal_mutable_type()->::firrtl::FirrtlPB_Type::MergeFrom(from._internal_type());
  }
  if (from.write_latency() != 0) {
    _internal_set_write_latency(from._internal_write_latency());
  }
  if (from.read_latency() != 0) {
    _internal_set_read_latency(from._internal_read_latency());
  }
  if (from.read_under_write() != 0) {
    _internal_set_read_under_write(from._internal_read_under_write());
  }
  switch (from.depth_case()) {
    case kUintDepth: {
      _internal_set_uint_depth(from._internal_uint_depth());
      break;
    }
    case kBigintDepth: {
      _internal_mutable_bigint_depth()->::firrtl::FirrtlPB_BigInt::MergeFrom(from._internal_bigint_depth());
      break;
    }
    case DEPTH_NOT_SET: {
      break;
    }
  }
}

void FirrtlPB_Statement_Memory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_Memory::CopyFrom(const FirrtlPB_Statement_Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_Memory::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_Memory::InternalSwap(FirrtlPB_Statement_Memory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  reader_id_.InternalSwap(&other->reader_id_);
  writer_id_.InternalSwap(&other->writer_id_);
  readwriter_id_.InternalSwap(&other->readwriter_id_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(write_latency_, other->write_latency_);
  swap(read_latency_, other->read_latency_);
  swap(read_under_write_, other->read_under_write_);
  swap(depth_, other->depth_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_Memory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_CMemory_TypeAndDepth::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_CMemory_TypeAndDepth_default_instance_._instance.get_mutable()->data_type_ = const_cast< ::firrtl::FirrtlPB_Type*>(
      ::firrtl::FirrtlPB_Type::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_CMemory_TypeAndDepth_default_instance_._instance.get_mutable()->depth_ = const_cast< ::firrtl::FirrtlPB_BigInt*>(
      ::firrtl::FirrtlPB_BigInt::internal_default_instance());
}
class FirrtlPB_Statement_CMemory_TypeAndDepth::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Type& data_type(const FirrtlPB_Statement_CMemory_TypeAndDepth* msg);
  static const ::firrtl::FirrtlPB_BigInt& depth(const FirrtlPB_Statement_CMemory_TypeAndDepth* msg);
};

const ::firrtl::FirrtlPB_Type&
FirrtlPB_Statement_CMemory_TypeAndDepth::_Internal::data_type(const FirrtlPB_Statement_CMemory_TypeAndDepth* msg) {
  return *msg->data_type_;
}
const ::firrtl::FirrtlPB_BigInt&
FirrtlPB_Statement_CMemory_TypeAndDepth::_Internal::depth(const FirrtlPB_Statement_CMemory_TypeAndDepth* msg) {
  return *msg->depth_;
}
FirrtlPB_Statement_CMemory_TypeAndDepth::FirrtlPB_Statement_CMemory_TypeAndDepth()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
}
FirrtlPB_Statement_CMemory_TypeAndDepth::FirrtlPB_Statement_CMemory_TypeAndDepth(const FirrtlPB_Statement_CMemory_TypeAndDepth& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_data_type()) {
    data_type_ = new ::firrtl::FirrtlPB_Type(*from.data_type_);
  } else {
    data_type_ = nullptr;
  }
  if (from._internal_has_depth()) {
    depth_ = new ::firrtl::FirrtlPB_BigInt(*from.depth_);
  } else {
    depth_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
}

void FirrtlPB_Statement_CMemory_TypeAndDepth::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_CMemory_TypeAndDepth_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&depth_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(depth_));
}

FirrtlPB_Statement_CMemory_TypeAndDepth::~FirrtlPB_Statement_CMemory_TypeAndDepth() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
  SharedDtor();
}

void FirrtlPB_Statement_CMemory_TypeAndDepth::SharedDtor() {
  if (this != internal_default_instance()) delete data_type_;
  if (this != internal_default_instance()) delete depth_;
}

void FirrtlPB_Statement_CMemory_TypeAndDepth::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_CMemory_TypeAndDepth& FirrtlPB_Statement_CMemory_TypeAndDepth::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_CMemory_TypeAndDepth_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_CMemory_TypeAndDepth::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && data_type_ != nullptr) {
    delete data_type_;
  }
  data_type_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && depth_ != nullptr) {
    delete depth_;
  }
  depth_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_CMemory_TypeAndDepth::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Type data_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.BigInt depth = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_depth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_CMemory_TypeAndDepth::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Type data_type = 1;
  if (this->has_data_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data_type(this), target, stream);
  }

  // .firrtl.FirrtlPB.BigInt depth = 2;
  if (this->has_depth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::depth(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
  return target;
}

size_t FirrtlPB_Statement_CMemory_TypeAndDepth::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Type data_type = 1;
  if (this->has_data_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_type_);
  }

  // .firrtl.FirrtlPB.BigInt depth = 2;
  if (this->has_depth()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *depth_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_CMemory_TypeAndDepth::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_CMemory_TypeAndDepth* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_CMemory_TypeAndDepth>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_CMemory_TypeAndDepth::MergeFrom(const FirrtlPB_Statement_CMemory_TypeAndDepth& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data_type()) {
    _internal_mutable_data_type()->::firrtl::FirrtlPB_Type::MergeFrom(from._internal_data_type());
  }
  if (from.has_depth()) {
    _internal_mutable_depth()->::firrtl::FirrtlPB_BigInt::MergeFrom(from._internal_depth());
  }
}

void FirrtlPB_Statement_CMemory_TypeAndDepth::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_CMemory_TypeAndDepth::CopyFrom(const FirrtlPB_Statement_CMemory_TypeAndDepth& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_CMemory_TypeAndDepth::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_CMemory_TypeAndDepth::InternalSwap(FirrtlPB_Statement_CMemory_TypeAndDepth* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(data_type_, other->data_type_);
  swap(depth_, other->depth_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_CMemory_TypeAndDepth::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_CMemory::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_CMemory_default_instance_.vector_type_ = const_cast< ::firrtl::FirrtlPB_Type_VectorType*>(
      ::firrtl::FirrtlPB_Type_VectorType::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_CMemory_default_instance_.type_and_depth_ = const_cast< ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth*>(
      ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth::internal_default_instance());
}
class FirrtlPB_Statement_CMemory::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Type_VectorType& vector_type(const FirrtlPB_Statement_CMemory* msg);
  static const ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth& type_and_depth(const FirrtlPB_Statement_CMemory* msg);
};

const ::firrtl::FirrtlPB_Type_VectorType&
FirrtlPB_Statement_CMemory::_Internal::vector_type(const FirrtlPB_Statement_CMemory* msg) {
  return *msg->type_.vector_type_;
}
const ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth&
FirrtlPB_Statement_CMemory::_Internal::type_and_depth(const FirrtlPB_Statement_CMemory* msg) {
  return *msg->type_.type_and_depth_;
}
void FirrtlPB_Statement_CMemory::set_allocated_vector_type(::firrtl::FirrtlPB_Type_VectorType* vector_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (vector_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vector_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector_type, submessage_arena);
    }
    set_has_vector_type();
    type_.vector_type_ = vector_type;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.CMemory.vector_type)
}
void FirrtlPB_Statement_CMemory::set_allocated_type_and_depth(::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* type_and_depth) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (type_and_depth) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      type_and_depth = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type_and_depth, submessage_arena);
    }
    set_has_type_and_depth();
    type_.type_and_depth_ = type_and_depth;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.CMemory.type_and_depth)
}
FirrtlPB_Statement_CMemory::FirrtlPB_Statement_CMemory()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.CMemory)
}
FirrtlPB_Statement_CMemory::FirrtlPB_Statement_CMemory(const FirrtlPB_Statement_CMemory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  ::memcpy(&sync_read_, &from.sync_read_,
    static_cast<size_t>(reinterpret_cast<char*>(&read_under_write_) -
    reinterpret_cast<char*>(&sync_read_)) + sizeof(read_under_write_));
  clear_has_type();
  switch (from.type_case()) {
    case kVectorType: {
      _internal_mutable_vector_type()->::firrtl::FirrtlPB_Type_VectorType::MergeFrom(from._internal_vector_type());
      break;
    }
    case kTypeAndDepth: {
      _internal_mutable_type_and_depth()->::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth::MergeFrom(from._internal_type_and_depth());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.CMemory)
}

void FirrtlPB_Statement_CMemory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_CMemory_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sync_read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_under_write_) -
      reinterpret_cast<char*>(&sync_read_)) + sizeof(read_under_write_));
  clear_has_type();
}

FirrtlPB_Statement_CMemory::~FirrtlPB_Statement_CMemory() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.CMemory)
  SharedDtor();
}

void FirrtlPB_Statement_CMemory::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_type()) {
    clear_type();
  }
}

void FirrtlPB_Statement_CMemory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_CMemory& FirrtlPB_Statement_CMemory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_CMemory_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_CMemory::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:firrtl.FirrtlPB.Statement.CMemory)
  switch (type_case()) {
    case kVectorType: {
      delete type_.vector_type_;
      break;
    }
    case kTypeAndDepth: {
      delete type_.type_and_depth_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void FirrtlPB_Statement_CMemory::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.CMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&sync_read_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&read_under_write_) -
      reinterpret_cast<char*>(&sync_read_)) + sizeof(read_under_write_));
  clear_type();
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_CMemory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.CMemory.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type.VectorType vector_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool sync_read = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          sync_read_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth type_and_depth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_type_and_depth(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.ReadUnderWrite read_under_write = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_read_under_write(static_cast<::firrtl::FirrtlPB_Statement_ReadUnderWrite>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_CMemory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.CMemory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.CMemory.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .firrtl.FirrtlPB.Type.VectorType vector_type = 2;
  if (_internal_has_vector_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::vector_type(this), target, stream);
  }

  // bool sync_read = 3;
  if (this->sync_read() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_sync_read(), target);
  }

  // .firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth type_and_depth = 4;
  if (_internal_has_type_and_depth()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::type_and_depth(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.ReadUnderWrite read_under_write = 5;
  if (this->read_under_write() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_read_under_write(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.CMemory)
  return target;
}

size_t FirrtlPB_Statement_CMemory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.CMemory)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // bool sync_read = 3;
  if (this->sync_read() != 0) {
    total_size += 1 + 1;
  }

  // .firrtl.FirrtlPB.Statement.ReadUnderWrite read_under_write = 5;
  if (this->read_under_write() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_read_under_write());
  }

  switch (type_case()) {
    // .firrtl.FirrtlPB.Type.VectorType vector_type = 2;
    case kVectorType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.vector_type_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.CMemory.TypeAndDepth type_and_depth = 4;
    case kTypeAndDepth: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.type_and_depth_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_CMemory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.CMemory)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_CMemory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_CMemory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.CMemory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.CMemory)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_CMemory::MergeFrom(const FirrtlPB_Statement_CMemory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.CMemory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.sync_read() != 0) {
    _internal_set_sync_read(from._internal_sync_read());
  }
  if (from.read_under_write() != 0) {
    _internal_set_read_under_write(from._internal_read_under_write());
  }
  switch (from.type_case()) {
    case kVectorType: {
      _internal_mutable_vector_type()->::firrtl::FirrtlPB_Type_VectorType::MergeFrom(from._internal_vector_type());
      break;
    }
    case kTypeAndDepth: {
      _internal_mutable_type_and_depth()->::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth::MergeFrom(from._internal_type_and_depth());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void FirrtlPB_Statement_CMemory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.CMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_CMemory::CopyFrom(const FirrtlPB_Statement_CMemory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.CMemory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_CMemory::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_CMemory::InternalSwap(FirrtlPB_Statement_CMemory* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(sync_read_, other->sync_read_);
  swap(read_under_write_, other->read_under_write_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_CMemory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_Instance::InitAsDefaultInstance() {
}
class FirrtlPB_Statement_Instance::_Internal {
 public:
};

FirrtlPB_Statement_Instance::FirrtlPB_Statement_Instance()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.Instance)
}
FirrtlPB_Statement_Instance::FirrtlPB_Statement_Instance(const FirrtlPB_Statement_Instance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  module_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_module_id().empty()) {
    module_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.module_id_);
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.Instance)
}

void FirrtlPB_Statement_Instance::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_Instance_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FirrtlPB_Statement_Instance::~FirrtlPB_Statement_Instance() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.Instance)
  SharedDtor();
}

void FirrtlPB_Statement_Instance::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FirrtlPB_Statement_Instance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_Instance& FirrtlPB_Statement_Instance::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_Instance_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_Instance::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.Instance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  module_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_Instance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.Instance.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string module_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_module_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.Instance.module_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_Instance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.Instance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.Instance.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string module_id = 2;
  if (this->module_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_module_id().data(), static_cast<int>(this->_internal_module_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.Instance.module_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_module_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.Instance)
  return target;
}

size_t FirrtlPB_Statement_Instance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.Instance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string module_id = 2;
  if (this->module_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_module_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_Instance::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.Instance)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_Instance* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_Instance>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.Instance)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.Instance)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_Instance::MergeFrom(const FirrtlPB_Statement_Instance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.Instance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.module_id().size() > 0) {

    module_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.module_id_);
  }
}

void FirrtlPB_Statement_Instance::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_Instance::CopyFrom(const FirrtlPB_Statement_Instance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_Instance::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_Instance::InternalSwap(FirrtlPB_Statement_Instance* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  module_id_.Swap(&other->module_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_Instance::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_Node::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_Node_default_instance_._instance.get_mutable()->expression_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Statement_Node::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& expression(const FirrtlPB_Statement_Node* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_Node::_Internal::expression(const FirrtlPB_Statement_Node* msg) {
  return *msg->expression_;
}
FirrtlPB_Statement_Node::FirrtlPB_Statement_Node()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.Node)
}
FirrtlPB_Statement_Node::FirrtlPB_Statement_Node(const FirrtlPB_Statement_Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_expression()) {
    expression_ = new ::firrtl::FirrtlPB_Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.Node)
}

void FirrtlPB_Statement_Node::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_Node_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expression_ = nullptr;
}

FirrtlPB_Statement_Node::~FirrtlPB_Statement_Node() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.Node)
  SharedDtor();
}

void FirrtlPB_Statement_Node::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expression_;
}

void FirrtlPB_Statement_Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_Node& FirrtlPB_Statement_Node::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_Node_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_Node::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.Node.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression expression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_Node::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.Node)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.Node.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .firrtl.FirrtlPB.Expression expression = 2;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expression(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.Node)
  return target;
}

size_t FirrtlPB_Statement_Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.Node)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .firrtl.FirrtlPB.Expression expression = 2;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_Node::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.Node)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_Node* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_Node>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.Node)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.Node)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_Node::MergeFrom(const FirrtlPB_Statement_Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.Node)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_expression()) {
    _internal_mutable_expression()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_expression());
  }
}

void FirrtlPB_Statement_Node::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_Node::CopyFrom(const FirrtlPB_Statement_Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_Node::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_Node::InternalSwap(FirrtlPB_Statement_Node* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expression_, other->expression_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_Node::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_When::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_When_default_instance_._instance.get_mutable()->predicate_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Statement_When::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& predicate(const FirrtlPB_Statement_When* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_When::_Internal::predicate(const FirrtlPB_Statement_When* msg) {
  return *msg->predicate_;
}
FirrtlPB_Statement_When::FirrtlPB_Statement_When()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.When)
}
FirrtlPB_Statement_When::FirrtlPB_Statement_When(const FirrtlPB_Statement_When& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      consequent_(from.consequent_),
      otherwise_(from.otherwise_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_predicate()) {
    predicate_ = new ::firrtl::FirrtlPB_Expression(*from.predicate_);
  } else {
    predicate_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.When)
}

void FirrtlPB_Statement_When::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_inou_2ffirrtl_2ffirrtl_2eproto.base);
  predicate_ = nullptr;
}

FirrtlPB_Statement_When::~FirrtlPB_Statement_When() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.When)
  SharedDtor();
}

void FirrtlPB_Statement_When::SharedDtor() {
  if (this != internal_default_instance()) delete predicate_;
}

void FirrtlPB_Statement_When::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_When& FirrtlPB_Statement_When::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_When::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.When)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  consequent_.Clear();
  otherwise_.Clear();
  if (GetArenaNoVirtual() == nullptr && predicate_ != nullptr) {
    delete predicate_;
  }
  predicate_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_When::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression predicate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_predicate(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .firrtl.FirrtlPB.Statement consequent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consequent(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .firrtl.FirrtlPB.Statement otherwise = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_otherwise(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_When::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.When)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression predicate = 1;
  if (this->has_predicate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::predicate(this), target, stream);
  }

  // repeated .firrtl.FirrtlPB.Statement consequent = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_consequent_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_consequent(i), target, stream);
  }

  // repeated .firrtl.FirrtlPB.Statement otherwise = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_otherwise_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_otherwise(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.When)
  return target;
}

size_t FirrtlPB_Statement_When::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.When)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Statement consequent = 2;
  total_size += 1UL * this->_internal_consequent_size();
  for (const auto& msg : this->consequent_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .firrtl.FirrtlPB.Statement otherwise = 3;
  total_size += 1UL * this->_internal_otherwise_size();
  for (const auto& msg : this->otherwise_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .firrtl.FirrtlPB.Expression predicate = 1;
  if (this->has_predicate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *predicate_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_When::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.When)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_When* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_When>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.When)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.When)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_When::MergeFrom(const FirrtlPB_Statement_When& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.When)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  consequent_.MergeFrom(from.consequent_);
  otherwise_.MergeFrom(from.otherwise_);
  if (from.has_predicate()) {
    _internal_mutable_predicate()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_predicate());
  }
}

void FirrtlPB_Statement_When::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.When)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_When::CopyFrom(const FirrtlPB_Statement_When& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.When)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_When::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_When::InternalSwap(FirrtlPB_Statement_When* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  consequent_.InternalSwap(&other->consequent_);
  otherwise_.InternalSwap(&other->otherwise_);
  swap(predicate_, other->predicate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_When::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_Stop::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_Stop_default_instance_._instance.get_mutable()->clk_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_Stop_default_instance_._instance.get_mutable()->en_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Statement_Stop::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& clk(const FirrtlPB_Statement_Stop* msg);
  static const ::firrtl::FirrtlPB_Expression& en(const FirrtlPB_Statement_Stop* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_Stop::_Internal::clk(const FirrtlPB_Statement_Stop* msg) {
  return *msg->clk_;
}
const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_Stop::_Internal::en(const FirrtlPB_Statement_Stop* msg) {
  return *msg->en_;
}
FirrtlPB_Statement_Stop::FirrtlPB_Statement_Stop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.Stop)
}
FirrtlPB_Statement_Stop::FirrtlPB_Statement_Stop(const FirrtlPB_Statement_Stop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_clk()) {
    clk_ = new ::firrtl::FirrtlPB_Expression(*from.clk_);
  } else {
    clk_ = nullptr;
  }
  if (from._internal_has_en()) {
    en_ = new ::firrtl::FirrtlPB_Expression(*from.en_);
  } else {
    en_ = nullptr;
  }
  return_value_ = from.return_value_;
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.Stop)
}

void FirrtlPB_Statement_Stop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_Stop_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&clk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&return_value_) -
      reinterpret_cast<char*>(&clk_)) + sizeof(return_value_));
}

FirrtlPB_Statement_Stop::~FirrtlPB_Statement_Stop() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.Stop)
  SharedDtor();
}

void FirrtlPB_Statement_Stop::SharedDtor() {
  if (this != internal_default_instance()) delete clk_;
  if (this != internal_default_instance()) delete en_;
}

void FirrtlPB_Statement_Stop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_Stop& FirrtlPB_Statement_Stop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_Stop_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_Stop::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && clk_ != nullptr) {
    delete clk_;
  }
  clk_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && en_ != nullptr) {
    delete en_;
  }
  en_ = nullptr;
  return_value_ = 0;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_Stop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 return_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          return_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression clk = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_clk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression en = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_en(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_Stop::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.Stop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 return_value = 1;
  if (this->return_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_return_value(), target);
  }

  // .firrtl.FirrtlPB.Expression clk = 2;
  if (this->has_clk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::clk(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression en = 3;
  if (this->has_en()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::en(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.Stop)
  return target;
}

size_t FirrtlPB_Statement_Stop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.Stop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression clk = 2;
  if (this->has_clk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clk_);
  }

  // .firrtl.FirrtlPB.Expression en = 3;
  if (this->has_en()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *en_);
  }

  // int32 return_value = 1;
  if (this->return_value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_return_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_Stop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_Stop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_Stop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.Stop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.Stop)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_Stop::MergeFrom(const FirrtlPB_Statement_Stop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.Stop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_clk()) {
    _internal_mutable_clk()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_clk());
  }
  if (from.has_en()) {
    _internal_mutable_en()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_en());
  }
  if (from.return_value() != 0) {
    _internal_set_return_value(from._internal_return_value());
  }
}

void FirrtlPB_Statement_Stop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_Stop::CopyFrom(const FirrtlPB_Statement_Stop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.Stop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_Stop::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_Stop::InternalSwap(FirrtlPB_Statement_Stop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(clk_, other->clk_);
  swap(en_, other->en_);
  swap(return_value_, other->return_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_Stop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_Printf::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_Printf_default_instance_._instance.get_mutable()->clk_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_Printf_default_instance_._instance.get_mutable()->en_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Statement_Printf::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& clk(const FirrtlPB_Statement_Printf* msg);
  static const ::firrtl::FirrtlPB_Expression& en(const FirrtlPB_Statement_Printf* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_Printf::_Internal::clk(const FirrtlPB_Statement_Printf* msg) {
  return *msg->clk_;
}
const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_Printf::_Internal::en(const FirrtlPB_Statement_Printf* msg) {
  return *msg->en_;
}
FirrtlPB_Statement_Printf::FirrtlPB_Statement_Printf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.Printf)
}
FirrtlPB_Statement_Printf::FirrtlPB_Statement_Printf(const FirrtlPB_Statement_Printf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      arg_(from.arg_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from._internal_has_clk()) {
    clk_ = new ::firrtl::FirrtlPB_Expression(*from.clk_);
  } else {
    clk_ = nullptr;
  }
  if (from._internal_has_en()) {
    en_ = new ::firrtl::FirrtlPB_Expression(*from.en_);
  } else {
    en_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.Printf)
}

void FirrtlPB_Statement_Printf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_Printf_inou_2ffirrtl_2ffirrtl_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&clk_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&en_) -
      reinterpret_cast<char*>(&clk_)) + sizeof(en_));
}

FirrtlPB_Statement_Printf::~FirrtlPB_Statement_Printf() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.Printf)
  SharedDtor();
}

void FirrtlPB_Statement_Printf::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete clk_;
  if (this != internal_default_instance()) delete en_;
}

void FirrtlPB_Statement_Printf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_Printf& FirrtlPB_Statement_Printf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_Printf_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_Printf::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.Printf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_.Clear();
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && clk_ != nullptr) {
    delete clk_;
  }
  clk_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && en_ != nullptr) {
    delete en_;
  }
  en_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_Printf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.Printf.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .firrtl.FirrtlPB.Expression arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression clk = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_clk(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression en = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_en(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_Printf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.Printf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.Printf.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // repeated .firrtl.FirrtlPB.Expression arg = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_arg(i), target, stream);
  }

  // .firrtl.FirrtlPB.Expression clk = 3;
  if (this->has_clk()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::clk(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression en = 4;
  if (this->has_en()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::en(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.Printf)
  return target;
}

size_t FirrtlPB_Statement_Printf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.Printf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Expression arg = 2;
  total_size += 1UL * this->_internal_arg_size();
  for (const auto& msg : this->arg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .firrtl.FirrtlPB.Expression clk = 3;
  if (this->has_clk()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *clk_);
  }

  // .firrtl.FirrtlPB.Expression en = 4;
  if (this->has_en()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *en_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_Printf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.Printf)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_Printf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_Printf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.Printf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.Printf)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_Printf::MergeFrom(const FirrtlPB_Statement_Printf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.Printf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arg_.MergeFrom(from.arg_);
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.has_clk()) {
    _internal_mutable_clk()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_clk());
  }
  if (from.has_en()) {
    _internal_mutable_en()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_en());
  }
}

void FirrtlPB_Statement_Printf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.Printf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_Printf::CopyFrom(const FirrtlPB_Statement_Printf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.Printf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_Printf::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_Printf::InternalSwap(FirrtlPB_Statement_Printf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  arg_.InternalSwap(&other->arg_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(clk_, other->clk_);
  swap(en_, other->en_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_Printf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_Skip::InitAsDefaultInstance() {
}
class FirrtlPB_Statement_Skip::_Internal {
 public:
};

FirrtlPB_Statement_Skip::FirrtlPB_Statement_Skip()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.Skip)
}
FirrtlPB_Statement_Skip::FirrtlPB_Statement_Skip(const FirrtlPB_Statement_Skip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.Skip)
}

void FirrtlPB_Statement_Skip::SharedCtor() {
}

FirrtlPB_Statement_Skip::~FirrtlPB_Statement_Skip() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.Skip)
  SharedDtor();
}

void FirrtlPB_Statement_Skip::SharedDtor() {
}

void FirrtlPB_Statement_Skip::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_Skip& FirrtlPB_Statement_Skip::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_Skip_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_Skip::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.Skip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_Skip::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_Skip::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.Skip)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.Skip)
  return target;
}

size_t FirrtlPB_Statement_Skip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.Skip)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_Skip::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.Skip)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_Skip* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_Skip>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.Skip)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.Skip)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_Skip::MergeFrom(const FirrtlPB_Statement_Skip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.Skip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FirrtlPB_Statement_Skip::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.Skip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_Skip::CopyFrom(const FirrtlPB_Statement_Skip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.Skip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_Skip::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_Skip::InternalSwap(FirrtlPB_Statement_Skip* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_Skip::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_Connect::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_Connect_default_instance_._instance.get_mutable()->location_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_Connect_default_instance_._instance.get_mutable()->expression_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Statement_Connect::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& location(const FirrtlPB_Statement_Connect* msg);
  static const ::firrtl::FirrtlPB_Expression& expression(const FirrtlPB_Statement_Connect* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_Connect::_Internal::location(const FirrtlPB_Statement_Connect* msg) {
  return *msg->location_;
}
const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_Connect::_Internal::expression(const FirrtlPB_Statement_Connect* msg) {
  return *msg->expression_;
}
FirrtlPB_Statement_Connect::FirrtlPB_Statement_Connect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.Connect)
}
FirrtlPB_Statement_Connect::FirrtlPB_Statement_Connect(const FirrtlPB_Statement_Connect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::firrtl::FirrtlPB_Expression(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::firrtl::FirrtlPB_Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.Connect)
}

void FirrtlPB_Statement_Connect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_Connect_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expression_) -
      reinterpret_cast<char*>(&location_)) + sizeof(expression_));
}

FirrtlPB_Statement_Connect::~FirrtlPB_Statement_Connect() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.Connect)
  SharedDtor();
}

void FirrtlPB_Statement_Connect::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete expression_;
}

void FirrtlPB_Statement_Connect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_Connect& FirrtlPB_Statement_Connect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_Connect_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_Connect::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.Connect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_Connect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression expression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_Connect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.Connect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression location = 1;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression expression = 2;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expression(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.Connect)
  return target;
}

size_t FirrtlPB_Statement_Connect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.Connect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .firrtl.FirrtlPB.Expression expression = 2;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_Connect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_Connect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_Connect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.Connect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.Connect)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_Connect::MergeFrom(const FirrtlPB_Statement_Connect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.Connect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    _internal_mutable_location()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_location());
  }
  if (from.has_expression()) {
    _internal_mutable_expression()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_expression());
  }
}

void FirrtlPB_Statement_Connect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_Connect::CopyFrom(const FirrtlPB_Statement_Connect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.Connect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_Connect::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_Connect::InternalSwap(FirrtlPB_Statement_Connect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(location_, other->location_);
  swap(expression_, other->expression_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_Connect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_PartialConnect::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_PartialConnect_default_instance_._instance.get_mutable()->location_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_PartialConnect_default_instance_._instance.get_mutable()->expression_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Statement_PartialConnect::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& location(const FirrtlPB_Statement_PartialConnect* msg);
  static const ::firrtl::FirrtlPB_Expression& expression(const FirrtlPB_Statement_PartialConnect* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_PartialConnect::_Internal::location(const FirrtlPB_Statement_PartialConnect* msg) {
  return *msg->location_;
}
const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_PartialConnect::_Internal::expression(const FirrtlPB_Statement_PartialConnect* msg) {
  return *msg->expression_;
}
FirrtlPB_Statement_PartialConnect::FirrtlPB_Statement_PartialConnect()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.PartialConnect)
}
FirrtlPB_Statement_PartialConnect::FirrtlPB_Statement_PartialConnect(const FirrtlPB_Statement_PartialConnect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::firrtl::FirrtlPB_Expression(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::firrtl::FirrtlPB_Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.PartialConnect)
}

void FirrtlPB_Statement_PartialConnect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_PartialConnect_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&expression_) -
      reinterpret_cast<char*>(&location_)) + sizeof(expression_));
}

FirrtlPB_Statement_PartialConnect::~FirrtlPB_Statement_PartialConnect() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.PartialConnect)
  SharedDtor();
}

void FirrtlPB_Statement_PartialConnect::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete expression_;
}

void FirrtlPB_Statement_PartialConnect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_PartialConnect& FirrtlPB_Statement_PartialConnect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_PartialConnect_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_PartialConnect::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.PartialConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_PartialConnect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression expression = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_PartialConnect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.PartialConnect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression location = 1;
  if (this->has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::location(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression expression = 2;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expression(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.PartialConnect)
  return target;
}

size_t FirrtlPB_Statement_PartialConnect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.PartialConnect)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression location = 1;
  if (this->has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .firrtl.FirrtlPB.Expression expression = 2;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_PartialConnect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.PartialConnect)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_PartialConnect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_PartialConnect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.PartialConnect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.PartialConnect)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_PartialConnect::MergeFrom(const FirrtlPB_Statement_PartialConnect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.PartialConnect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_location()) {
    _internal_mutable_location()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_location());
  }
  if (from.has_expression()) {
    _internal_mutable_expression()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_expression());
  }
}

void FirrtlPB_Statement_PartialConnect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.PartialConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_PartialConnect::CopyFrom(const FirrtlPB_Statement_PartialConnect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.PartialConnect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_PartialConnect::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_PartialConnect::InternalSwap(FirrtlPB_Statement_PartialConnect* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(location_, other->location_);
  swap(expression_, other->expression_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_PartialConnect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_IsInvalid::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_IsInvalid_default_instance_._instance.get_mutable()->expression_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Statement_IsInvalid::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& expression(const FirrtlPB_Statement_IsInvalid* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_IsInvalid::_Internal::expression(const FirrtlPB_Statement_IsInvalid* msg) {
  return *msg->expression_;
}
FirrtlPB_Statement_IsInvalid::FirrtlPB_Statement_IsInvalid()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.IsInvalid)
}
FirrtlPB_Statement_IsInvalid::FirrtlPB_Statement_IsInvalid(const FirrtlPB_Statement_IsInvalid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_expression()) {
    expression_ = new ::firrtl::FirrtlPB_Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.IsInvalid)
}

void FirrtlPB_Statement_IsInvalid::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_IsInvalid_inou_2ffirrtl_2ffirrtl_2eproto.base);
  expression_ = nullptr;
}

FirrtlPB_Statement_IsInvalid::~FirrtlPB_Statement_IsInvalid() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.IsInvalid)
  SharedDtor();
}

void FirrtlPB_Statement_IsInvalid::SharedDtor() {
  if (this != internal_default_instance()) delete expression_;
}

void FirrtlPB_Statement_IsInvalid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_IsInvalid& FirrtlPB_Statement_IsInvalid::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_IsInvalid_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_IsInvalid::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.IsInvalid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_IsInvalid::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_IsInvalid::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.IsInvalid)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression expression = 1;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expression(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.IsInvalid)
  return target;
}

size_t FirrtlPB_Statement_IsInvalid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.IsInvalid)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression expression = 1;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_IsInvalid::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.IsInvalid)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_IsInvalid* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_IsInvalid>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.IsInvalid)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.IsInvalid)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_IsInvalid::MergeFrom(const FirrtlPB_Statement_IsInvalid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.IsInvalid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expression()) {
    _internal_mutable_expression()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_expression());
  }
}

void FirrtlPB_Statement_IsInvalid::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.IsInvalid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_IsInvalid::CopyFrom(const FirrtlPB_Statement_IsInvalid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.IsInvalid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_IsInvalid::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_IsInvalid::InternalSwap(FirrtlPB_Statement_IsInvalid* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(expression_, other->expression_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_IsInvalid::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_MemoryPort::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_MemoryPort_default_instance_._instance.get_mutable()->memory_index_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_MemoryPort_default_instance_._instance.get_mutable()->expression_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Statement_MemoryPort::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& memory_index(const FirrtlPB_Statement_MemoryPort* msg);
  static const ::firrtl::FirrtlPB_Expression& expression(const FirrtlPB_Statement_MemoryPort* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_MemoryPort::_Internal::memory_index(const FirrtlPB_Statement_MemoryPort* msg) {
  return *msg->memory_index_;
}
const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Statement_MemoryPort::_Internal::expression(const FirrtlPB_Statement_MemoryPort* msg) {
  return *msg->expression_;
}
FirrtlPB_Statement_MemoryPort::FirrtlPB_Statement_MemoryPort()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.MemoryPort)
}
FirrtlPB_Statement_MemoryPort::FirrtlPB_Statement_MemoryPort(const FirrtlPB_Statement_MemoryPort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  memory_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memory_id().empty()) {
    memory_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memory_id_);
  }
  if (from._internal_has_memory_index()) {
    memory_index_ = new ::firrtl::FirrtlPB_Expression(*from.memory_index_);
  } else {
    memory_index_ = nullptr;
  }
  if (from._internal_has_expression()) {
    expression_ = new ::firrtl::FirrtlPB_Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.MemoryPort)
}

void FirrtlPB_Statement_MemoryPort::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_MemoryPort_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&memory_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&memory_index_)) + sizeof(direction_));
}

FirrtlPB_Statement_MemoryPort::~FirrtlPB_Statement_MemoryPort() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.MemoryPort)
  SharedDtor();
}

void FirrtlPB_Statement_MemoryPort::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete memory_index_;
  if (this != internal_default_instance()) delete expression_;
}

void FirrtlPB_Statement_MemoryPort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_MemoryPort& FirrtlPB_Statement_MemoryPort::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_MemoryPort_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_MemoryPort::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.MemoryPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && memory_index_ != nullptr) {
    delete memory_index_;
  }
  memory_index_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  direction_ = 0;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_MemoryPort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Statement.MemoryPort.Direction direction = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::firrtl::FirrtlPB_Statement_MemoryPort_Direction>(val));
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.MemoryPort.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memory_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_memory_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Statement.MemoryPort.memory_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression memory_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression expression = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_MemoryPort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.MemoryPort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Statement.MemoryPort.Direction direction = 1;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_direction(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.MemoryPort.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // string memory_id = 3;
  if (this->memory_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memory_id().data(), static_cast<int>(this->_internal_memory_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Statement.MemoryPort.memory_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_memory_id(), target);
  }

  // .firrtl.FirrtlPB.Expression memory_index = 4;
  if (this->has_memory_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::memory_index(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression expression = 5;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::expression(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.MemoryPort)
  return target;
}

size_t FirrtlPB_Statement_MemoryPort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.MemoryPort)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string memory_id = 3;
  if (this->memory_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memory_id());
  }

  // .firrtl.FirrtlPB.Expression memory_index = 4;
  if (this->has_memory_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *memory_index_);
  }

  // .firrtl.FirrtlPB.Expression expression = 5;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  // .firrtl.FirrtlPB.Statement.MemoryPort.Direction direction = 1;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_MemoryPort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.MemoryPort)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_MemoryPort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_MemoryPort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.MemoryPort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.MemoryPort)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_MemoryPort::MergeFrom(const FirrtlPB_Statement_MemoryPort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.MemoryPort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.memory_id().size() > 0) {

    memory_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.memory_id_);
  }
  if (from.has_memory_index()) {
    _internal_mutable_memory_index()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_memory_index());
  }
  if (from.has_expression()) {
    _internal_mutable_expression()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_expression());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void FirrtlPB_Statement_MemoryPort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.MemoryPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_MemoryPort::CopyFrom(const FirrtlPB_Statement_MemoryPort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.MemoryPort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_MemoryPort::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_MemoryPort::InternalSwap(FirrtlPB_Statement_MemoryPort* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  memory_id_.Swap(&other->memory_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(memory_index_, other->memory_index_);
  swap(expression_, other->expression_);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_MemoryPort::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement_Attach::InitAsDefaultInstance() {
}
class FirrtlPB_Statement_Attach::_Internal {
 public:
};

FirrtlPB_Statement_Attach::FirrtlPB_Statement_Attach()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement.Attach)
}
FirrtlPB_Statement_Attach::FirrtlPB_Statement_Attach(const FirrtlPB_Statement_Attach& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      expression_(from.expression_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement.Attach)
}

void FirrtlPB_Statement_Attach::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_Attach_inou_2ffirrtl_2ffirrtl_2eproto.base);
}

FirrtlPB_Statement_Attach::~FirrtlPB_Statement_Attach() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement.Attach)
  SharedDtor();
}

void FirrtlPB_Statement_Attach::SharedDtor() {
}

void FirrtlPB_Statement_Attach::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement_Attach& FirrtlPB_Statement_Attach::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_Attach_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement_Attach::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement.Attach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  expression_.Clear();
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement_Attach::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .firrtl.FirrtlPB.Expression expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_expression(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement_Attach::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement.Attach)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Expression expression = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_expression_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_expression(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement.Attach)
  return target;
}

size_t FirrtlPB_Statement_Attach::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement.Attach)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Expression expression = 1;
  total_size += 1UL * this->_internal_expression_size();
  for (const auto& msg : this->expression_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement_Attach::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement.Attach)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement_Attach* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement_Attach>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement.Attach)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement.Attach)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement_Attach::MergeFrom(const FirrtlPB_Statement_Attach& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement.Attach)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  expression_.MergeFrom(from.expression_);
}

void FirrtlPB_Statement_Attach::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement.Attach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement_Attach::CopyFrom(const FirrtlPB_Statement_Attach& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement.Attach)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement_Attach::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement_Attach::InternalSwap(FirrtlPB_Statement_Attach* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  expression_.InternalSwap(&other->expression_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement_Attach::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Statement::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Statement_default_instance_.wire_ = const_cast< ::firrtl::FirrtlPB_Statement_Wire*>(
      ::firrtl::FirrtlPB_Statement_Wire::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.register__ = const_cast< ::firrtl::FirrtlPB_Statement_Register*>(
      ::firrtl::FirrtlPB_Statement_Register::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.memory_ = const_cast< ::firrtl::FirrtlPB_Statement_Memory*>(
      ::firrtl::FirrtlPB_Statement_Memory::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.cmemory_ = const_cast< ::firrtl::FirrtlPB_Statement_CMemory*>(
      ::firrtl::FirrtlPB_Statement_CMemory::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.instance_ = const_cast< ::firrtl::FirrtlPB_Statement_Instance*>(
      ::firrtl::FirrtlPB_Statement_Instance::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.node_ = const_cast< ::firrtl::FirrtlPB_Statement_Node*>(
      ::firrtl::FirrtlPB_Statement_Node::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.when_ = const_cast< ::firrtl::FirrtlPB_Statement_When*>(
      ::firrtl::FirrtlPB_Statement_When::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.stop_ = const_cast< ::firrtl::FirrtlPB_Statement_Stop*>(
      ::firrtl::FirrtlPB_Statement_Stop::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.printf_ = const_cast< ::firrtl::FirrtlPB_Statement_Printf*>(
      ::firrtl::FirrtlPB_Statement_Printf::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.skip_ = const_cast< ::firrtl::FirrtlPB_Statement_Skip*>(
      ::firrtl::FirrtlPB_Statement_Skip::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.connect_ = const_cast< ::firrtl::FirrtlPB_Statement_Connect*>(
      ::firrtl::FirrtlPB_Statement_Connect::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.partial_connect_ = const_cast< ::firrtl::FirrtlPB_Statement_PartialConnect*>(
      ::firrtl::FirrtlPB_Statement_PartialConnect::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.is_invalid_ = const_cast< ::firrtl::FirrtlPB_Statement_IsInvalid*>(
      ::firrtl::FirrtlPB_Statement_IsInvalid::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.memory_port_ = const_cast< ::firrtl::FirrtlPB_Statement_MemoryPort*>(
      ::firrtl::FirrtlPB_Statement_MemoryPort::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_.attach_ = const_cast< ::firrtl::FirrtlPB_Statement_Attach*>(
      ::firrtl::FirrtlPB_Statement_Attach::internal_default_instance());
  ::firrtl::_FirrtlPB_Statement_default_instance_._instance.get_mutable()->source_info_ = const_cast< ::firrtl::FirrtlPB_SourceInfo*>(
      ::firrtl::FirrtlPB_SourceInfo::internal_default_instance());
}
class FirrtlPB_Statement::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Statement_Wire& wire(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_Register& register_(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_Memory& memory(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_CMemory& cmemory(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_Instance& instance(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_Node& node(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_When& when(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_Stop& stop(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_Printf& printf(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_Skip& skip(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_Connect& connect(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_PartialConnect& partial_connect(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_IsInvalid& is_invalid(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_MemoryPort& memory_port(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_Statement_Attach& attach(const FirrtlPB_Statement* msg);
  static const ::firrtl::FirrtlPB_SourceInfo& source_info(const FirrtlPB_Statement* msg);
};

const ::firrtl::FirrtlPB_Statement_Wire&
FirrtlPB_Statement::_Internal::wire(const FirrtlPB_Statement* msg) {
  return *msg->statement_.wire_;
}
const ::firrtl::FirrtlPB_Statement_Register&
FirrtlPB_Statement::_Internal::register_(const FirrtlPB_Statement* msg) {
  return *msg->statement_.register__;
}
const ::firrtl::FirrtlPB_Statement_Memory&
FirrtlPB_Statement::_Internal::memory(const FirrtlPB_Statement* msg) {
  return *msg->statement_.memory_;
}
const ::firrtl::FirrtlPB_Statement_CMemory&
FirrtlPB_Statement::_Internal::cmemory(const FirrtlPB_Statement* msg) {
  return *msg->statement_.cmemory_;
}
const ::firrtl::FirrtlPB_Statement_Instance&
FirrtlPB_Statement::_Internal::instance(const FirrtlPB_Statement* msg) {
  return *msg->statement_.instance_;
}
const ::firrtl::FirrtlPB_Statement_Node&
FirrtlPB_Statement::_Internal::node(const FirrtlPB_Statement* msg) {
  return *msg->statement_.node_;
}
const ::firrtl::FirrtlPB_Statement_When&
FirrtlPB_Statement::_Internal::when(const FirrtlPB_Statement* msg) {
  return *msg->statement_.when_;
}
const ::firrtl::FirrtlPB_Statement_Stop&
FirrtlPB_Statement::_Internal::stop(const FirrtlPB_Statement* msg) {
  return *msg->statement_.stop_;
}
const ::firrtl::FirrtlPB_Statement_Printf&
FirrtlPB_Statement::_Internal::printf(const FirrtlPB_Statement* msg) {
  return *msg->statement_.printf_;
}
const ::firrtl::FirrtlPB_Statement_Skip&
FirrtlPB_Statement::_Internal::skip(const FirrtlPB_Statement* msg) {
  return *msg->statement_.skip_;
}
const ::firrtl::FirrtlPB_Statement_Connect&
FirrtlPB_Statement::_Internal::connect(const FirrtlPB_Statement* msg) {
  return *msg->statement_.connect_;
}
const ::firrtl::FirrtlPB_Statement_PartialConnect&
FirrtlPB_Statement::_Internal::partial_connect(const FirrtlPB_Statement* msg) {
  return *msg->statement_.partial_connect_;
}
const ::firrtl::FirrtlPB_Statement_IsInvalid&
FirrtlPB_Statement::_Internal::is_invalid(const FirrtlPB_Statement* msg) {
  return *msg->statement_.is_invalid_;
}
const ::firrtl::FirrtlPB_Statement_MemoryPort&
FirrtlPB_Statement::_Internal::memory_port(const FirrtlPB_Statement* msg) {
  return *msg->statement_.memory_port_;
}
const ::firrtl::FirrtlPB_Statement_Attach&
FirrtlPB_Statement::_Internal::attach(const FirrtlPB_Statement* msg) {
  return *msg->statement_.attach_;
}
const ::firrtl::FirrtlPB_SourceInfo&
FirrtlPB_Statement::_Internal::source_info(const FirrtlPB_Statement* msg) {
  return *msg->source_info_;
}
void FirrtlPB_Statement::set_allocated_wire(::firrtl::FirrtlPB_Statement_Wire* wire) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (wire) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      wire = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wire, submessage_arena);
    }
    set_has_wire();
    statement_.wire_ = wire;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.wire)
}
void FirrtlPB_Statement::set_allocated_register_(::firrtl::FirrtlPB_Statement_Register* register_) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (register_) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      register_ = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, register_, submessage_arena);
    }
    set_has_register_();
    statement_.register__ = register_;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.register)
}
void FirrtlPB_Statement::set_allocated_memory(::firrtl::FirrtlPB_Statement_Memory* memory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (memory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory, submessage_arena);
    }
    set_has_memory();
    statement_.memory_ = memory;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.memory)
}
void FirrtlPB_Statement::set_allocated_cmemory(::firrtl::FirrtlPB_Statement_CMemory* cmemory) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (cmemory) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cmemory = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmemory, submessage_arena);
    }
    set_has_cmemory();
    statement_.cmemory_ = cmemory;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.cmemory)
}
void FirrtlPB_Statement::set_allocated_instance(::firrtl::FirrtlPB_Statement_Instance* instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    set_has_instance();
    statement_.instance_ = instance;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.instance)
}
void FirrtlPB_Statement::set_allocated_node(::firrtl::FirrtlPB_Statement_Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    set_has_node();
    statement_.node_ = node;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.node)
}
void FirrtlPB_Statement::set_allocated_when(::firrtl::FirrtlPB_Statement_When* when) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (when) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      when = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, when, submessage_arena);
    }
    set_has_when();
    statement_.when_ = when;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.when)
}
void FirrtlPB_Statement::set_allocated_stop(::firrtl::FirrtlPB_Statement_Stop* stop) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (stop) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stop = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stop, submessage_arena);
    }
    set_has_stop();
    statement_.stop_ = stop;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.stop)
}
void FirrtlPB_Statement::set_allocated_printf(::firrtl::FirrtlPB_Statement_Printf* printf) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (printf) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      printf = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, printf, submessage_arena);
    }
    set_has_printf();
    statement_.printf_ = printf;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.printf)
}
void FirrtlPB_Statement::set_allocated_skip(::firrtl::FirrtlPB_Statement_Skip* skip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (skip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      skip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skip, submessage_arena);
    }
    set_has_skip();
    statement_.skip_ = skip;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.skip)
}
void FirrtlPB_Statement::set_allocated_connect(::firrtl::FirrtlPB_Statement_Connect* connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, connect, submessage_arena);
    }
    set_has_connect();
    statement_.connect_ = connect;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.connect)
}
void FirrtlPB_Statement::set_allocated_partial_connect(::firrtl::FirrtlPB_Statement_PartialConnect* partial_connect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (partial_connect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      partial_connect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, partial_connect, submessage_arena);
    }
    set_has_partial_connect();
    statement_.partial_connect_ = partial_connect;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.partial_connect)
}
void FirrtlPB_Statement::set_allocated_is_invalid(::firrtl::FirrtlPB_Statement_IsInvalid* is_invalid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (is_invalid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      is_invalid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, is_invalid, submessage_arena);
    }
    set_has_is_invalid();
    statement_.is_invalid_ = is_invalid;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.is_invalid)
}
void FirrtlPB_Statement::set_allocated_memory_port(::firrtl::FirrtlPB_Statement_MemoryPort* memory_port) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (memory_port) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      memory_port = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, memory_port, submessage_arena);
    }
    set_has_memory_port();
    statement_.memory_port_ = memory_port;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.memory_port)
}
void FirrtlPB_Statement::set_allocated_attach(::firrtl::FirrtlPB_Statement_Attach* attach) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_statement();
  if (attach) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      attach = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, attach, submessage_arena);
    }
    set_has_attach();
    statement_.attach_ = attach;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Statement.attach)
}
FirrtlPB_Statement::FirrtlPB_Statement()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Statement)
}
FirrtlPB_Statement::FirrtlPB_Statement(const FirrtlPB_Statement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_source_info()) {
    source_info_ = new ::firrtl::FirrtlPB_SourceInfo(*from.source_info_);
  } else {
    source_info_ = nullptr;
  }
  clear_has_statement();
  switch (from.statement_case()) {
    case kWire: {
      _internal_mutable_wire()->::firrtl::FirrtlPB_Statement_Wire::MergeFrom(from._internal_wire());
      break;
    }
    case kRegister: {
      _internal_mutable_register_()->::firrtl::FirrtlPB_Statement_Register::MergeFrom(from._internal_register_());
      break;
    }
    case kMemory: {
      _internal_mutable_memory()->::firrtl::FirrtlPB_Statement_Memory::MergeFrom(from._internal_memory());
      break;
    }
    case kCmemory: {
      _internal_mutable_cmemory()->::firrtl::FirrtlPB_Statement_CMemory::MergeFrom(from._internal_cmemory());
      break;
    }
    case kInstance: {
      _internal_mutable_instance()->::firrtl::FirrtlPB_Statement_Instance::MergeFrom(from._internal_instance());
      break;
    }
    case kNode: {
      _internal_mutable_node()->::firrtl::FirrtlPB_Statement_Node::MergeFrom(from._internal_node());
      break;
    }
    case kWhen: {
      _internal_mutable_when()->::firrtl::FirrtlPB_Statement_When::MergeFrom(from._internal_when());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::firrtl::FirrtlPB_Statement_Stop::MergeFrom(from._internal_stop());
      break;
    }
    case kPrintf: {
      _internal_mutable_printf()->::firrtl::FirrtlPB_Statement_Printf::MergeFrom(from._internal_printf());
      break;
    }
    case kSkip: {
      _internal_mutable_skip()->::firrtl::FirrtlPB_Statement_Skip::MergeFrom(from._internal_skip());
      break;
    }
    case kConnect: {
      _internal_mutable_connect()->::firrtl::FirrtlPB_Statement_Connect::MergeFrom(from._internal_connect());
      break;
    }
    case kPartialConnect: {
      _internal_mutable_partial_connect()->::firrtl::FirrtlPB_Statement_PartialConnect::MergeFrom(from._internal_partial_connect());
      break;
    }
    case kIsInvalid: {
      _internal_mutable_is_invalid()->::firrtl::FirrtlPB_Statement_IsInvalid::MergeFrom(from._internal_is_invalid());
      break;
    }
    case kMemoryPort: {
      _internal_mutable_memory_port()->::firrtl::FirrtlPB_Statement_MemoryPort::MergeFrom(from._internal_memory_port());
      break;
    }
    case kAttach: {
      _internal_mutable_attach()->::firrtl::FirrtlPB_Statement_Attach::MergeFrom(from._internal_attach());
      break;
    }
    case STATEMENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Statement)
}

void FirrtlPB_Statement::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Statement_inou_2ffirrtl_2ffirrtl_2eproto.base);
  source_info_ = nullptr;
  clear_has_statement();
}

FirrtlPB_Statement::~FirrtlPB_Statement() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Statement)
  SharedDtor();
}

void FirrtlPB_Statement::SharedDtor() {
  if (this != internal_default_instance()) delete source_info_;
  if (has_statement()) {
    clear_statement();
  }
}

void FirrtlPB_Statement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Statement& FirrtlPB_Statement::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Statement_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Statement::clear_statement() {
// @@protoc_insertion_point(one_of_clear_start:firrtl.FirrtlPB.Statement)
  switch (statement_case()) {
    case kWire: {
      delete statement_.wire_;
      break;
    }
    case kRegister: {
      delete statement_.register__;
      break;
    }
    case kMemory: {
      delete statement_.memory_;
      break;
    }
    case kCmemory: {
      delete statement_.cmemory_;
      break;
    }
    case kInstance: {
      delete statement_.instance_;
      break;
    }
    case kNode: {
      delete statement_.node_;
      break;
    }
    case kWhen: {
      delete statement_.when_;
      break;
    }
    case kStop: {
      delete statement_.stop_;
      break;
    }
    case kPrintf: {
      delete statement_.printf_;
      break;
    }
    case kSkip: {
      delete statement_.skip_;
      break;
    }
    case kConnect: {
      delete statement_.connect_;
      break;
    }
    case kPartialConnect: {
      delete statement_.partial_connect_;
      break;
    }
    case kIsInvalid: {
      delete statement_.is_invalid_;
      break;
    }
    case kMemoryPort: {
      delete statement_.memory_port_;
      break;
    }
    case kAttach: {
      delete statement_.attach_;
      break;
    }
    case STATEMENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATEMENT_NOT_SET;
}


void FirrtlPB_Statement::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Statement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && source_info_ != nullptr) {
    delete source_info_;
  }
  source_info_ = nullptr;
  clear_statement();
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Statement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Statement.Wire wire = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_wire(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.Register register = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_register_(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.Memory memory = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.CMemory cmemory = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmemory(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.Instance instance = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_instance(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.Node node = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_node(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.When when = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_when(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.Stop stop = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.Printf printf = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_printf(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.Skip skip = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_skip(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.Connect connect = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_connect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.PartialConnect partial_connect = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_partial_connect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.IsInvalid is_invalid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_is_invalid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.MemoryPort memory_port = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_memory_port(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.SourceInfo source_info = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_source_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Statement.Attach attach = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_attach(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Statement::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Statement)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Statement.Wire wire = 1;
  if (_internal_has_wire()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::wire(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.Register register = 2;
  if (_internal_has_register_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::register_(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.Memory memory = 3;
  if (_internal_has_memory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::memory(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.CMemory cmemory = 4;
  if (_internal_has_cmemory()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cmemory(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.Instance instance = 5;
  if (_internal_has_instance()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::instance(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.Node node = 6;
  if (_internal_has_node()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::node(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.When when = 7;
  if (_internal_has_when()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::when(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.Stop stop = 8;
  if (_internal_has_stop()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::stop(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.Printf printf = 10;
  if (_internal_has_printf()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::printf(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.Skip skip = 14;
  if (_internal_has_skip()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::skip(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.Connect connect = 15;
  if (_internal_has_connect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::connect(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.PartialConnect partial_connect = 16;
  if (_internal_has_partial_connect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::partial_connect(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.IsInvalid is_invalid = 17;
  if (_internal_has_is_invalid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::is_invalid(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.MemoryPort memory_port = 18;
  if (_internal_has_memory_port()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::memory_port(this), target, stream);
  }

  // .firrtl.FirrtlPB.SourceInfo source_info = 19;
  if (this->has_source_info()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::source_info(this), target, stream);
  }

  // .firrtl.FirrtlPB.Statement.Attach attach = 20;
  if (_internal_has_attach()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::attach(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Statement)
  return target;
}

size_t FirrtlPB_Statement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Statement)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.SourceInfo source_info = 19;
  if (this->has_source_info()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_info_);
  }

  switch (statement_case()) {
    // .firrtl.FirrtlPB.Statement.Wire wire = 1;
    case kWire: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.wire_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.Register register = 2;
    case kRegister: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.register__);
      break;
    }
    // .firrtl.FirrtlPB.Statement.Memory memory = 3;
    case kMemory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.memory_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.CMemory cmemory = 4;
    case kCmemory: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.cmemory_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.Instance instance = 5;
    case kInstance: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.instance_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.Node node = 6;
    case kNode: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.node_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.When when = 7;
    case kWhen: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.when_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.Stop stop = 8;
    case kStop: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.stop_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.Printf printf = 10;
    case kPrintf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.printf_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.Skip skip = 14;
    case kSkip: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.skip_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.Connect connect = 15;
    case kConnect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.connect_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.PartialConnect partial_connect = 16;
    case kPartialConnect: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.partial_connect_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.IsInvalid is_invalid = 17;
    case kIsInvalid: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.is_invalid_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.MemoryPort memory_port = 18;
    case kMemoryPort: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.memory_port_);
      break;
    }
    // .firrtl.FirrtlPB.Statement.Attach attach = 20;
    case kAttach: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *statement_.attach_);
      break;
    }
    case STATEMENT_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Statement::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Statement)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Statement* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Statement>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Statement)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Statement)
    MergeFrom(*source);
  }
}

void FirrtlPB_Statement::MergeFrom(const FirrtlPB_Statement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Statement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_source_info()) {
    _internal_mutable_source_info()->::firrtl::FirrtlPB_SourceInfo::MergeFrom(from._internal_source_info());
  }
  switch (from.statement_case()) {
    case kWire: {
      _internal_mutable_wire()->::firrtl::FirrtlPB_Statement_Wire::MergeFrom(from._internal_wire());
      break;
    }
    case kRegister: {
      _internal_mutable_register_()->::firrtl::FirrtlPB_Statement_Register::MergeFrom(from._internal_register_());
      break;
    }
    case kMemory: {
      _internal_mutable_memory()->::firrtl::FirrtlPB_Statement_Memory::MergeFrom(from._internal_memory());
      break;
    }
    case kCmemory: {
      _internal_mutable_cmemory()->::firrtl::FirrtlPB_Statement_CMemory::MergeFrom(from._internal_cmemory());
      break;
    }
    case kInstance: {
      _internal_mutable_instance()->::firrtl::FirrtlPB_Statement_Instance::MergeFrom(from._internal_instance());
      break;
    }
    case kNode: {
      _internal_mutable_node()->::firrtl::FirrtlPB_Statement_Node::MergeFrom(from._internal_node());
      break;
    }
    case kWhen: {
      _internal_mutable_when()->::firrtl::FirrtlPB_Statement_When::MergeFrom(from._internal_when());
      break;
    }
    case kStop: {
      _internal_mutable_stop()->::firrtl::FirrtlPB_Statement_Stop::MergeFrom(from._internal_stop());
      break;
    }
    case kPrintf: {
      _internal_mutable_printf()->::firrtl::FirrtlPB_Statement_Printf::MergeFrom(from._internal_printf());
      break;
    }
    case kSkip: {
      _internal_mutable_skip()->::firrtl::FirrtlPB_Statement_Skip::MergeFrom(from._internal_skip());
      break;
    }
    case kConnect: {
      _internal_mutable_connect()->::firrtl::FirrtlPB_Statement_Connect::MergeFrom(from._internal_connect());
      break;
    }
    case kPartialConnect: {
      _internal_mutable_partial_connect()->::firrtl::FirrtlPB_Statement_PartialConnect::MergeFrom(from._internal_partial_connect());
      break;
    }
    case kIsInvalid: {
      _internal_mutable_is_invalid()->::firrtl::FirrtlPB_Statement_IsInvalid::MergeFrom(from._internal_is_invalid());
      break;
    }
    case kMemoryPort: {
      _internal_mutable_memory_port()->::firrtl::FirrtlPB_Statement_MemoryPort::MergeFrom(from._internal_memory_port());
      break;
    }
    case kAttach: {
      _internal_mutable_attach()->::firrtl::FirrtlPB_Statement_Attach::MergeFrom(from._internal_attach());
      break;
    }
    case STATEMENT_NOT_SET: {
      break;
    }
  }
}

void FirrtlPB_Statement::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Statement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Statement::CopyFrom(const FirrtlPB_Statement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Statement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Statement::IsInitialized() const {
  return true;
}

void FirrtlPB_Statement::InternalSwap(FirrtlPB_Statement* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(source_info_, other->source_info_);
  swap(statement_, other->statement_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Statement::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Width::InitAsDefaultInstance() {
}
class FirrtlPB_Width::_Internal {
 public:
};

FirrtlPB_Width::FirrtlPB_Width()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Width)
}
FirrtlPB_Width::FirrtlPB_Width(const FirrtlPB_Width& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Width)
}

void FirrtlPB_Width::SharedCtor() {
  value_ = 0u;
}

FirrtlPB_Width::~FirrtlPB_Width() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Width)
  SharedDtor();
}

void FirrtlPB_Width::SharedDtor() {
}

void FirrtlPB_Width::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Width& FirrtlPB_Width::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Width_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Width::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Width)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0u;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Width::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Width::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Width)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Width)
  return target;
}

size_t FirrtlPB_Width::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Width)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 value = 1;
  if (this->value() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Width::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Width)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Width* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Width>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Width)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Width)
    MergeFrom(*source);
  }
}

void FirrtlPB_Width::MergeFrom(const FirrtlPB_Width& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Width)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value() != 0) {
    _internal_set_value(from._internal_value());
  }
}

void FirrtlPB_Width::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Width)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Width::CopyFrom(const FirrtlPB_Width& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Width)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Width::IsInitialized() const {
  return true;
}

void FirrtlPB_Width::InternalSwap(FirrtlPB_Width* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Width::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Type_UIntType::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Type_UIntType_default_instance_._instance.get_mutable()->width_ = const_cast< ::firrtl::FirrtlPB_Width*>(
      ::firrtl::FirrtlPB_Width::internal_default_instance());
}
class FirrtlPB_Type_UIntType::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Width& width(const FirrtlPB_Type_UIntType* msg);
};

const ::firrtl::FirrtlPB_Width&
FirrtlPB_Type_UIntType::_Internal::width(const FirrtlPB_Type_UIntType* msg) {
  return *msg->width_;
}
FirrtlPB_Type_UIntType::FirrtlPB_Type_UIntType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Type.UIntType)
}
FirrtlPB_Type_UIntType::FirrtlPB_Type_UIntType(const FirrtlPB_Type_UIntType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_width()) {
    width_ = new ::firrtl::FirrtlPB_Width(*from.width_);
  } else {
    width_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Type.UIntType)
}

void FirrtlPB_Type_UIntType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Type_UIntType_inou_2ffirrtl_2ffirrtl_2eproto.base);
  width_ = nullptr;
}

FirrtlPB_Type_UIntType::~FirrtlPB_Type_UIntType() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Type.UIntType)
  SharedDtor();
}

void FirrtlPB_Type_UIntType::SharedDtor() {
  if (this != internal_default_instance()) delete width_;
}

void FirrtlPB_Type_UIntType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Type_UIntType& FirrtlPB_Type_UIntType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Type_UIntType_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Type_UIntType::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Type.UIntType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Type_UIntType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Width width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Type_UIntType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Type.UIntType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Width width = 1;
  if (this->has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::width(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Type.UIntType)
  return target;
}

size_t FirrtlPB_Type_UIntType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Type.UIntType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Width width = 1;
  if (this->has_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *width_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Type_UIntType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Type.UIntType)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Type_UIntType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Type_UIntType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Type.UIntType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Type.UIntType)
    MergeFrom(*source);
  }
}

void FirrtlPB_Type_UIntType::MergeFrom(const FirrtlPB_Type_UIntType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Type.UIntType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_width()) {
    _internal_mutable_width()->::firrtl::FirrtlPB_Width::MergeFrom(from._internal_width());
  }
}

void FirrtlPB_Type_UIntType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Type.UIntType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Type_UIntType::CopyFrom(const FirrtlPB_Type_UIntType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Type.UIntType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Type_UIntType::IsInitialized() const {
  return true;
}

void FirrtlPB_Type_UIntType::InternalSwap(FirrtlPB_Type_UIntType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Type_UIntType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Type_SIntType::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Type_SIntType_default_instance_._instance.get_mutable()->width_ = const_cast< ::firrtl::FirrtlPB_Width*>(
      ::firrtl::FirrtlPB_Width::internal_default_instance());
}
class FirrtlPB_Type_SIntType::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Width& width(const FirrtlPB_Type_SIntType* msg);
};

const ::firrtl::FirrtlPB_Width&
FirrtlPB_Type_SIntType::_Internal::width(const FirrtlPB_Type_SIntType* msg) {
  return *msg->width_;
}
FirrtlPB_Type_SIntType::FirrtlPB_Type_SIntType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Type.SIntType)
}
FirrtlPB_Type_SIntType::FirrtlPB_Type_SIntType(const FirrtlPB_Type_SIntType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_width()) {
    width_ = new ::firrtl::FirrtlPB_Width(*from.width_);
  } else {
    width_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Type.SIntType)
}

void FirrtlPB_Type_SIntType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Type_SIntType_inou_2ffirrtl_2ffirrtl_2eproto.base);
  width_ = nullptr;
}

FirrtlPB_Type_SIntType::~FirrtlPB_Type_SIntType() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Type.SIntType)
  SharedDtor();
}

void FirrtlPB_Type_SIntType::SharedDtor() {
  if (this != internal_default_instance()) delete width_;
}

void FirrtlPB_Type_SIntType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Type_SIntType& FirrtlPB_Type_SIntType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Type_SIntType_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Type_SIntType::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Type.SIntType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Type_SIntType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Width width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Type_SIntType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Type.SIntType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Width width = 1;
  if (this->has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::width(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Type.SIntType)
  return target;
}

size_t FirrtlPB_Type_SIntType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Type.SIntType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Width width = 1;
  if (this->has_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *width_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Type_SIntType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Type.SIntType)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Type_SIntType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Type_SIntType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Type.SIntType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Type.SIntType)
    MergeFrom(*source);
  }
}

void FirrtlPB_Type_SIntType::MergeFrom(const FirrtlPB_Type_SIntType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Type.SIntType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_width()) {
    _internal_mutable_width()->::firrtl::FirrtlPB_Width::MergeFrom(from._internal_width());
  }
}

void FirrtlPB_Type_SIntType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Type.SIntType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Type_SIntType::CopyFrom(const FirrtlPB_Type_SIntType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Type.SIntType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Type_SIntType::IsInitialized() const {
  return true;
}

void FirrtlPB_Type_SIntType::InternalSwap(FirrtlPB_Type_SIntType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Type_SIntType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Type_ClockType::InitAsDefaultInstance() {
}
class FirrtlPB_Type_ClockType::_Internal {
 public:
};

FirrtlPB_Type_ClockType::FirrtlPB_Type_ClockType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Type.ClockType)
}
FirrtlPB_Type_ClockType::FirrtlPB_Type_ClockType(const FirrtlPB_Type_ClockType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Type.ClockType)
}

void FirrtlPB_Type_ClockType::SharedCtor() {
}

FirrtlPB_Type_ClockType::~FirrtlPB_Type_ClockType() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Type.ClockType)
  SharedDtor();
}

void FirrtlPB_Type_ClockType::SharedDtor() {
}

void FirrtlPB_Type_ClockType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Type_ClockType& FirrtlPB_Type_ClockType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Type_ClockType_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Type_ClockType::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Type.ClockType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* FirrtlPB_Type_ClockType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Type_ClockType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Type.ClockType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Type.ClockType)
  return target;
}

size_t FirrtlPB_Type_ClockType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Type.ClockType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Type_ClockType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Type.ClockType)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Type_ClockType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Type_ClockType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Type.ClockType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Type.ClockType)
    MergeFrom(*source);
  }
}

void FirrtlPB_Type_ClockType::MergeFrom(const FirrtlPB_Type_ClockType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Type.ClockType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FirrtlPB_Type_ClockType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Type.ClockType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Type_ClockType::CopyFrom(const FirrtlPB_Type_ClockType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Type.ClockType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Type_ClockType::IsInitialized() const {
  return true;
}

void FirrtlPB_Type_ClockType::InternalSwap(FirrtlPB_Type_ClockType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Type_ClockType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Type_AsyncResetType::InitAsDefaultInstance() {
}
class FirrtlPB_Type_AsyncResetType::_Internal {
 public:
};

FirrtlPB_Type_AsyncResetType::FirrtlPB_Type_AsyncResetType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Type.AsyncResetType)
}
FirrtlPB_Type_AsyncResetType::FirrtlPB_Type_AsyncResetType(const FirrtlPB_Type_AsyncResetType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Type.AsyncResetType)
}

void FirrtlPB_Type_AsyncResetType::SharedCtor() {
}

FirrtlPB_Type_AsyncResetType::~FirrtlPB_Type_AsyncResetType() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Type.AsyncResetType)
  SharedDtor();
}

void FirrtlPB_Type_AsyncResetType::SharedDtor() {
}

void FirrtlPB_Type_AsyncResetType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Type_AsyncResetType& FirrtlPB_Type_AsyncResetType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Type_AsyncResetType_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Type_AsyncResetType::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Type.AsyncResetType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* FirrtlPB_Type_AsyncResetType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Type_AsyncResetType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Type.AsyncResetType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Type.AsyncResetType)
  return target;
}

size_t FirrtlPB_Type_AsyncResetType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Type.AsyncResetType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Type_AsyncResetType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Type.AsyncResetType)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Type_AsyncResetType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Type_AsyncResetType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Type.AsyncResetType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Type.AsyncResetType)
    MergeFrom(*source);
  }
}

void FirrtlPB_Type_AsyncResetType::MergeFrom(const FirrtlPB_Type_AsyncResetType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Type.AsyncResetType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FirrtlPB_Type_AsyncResetType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Type.AsyncResetType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Type_AsyncResetType::CopyFrom(const FirrtlPB_Type_AsyncResetType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Type.AsyncResetType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Type_AsyncResetType::IsInitialized() const {
  return true;
}

void FirrtlPB_Type_AsyncResetType::InternalSwap(FirrtlPB_Type_AsyncResetType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Type_AsyncResetType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Type_ResetType::InitAsDefaultInstance() {
}
class FirrtlPB_Type_ResetType::_Internal {
 public:
};

FirrtlPB_Type_ResetType::FirrtlPB_Type_ResetType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Type.ResetType)
}
FirrtlPB_Type_ResetType::FirrtlPB_Type_ResetType(const FirrtlPB_Type_ResetType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Type.ResetType)
}

void FirrtlPB_Type_ResetType::SharedCtor() {
}

FirrtlPB_Type_ResetType::~FirrtlPB_Type_ResetType() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Type.ResetType)
  SharedDtor();
}

void FirrtlPB_Type_ResetType::SharedDtor() {
}

void FirrtlPB_Type_ResetType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Type_ResetType& FirrtlPB_Type_ResetType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Type_ResetType_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Type_ResetType::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Type.ResetType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* FirrtlPB_Type_ResetType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Type_ResetType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Type.ResetType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Type.ResetType)
  return target;
}

size_t FirrtlPB_Type_ResetType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Type.ResetType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Type_ResetType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Type.ResetType)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Type_ResetType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Type_ResetType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Type.ResetType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Type.ResetType)
    MergeFrom(*source);
  }
}

void FirrtlPB_Type_ResetType::MergeFrom(const FirrtlPB_Type_ResetType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Type.ResetType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void FirrtlPB_Type_ResetType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Type.ResetType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Type_ResetType::CopyFrom(const FirrtlPB_Type_ResetType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Type.ResetType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Type_ResetType::IsInitialized() const {
  return true;
}

void FirrtlPB_Type_ResetType::InternalSwap(FirrtlPB_Type_ResetType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Type_ResetType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Type_BundleType_Field::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Type_BundleType_Field_default_instance_._instance.get_mutable()->type_ = const_cast< ::firrtl::FirrtlPB_Type*>(
      ::firrtl::FirrtlPB_Type::internal_default_instance());
}
class FirrtlPB_Type_BundleType_Field::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Type& type(const FirrtlPB_Type_BundleType_Field* msg);
};

const ::firrtl::FirrtlPB_Type&
FirrtlPB_Type_BundleType_Field::_Internal::type(const FirrtlPB_Type_BundleType_Field* msg) {
  return *msg->type_;
}
FirrtlPB_Type_BundleType_Field::FirrtlPB_Type_BundleType_Field()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Type.BundleType.Field)
}
FirrtlPB_Type_BundleType_Field::FirrtlPB_Type_BundleType_Field(const FirrtlPB_Type_BundleType_Field& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_type()) {
    type_ = new ::firrtl::FirrtlPB_Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  is_flipped_ = from.is_flipped_;
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Type.BundleType.Field)
}

void FirrtlPB_Type_BundleType_Field::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_flipped_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_flipped_));
}

FirrtlPB_Type_BundleType_Field::~FirrtlPB_Type_BundleType_Field() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Type.BundleType.Field)
  SharedDtor();
}

void FirrtlPB_Type_BundleType_Field::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void FirrtlPB_Type_BundleType_Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Type_BundleType_Field& FirrtlPB_Type_BundleType_Field::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Type_BundleType_Field::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Type.BundleType.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  is_flipped_ = false;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Type_BundleType_Field::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_flipped = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_flipped_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Type.BundleType.Field.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Type_BundleType_Field::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Type.BundleType.Field)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_flipped = 1;
  if (this->is_flipped() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_is_flipped(), target);
  }

  // string id = 2;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Type.BundleType.Field.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // .firrtl.FirrtlPB.Type type = 3;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Type.BundleType.Field)
  return target;
}

size_t FirrtlPB_Type_BundleType_Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Type.BundleType.Field)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .firrtl.FirrtlPB.Type type = 3;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // bool is_flipped = 1;
  if (this->is_flipped() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Type_BundleType_Field::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Type.BundleType.Field)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Type_BundleType_Field* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Type_BundleType_Field>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Type.BundleType.Field)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Type.BundleType.Field)
    MergeFrom(*source);
  }
}

void FirrtlPB_Type_BundleType_Field::MergeFrom(const FirrtlPB_Type_BundleType_Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Type.BundleType.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_type()) {
    _internal_mutable_type()->::firrtl::FirrtlPB_Type::MergeFrom(from._internal_type());
  }
  if (from.is_flipped() != 0) {
    _internal_set_is_flipped(from._internal_is_flipped());
  }
}

void FirrtlPB_Type_BundleType_Field::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Type.BundleType.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Type_BundleType_Field::CopyFrom(const FirrtlPB_Type_BundleType_Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Type.BundleType.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Type_BundleType_Field::IsInitialized() const {
  return true;
}

void FirrtlPB_Type_BundleType_Field::InternalSwap(FirrtlPB_Type_BundleType_Field* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(is_flipped_, other->is_flipped_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Type_BundleType_Field::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Type_BundleType::InitAsDefaultInstance() {
}
class FirrtlPB_Type_BundleType::_Internal {
 public:
};

FirrtlPB_Type_BundleType::FirrtlPB_Type_BundleType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Type.BundleType)
}
FirrtlPB_Type_BundleType::FirrtlPB_Type_BundleType(const FirrtlPB_Type_BundleType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      field_(from.field_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Type.BundleType)
}

void FirrtlPB_Type_BundleType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base);
}

FirrtlPB_Type_BundleType::~FirrtlPB_Type_BundleType() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Type.BundleType)
  SharedDtor();
}

void FirrtlPB_Type_BundleType::SharedDtor() {
}

void FirrtlPB_Type_BundleType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Type_BundleType& FirrtlPB_Type_BundleType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Type_BundleType::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Type.BundleType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.Clear();
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Type_BundleType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .firrtl.FirrtlPB.Type.BundleType.Field field = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_field(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Type_BundleType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Type.BundleType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Type.BundleType.Field field = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_field_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_field(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Type.BundleType)
  return target;
}

size_t FirrtlPB_Type_BundleType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Type.BundleType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Type.BundleType.Field field = 1;
  total_size += 1UL * this->_internal_field_size();
  for (const auto& msg : this->field_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Type_BundleType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Type.BundleType)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Type_BundleType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Type_BundleType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Type.BundleType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Type.BundleType)
    MergeFrom(*source);
  }
}

void FirrtlPB_Type_BundleType::MergeFrom(const FirrtlPB_Type_BundleType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Type.BundleType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  field_.MergeFrom(from.field_);
}

void FirrtlPB_Type_BundleType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Type.BundleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Type_BundleType::CopyFrom(const FirrtlPB_Type_BundleType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Type.BundleType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Type_BundleType::IsInitialized() const {
  return true;
}

void FirrtlPB_Type_BundleType::InternalSwap(FirrtlPB_Type_BundleType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_.InternalSwap(&other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Type_BundleType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Type_VectorType::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Type_VectorType_default_instance_._instance.get_mutable()->type_ = const_cast< ::firrtl::FirrtlPB_Type*>(
      ::firrtl::FirrtlPB_Type::internal_default_instance());
}
class FirrtlPB_Type_VectorType::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Type& type(const FirrtlPB_Type_VectorType* msg);
};

const ::firrtl::FirrtlPB_Type&
FirrtlPB_Type_VectorType::_Internal::type(const FirrtlPB_Type_VectorType* msg) {
  return *msg->type_;
}
FirrtlPB_Type_VectorType::FirrtlPB_Type_VectorType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Type.VectorType)
}
FirrtlPB_Type_VectorType::FirrtlPB_Type_VectorType(const FirrtlPB_Type_VectorType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_type()) {
    type_ = new ::firrtl::FirrtlPB_Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Type.VectorType)
}

void FirrtlPB_Type_VectorType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&type_)) + sizeof(size_));
}

FirrtlPB_Type_VectorType::~FirrtlPB_Type_VectorType() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Type.VectorType)
  SharedDtor();
}

void FirrtlPB_Type_VectorType::SharedDtor() {
  if (this != internal_default_instance()) delete type_;
}

void FirrtlPB_Type_VectorType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Type_VectorType& FirrtlPB_Type_VectorType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Type_VectorType::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Type.VectorType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  size_ = 0u;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Type_VectorType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Type_VectorType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Type.VectorType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Type type = 1;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::type(this), target, stream);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Type.VectorType)
  return target;
}

size_t FirrtlPB_Type_VectorType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Type.VectorType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Type type = 1;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // uint32 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Type_VectorType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Type.VectorType)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Type_VectorType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Type_VectorType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Type.VectorType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Type.VectorType)
    MergeFrom(*source);
  }
}

void FirrtlPB_Type_VectorType::MergeFrom(const FirrtlPB_Type_VectorType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Type.VectorType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_type()) {
    _internal_mutable_type()->::firrtl::FirrtlPB_Type::MergeFrom(from._internal_type());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void FirrtlPB_Type_VectorType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Type.VectorType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Type_VectorType::CopyFrom(const FirrtlPB_Type_VectorType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Type.VectorType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Type_VectorType::IsInitialized() const {
  return true;
}

void FirrtlPB_Type_VectorType::InternalSwap(FirrtlPB_Type_VectorType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Type_VectorType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Type_FixedType::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Type_FixedType_default_instance_._instance.get_mutable()->width_ = const_cast< ::firrtl::FirrtlPB_Width*>(
      ::firrtl::FirrtlPB_Width::internal_default_instance());
  ::firrtl::_FirrtlPB_Type_FixedType_default_instance_._instance.get_mutable()->point_ = const_cast< ::firrtl::FirrtlPB_Width*>(
      ::firrtl::FirrtlPB_Width::internal_default_instance());
}
class FirrtlPB_Type_FixedType::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Width& width(const FirrtlPB_Type_FixedType* msg);
  static const ::firrtl::FirrtlPB_Width& point(const FirrtlPB_Type_FixedType* msg);
};

const ::firrtl::FirrtlPB_Width&
FirrtlPB_Type_FixedType::_Internal::width(const FirrtlPB_Type_FixedType* msg) {
  return *msg->width_;
}
const ::firrtl::FirrtlPB_Width&
FirrtlPB_Type_FixedType::_Internal::point(const FirrtlPB_Type_FixedType* msg) {
  return *msg->point_;
}
FirrtlPB_Type_FixedType::FirrtlPB_Type_FixedType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Type.FixedType)
}
FirrtlPB_Type_FixedType::FirrtlPB_Type_FixedType(const FirrtlPB_Type_FixedType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_width()) {
    width_ = new ::firrtl::FirrtlPB_Width(*from.width_);
  } else {
    width_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::firrtl::FirrtlPB_Width(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Type.FixedType)
}

void FirrtlPB_Type_FixedType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Type_FixedType_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&width_)) + sizeof(point_));
}

FirrtlPB_Type_FixedType::~FirrtlPB_Type_FixedType() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Type.FixedType)
  SharedDtor();
}

void FirrtlPB_Type_FixedType::SharedDtor() {
  if (this != internal_default_instance()) delete width_;
  if (this != internal_default_instance()) delete point_;
}

void FirrtlPB_Type_FixedType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Type_FixedType& FirrtlPB_Type_FixedType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Type_FixedType_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Type_FixedType::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Type.FixedType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Type_FixedType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Width width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Width point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Type_FixedType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Type.FixedType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Width width = 1;
  if (this->has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::width(this), target, stream);
  }

  // .firrtl.FirrtlPB.Width point = 2;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Type.FixedType)
  return target;
}

size_t FirrtlPB_Type_FixedType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Type.FixedType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Width width = 1;
  if (this->has_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *width_);
  }

  // .firrtl.FirrtlPB.Width point = 2;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Type_FixedType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Type.FixedType)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Type_FixedType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Type_FixedType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Type.FixedType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Type.FixedType)
    MergeFrom(*source);
  }
}

void FirrtlPB_Type_FixedType::MergeFrom(const FirrtlPB_Type_FixedType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Type.FixedType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_width()) {
    _internal_mutable_width()->::firrtl::FirrtlPB_Width::MergeFrom(from._internal_width());
  }
  if (from.has_point()) {
    _internal_mutable_point()->::firrtl::FirrtlPB_Width::MergeFrom(from._internal_point());
  }
}

void FirrtlPB_Type_FixedType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Type.FixedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Type_FixedType::CopyFrom(const FirrtlPB_Type_FixedType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Type.FixedType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Type_FixedType::IsInitialized() const {
  return true;
}

void FirrtlPB_Type_FixedType::InternalSwap(FirrtlPB_Type_FixedType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(width_, other->width_);
  swap(point_, other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Type_FixedType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Type_AnalogType::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Type_AnalogType_default_instance_._instance.get_mutable()->width_ = const_cast< ::firrtl::FirrtlPB_Width*>(
      ::firrtl::FirrtlPB_Width::internal_default_instance());
}
class FirrtlPB_Type_AnalogType::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Width& width(const FirrtlPB_Type_AnalogType* msg);
};

const ::firrtl::FirrtlPB_Width&
FirrtlPB_Type_AnalogType::_Internal::width(const FirrtlPB_Type_AnalogType* msg) {
  return *msg->width_;
}
FirrtlPB_Type_AnalogType::FirrtlPB_Type_AnalogType()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Type.AnalogType)
}
FirrtlPB_Type_AnalogType::FirrtlPB_Type_AnalogType(const FirrtlPB_Type_AnalogType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_width()) {
    width_ = new ::firrtl::FirrtlPB_Width(*from.width_);
  } else {
    width_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Type.AnalogType)
}

void FirrtlPB_Type_AnalogType::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Type_AnalogType_inou_2ffirrtl_2ffirrtl_2eproto.base);
  width_ = nullptr;
}

FirrtlPB_Type_AnalogType::~FirrtlPB_Type_AnalogType() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Type.AnalogType)
  SharedDtor();
}

void FirrtlPB_Type_AnalogType::SharedDtor() {
  if (this != internal_default_instance()) delete width_;
}

void FirrtlPB_Type_AnalogType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Type_AnalogType& FirrtlPB_Type_AnalogType::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Type_AnalogType_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Type_AnalogType::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Type.AnalogType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Type_AnalogType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Width width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Type_AnalogType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Type.AnalogType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Width width = 3;
  if (this->has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::width(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Type.AnalogType)
  return target;
}

size_t FirrtlPB_Type_AnalogType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Type.AnalogType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Width width = 3;
  if (this->has_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *width_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Type_AnalogType::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Type.AnalogType)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Type_AnalogType* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Type_AnalogType>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Type.AnalogType)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Type.AnalogType)
    MergeFrom(*source);
  }
}

void FirrtlPB_Type_AnalogType::MergeFrom(const FirrtlPB_Type_AnalogType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Type.AnalogType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_width()) {
    _internal_mutable_width()->::firrtl::FirrtlPB_Width::MergeFrom(from._internal_width());
  }
}

void FirrtlPB_Type_AnalogType::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Type.AnalogType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Type_AnalogType::CopyFrom(const FirrtlPB_Type_AnalogType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Type.AnalogType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Type_AnalogType::IsInitialized() const {
  return true;
}

void FirrtlPB_Type_AnalogType::InternalSwap(FirrtlPB_Type_AnalogType* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Type_AnalogType::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Type::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Type_default_instance_.uint_type_ = const_cast< ::firrtl::FirrtlPB_Type_UIntType*>(
      ::firrtl::FirrtlPB_Type_UIntType::internal_default_instance());
  ::firrtl::_FirrtlPB_Type_default_instance_.sint_type_ = const_cast< ::firrtl::FirrtlPB_Type_SIntType*>(
      ::firrtl::FirrtlPB_Type_SIntType::internal_default_instance());
  ::firrtl::_FirrtlPB_Type_default_instance_.clock_type_ = const_cast< ::firrtl::FirrtlPB_Type_ClockType*>(
      ::firrtl::FirrtlPB_Type_ClockType::internal_default_instance());
  ::firrtl::_FirrtlPB_Type_default_instance_.bundle_type_ = const_cast< ::firrtl::FirrtlPB_Type_BundleType*>(
      ::firrtl::FirrtlPB_Type_BundleType::internal_default_instance());
  ::firrtl::_FirrtlPB_Type_default_instance_.vector_type_ = const_cast< ::firrtl::FirrtlPB_Type_VectorType*>(
      ::firrtl::FirrtlPB_Type_VectorType::internal_default_instance());
  ::firrtl::_FirrtlPB_Type_default_instance_.fixed_type_ = const_cast< ::firrtl::FirrtlPB_Type_FixedType*>(
      ::firrtl::FirrtlPB_Type_FixedType::internal_default_instance());
  ::firrtl::_FirrtlPB_Type_default_instance_.analog_type_ = const_cast< ::firrtl::FirrtlPB_Type_AnalogType*>(
      ::firrtl::FirrtlPB_Type_AnalogType::internal_default_instance());
  ::firrtl::_FirrtlPB_Type_default_instance_.async_reset_type_ = const_cast< ::firrtl::FirrtlPB_Type_AsyncResetType*>(
      ::firrtl::FirrtlPB_Type_AsyncResetType::internal_default_instance());
  ::firrtl::_FirrtlPB_Type_default_instance_.reset_type_ = const_cast< ::firrtl::FirrtlPB_Type_ResetType*>(
      ::firrtl::FirrtlPB_Type_ResetType::internal_default_instance());
}
class FirrtlPB_Type::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Type_UIntType& uint_type(const FirrtlPB_Type* msg);
  static const ::firrtl::FirrtlPB_Type_SIntType& sint_type(const FirrtlPB_Type* msg);
  static const ::firrtl::FirrtlPB_Type_ClockType& clock_type(const FirrtlPB_Type* msg);
  static const ::firrtl::FirrtlPB_Type_BundleType& bundle_type(const FirrtlPB_Type* msg);
  static const ::firrtl::FirrtlPB_Type_VectorType& vector_type(const FirrtlPB_Type* msg);
  static const ::firrtl::FirrtlPB_Type_FixedType& fixed_type(const FirrtlPB_Type* msg);
  static const ::firrtl::FirrtlPB_Type_AnalogType& analog_type(const FirrtlPB_Type* msg);
  static const ::firrtl::FirrtlPB_Type_AsyncResetType& async_reset_type(const FirrtlPB_Type* msg);
  static const ::firrtl::FirrtlPB_Type_ResetType& reset_type(const FirrtlPB_Type* msg);
};

const ::firrtl::FirrtlPB_Type_UIntType&
FirrtlPB_Type::_Internal::uint_type(const FirrtlPB_Type* msg) {
  return *msg->type_.uint_type_;
}
const ::firrtl::FirrtlPB_Type_SIntType&
FirrtlPB_Type::_Internal::sint_type(const FirrtlPB_Type* msg) {
  return *msg->type_.sint_type_;
}
const ::firrtl::FirrtlPB_Type_ClockType&
FirrtlPB_Type::_Internal::clock_type(const FirrtlPB_Type* msg) {
  return *msg->type_.clock_type_;
}
const ::firrtl::FirrtlPB_Type_BundleType&
FirrtlPB_Type::_Internal::bundle_type(const FirrtlPB_Type* msg) {
  return *msg->type_.bundle_type_;
}
const ::firrtl::FirrtlPB_Type_VectorType&
FirrtlPB_Type::_Internal::vector_type(const FirrtlPB_Type* msg) {
  return *msg->type_.vector_type_;
}
const ::firrtl::FirrtlPB_Type_FixedType&
FirrtlPB_Type::_Internal::fixed_type(const FirrtlPB_Type* msg) {
  return *msg->type_.fixed_type_;
}
const ::firrtl::FirrtlPB_Type_AnalogType&
FirrtlPB_Type::_Internal::analog_type(const FirrtlPB_Type* msg) {
  return *msg->type_.analog_type_;
}
const ::firrtl::FirrtlPB_Type_AsyncResetType&
FirrtlPB_Type::_Internal::async_reset_type(const FirrtlPB_Type* msg) {
  return *msg->type_.async_reset_type_;
}
const ::firrtl::FirrtlPB_Type_ResetType&
FirrtlPB_Type::_Internal::reset_type(const FirrtlPB_Type* msg) {
  return *msg->type_.reset_type_;
}
void FirrtlPB_Type::set_allocated_uint_type(::firrtl::FirrtlPB_Type_UIntType* uint_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (uint_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uint_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uint_type, submessage_arena);
    }
    set_has_uint_type();
    type_.uint_type_ = uint_type;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.uint_type)
}
void FirrtlPB_Type::set_allocated_sint_type(::firrtl::FirrtlPB_Type_SIntType* sint_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (sint_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sint_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sint_type, submessage_arena);
    }
    set_has_sint_type();
    type_.sint_type_ = sint_type;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.sint_type)
}
void FirrtlPB_Type::set_allocated_clock_type(::firrtl::FirrtlPB_Type_ClockType* clock_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (clock_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      clock_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, clock_type, submessage_arena);
    }
    set_has_clock_type();
    type_.clock_type_ = clock_type;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.clock_type)
}
void FirrtlPB_Type::set_allocated_bundle_type(::firrtl::FirrtlPB_Type_BundleType* bundle_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (bundle_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bundle_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bundle_type, submessage_arena);
    }
    set_has_bundle_type();
    type_.bundle_type_ = bundle_type;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.bundle_type)
}
void FirrtlPB_Type::set_allocated_vector_type(::firrtl::FirrtlPB_Type_VectorType* vector_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (vector_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vector_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector_type, submessage_arena);
    }
    set_has_vector_type();
    type_.vector_type_ = vector_type;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.vector_type)
}
void FirrtlPB_Type::set_allocated_fixed_type(::firrtl::FirrtlPB_Type_FixedType* fixed_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (fixed_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fixed_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_type, submessage_arena);
    }
    set_has_fixed_type();
    type_.fixed_type_ = fixed_type;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.fixed_type)
}
void FirrtlPB_Type::set_allocated_analog_type(::firrtl::FirrtlPB_Type_AnalogType* analog_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (analog_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      analog_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, analog_type, submessage_arena);
    }
    set_has_analog_type();
    type_.analog_type_ = analog_type;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.analog_type)
}
void FirrtlPB_Type::set_allocated_async_reset_type(::firrtl::FirrtlPB_Type_AsyncResetType* async_reset_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (async_reset_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      async_reset_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, async_reset_type, submessage_arena);
    }
    set_has_async_reset_type();
    type_.async_reset_type_ = async_reset_type;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.async_reset_type)
}
void FirrtlPB_Type::set_allocated_reset_type(::firrtl::FirrtlPB_Type_ResetType* reset_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (reset_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reset_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reset_type, submessage_arena);
    }
    set_has_reset_type();
    type_.reset_type_ = reset_type;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Type.reset_type)
}
FirrtlPB_Type::FirrtlPB_Type()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Type)
}
FirrtlPB_Type::FirrtlPB_Type(const FirrtlPB_Type& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kUintType: {
      _internal_mutable_uint_type()->::firrtl::FirrtlPB_Type_UIntType::MergeFrom(from._internal_uint_type());
      break;
    }
    case kSintType: {
      _internal_mutable_sint_type()->::firrtl::FirrtlPB_Type_SIntType::MergeFrom(from._internal_sint_type());
      break;
    }
    case kClockType: {
      _internal_mutable_clock_type()->::firrtl::FirrtlPB_Type_ClockType::MergeFrom(from._internal_clock_type());
      break;
    }
    case kBundleType: {
      _internal_mutable_bundle_type()->::firrtl::FirrtlPB_Type_BundleType::MergeFrom(from._internal_bundle_type());
      break;
    }
    case kVectorType: {
      _internal_mutable_vector_type()->::firrtl::FirrtlPB_Type_VectorType::MergeFrom(from._internal_vector_type());
      break;
    }
    case kFixedType: {
      _internal_mutable_fixed_type()->::firrtl::FirrtlPB_Type_FixedType::MergeFrom(from._internal_fixed_type());
      break;
    }
    case kAnalogType: {
      _internal_mutable_analog_type()->::firrtl::FirrtlPB_Type_AnalogType::MergeFrom(from._internal_analog_type());
      break;
    }
    case kAsyncResetType: {
      _internal_mutable_async_reset_type()->::firrtl::FirrtlPB_Type_AsyncResetType::MergeFrom(from._internal_async_reset_type());
      break;
    }
    case kResetType: {
      _internal_mutable_reset_type()->::firrtl::FirrtlPB_Type_ResetType::MergeFrom(from._internal_reset_type());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Type)
}

void FirrtlPB_Type::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base);
  clear_has_type();
}

FirrtlPB_Type::~FirrtlPB_Type() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Type)
  SharedDtor();
}

void FirrtlPB_Type::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void FirrtlPB_Type::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Type& FirrtlPB_Type::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Type_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Type::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:firrtl.FirrtlPB.Type)
  switch (type_case()) {
    case kUintType: {
      delete type_.uint_type_;
      break;
    }
    case kSintType: {
      delete type_.sint_type_;
      break;
    }
    case kClockType: {
      delete type_.clock_type_;
      break;
    }
    case kBundleType: {
      delete type_.bundle_type_;
      break;
    }
    case kVectorType: {
      delete type_.vector_type_;
      break;
    }
    case kFixedType: {
      delete type_.fixed_type_;
      break;
    }
    case kAnalogType: {
      delete type_.analog_type_;
      break;
    }
    case kAsyncResetType: {
      delete type_.async_reset_type_;
      break;
    }
    case kResetType: {
      delete type_.reset_type_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void FirrtlPB_Type::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Type::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Type.UIntType uint_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uint_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type.SIntType sint_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sint_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type.ClockType clock_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_clock_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type.BundleType bundle_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_bundle_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type.VectorType vector_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type.FixedType fixed_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type.AnalogType analog_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_analog_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type.AsyncResetType async_reset_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_async_reset_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type.ResetType reset_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_reset_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Type::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Type)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Type.UIntType uint_type = 2;
  if (_internal_has_uint_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uint_type(this), target, stream);
  }

  // .firrtl.FirrtlPB.Type.SIntType sint_type = 3;
  if (_internal_has_sint_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sint_type(this), target, stream);
  }

  // .firrtl.FirrtlPB.Type.ClockType clock_type = 4;
  if (_internal_has_clock_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::clock_type(this), target, stream);
  }

  // .firrtl.FirrtlPB.Type.BundleType bundle_type = 5;
  if (_internal_has_bundle_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::bundle_type(this), target, stream);
  }

  // .firrtl.FirrtlPB.Type.VectorType vector_type = 6;
  if (_internal_has_vector_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::vector_type(this), target, stream);
  }

  // .firrtl.FirrtlPB.Type.FixedType fixed_type = 7;
  if (_internal_has_fixed_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::fixed_type(this), target, stream);
  }

  // .firrtl.FirrtlPB.Type.AnalogType analog_type = 8;
  if (_internal_has_analog_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::analog_type(this), target, stream);
  }

  // .firrtl.FirrtlPB.Type.AsyncResetType async_reset_type = 9;
  if (_internal_has_async_reset_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::async_reset_type(this), target, stream);
  }

  // .firrtl.FirrtlPB.Type.ResetType reset_type = 10;
  if (_internal_has_reset_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::reset_type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Type)
  return target;
}

size_t FirrtlPB_Type::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Type)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .firrtl.FirrtlPB.Type.UIntType uint_type = 2;
    case kUintType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.uint_type_);
      break;
    }
    // .firrtl.FirrtlPB.Type.SIntType sint_type = 3;
    case kSintType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.sint_type_);
      break;
    }
    // .firrtl.FirrtlPB.Type.ClockType clock_type = 4;
    case kClockType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.clock_type_);
      break;
    }
    // .firrtl.FirrtlPB.Type.BundleType bundle_type = 5;
    case kBundleType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.bundle_type_);
      break;
    }
    // .firrtl.FirrtlPB.Type.VectorType vector_type = 6;
    case kVectorType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.vector_type_);
      break;
    }
    // .firrtl.FirrtlPB.Type.FixedType fixed_type = 7;
    case kFixedType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.fixed_type_);
      break;
    }
    // .firrtl.FirrtlPB.Type.AnalogType analog_type = 8;
    case kAnalogType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.analog_type_);
      break;
    }
    // .firrtl.FirrtlPB.Type.AsyncResetType async_reset_type = 9;
    case kAsyncResetType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.async_reset_type_);
      break;
    }
    // .firrtl.FirrtlPB.Type.ResetType reset_type = 10;
    case kResetType: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.reset_type_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Type::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Type)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Type* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Type>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Type)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Type)
    MergeFrom(*source);
  }
}

void FirrtlPB_Type::MergeFrom(const FirrtlPB_Type& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Type)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kUintType: {
      _internal_mutable_uint_type()->::firrtl::FirrtlPB_Type_UIntType::MergeFrom(from._internal_uint_type());
      break;
    }
    case kSintType: {
      _internal_mutable_sint_type()->::firrtl::FirrtlPB_Type_SIntType::MergeFrom(from._internal_sint_type());
      break;
    }
    case kClockType: {
      _internal_mutable_clock_type()->::firrtl::FirrtlPB_Type_ClockType::MergeFrom(from._internal_clock_type());
      break;
    }
    case kBundleType: {
      _internal_mutable_bundle_type()->::firrtl::FirrtlPB_Type_BundleType::MergeFrom(from._internal_bundle_type());
      break;
    }
    case kVectorType: {
      _internal_mutable_vector_type()->::firrtl::FirrtlPB_Type_VectorType::MergeFrom(from._internal_vector_type());
      break;
    }
    case kFixedType: {
      _internal_mutable_fixed_type()->::firrtl::FirrtlPB_Type_FixedType::MergeFrom(from._internal_fixed_type());
      break;
    }
    case kAnalogType: {
      _internal_mutable_analog_type()->::firrtl::FirrtlPB_Type_AnalogType::MergeFrom(from._internal_analog_type());
      break;
    }
    case kAsyncResetType: {
      _internal_mutable_async_reset_type()->::firrtl::FirrtlPB_Type_AsyncResetType::MergeFrom(from._internal_async_reset_type());
      break;
    }
    case kResetType: {
      _internal_mutable_reset_type()->::firrtl::FirrtlPB_Type_ResetType::MergeFrom(from._internal_reset_type());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void FirrtlPB_Type::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Type::CopyFrom(const FirrtlPB_Type& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Type)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Type::IsInitialized() const {
  return true;
}

void FirrtlPB_Type::InternalSwap(FirrtlPB_Type* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Type::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Port::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Port_default_instance_._instance.get_mutable()->type_ = const_cast< ::firrtl::FirrtlPB_Type*>(
      ::firrtl::FirrtlPB_Type::internal_default_instance());
}
class FirrtlPB_Port::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Type& type(const FirrtlPB_Port* msg);
};

const ::firrtl::FirrtlPB_Type&
FirrtlPB_Port::_Internal::type(const FirrtlPB_Port* msg) {
  return *msg->type_;
}
FirrtlPB_Port::FirrtlPB_Port()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Port)
}
FirrtlPB_Port::FirrtlPB_Port(const FirrtlPB_Port& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from._internal_has_type()) {
    type_ = new ::firrtl::FirrtlPB_Type(*from.type_);
  } else {
    type_ = nullptr;
  }
  direction_ = from.direction_;
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Port)
}

void FirrtlPB_Port::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Port_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&direction_) -
      reinterpret_cast<char*>(&type_)) + sizeof(direction_));
}

FirrtlPB_Port::~FirrtlPB_Port() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Port)
  SharedDtor();
}

void FirrtlPB_Port::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete type_;
}

void FirrtlPB_Port::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Port& FirrtlPB_Port::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Port_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Port::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && type_ != nullptr) {
    delete type_;
  }
  type_ = nullptr;
  direction_ = 0;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Port::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Port.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Port.Direction direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_direction(static_cast<::firrtl::FirrtlPB_Port_Direction>(val));
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Type type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_type(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Port::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Port)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Port.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .firrtl.FirrtlPB.Port.Direction direction = 2;
  if (this->direction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_direction(), target);
  }

  // .firrtl.FirrtlPB.Type type = 3;
  if (this->has_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::type(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Port)
  return target;
}

size_t FirrtlPB_Port::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Port)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .firrtl.FirrtlPB.Type type = 3;
  if (this->has_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *type_);
  }

  // .firrtl.FirrtlPB.Port.Direction direction = 2;
  if (this->direction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_direction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Port::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Port)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Port* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Port>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Port)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Port)
    MergeFrom(*source);
  }
}

void FirrtlPB_Port::MergeFrom(const FirrtlPB_Port& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Port)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.has_type()) {
    _internal_mutable_type()->::firrtl::FirrtlPB_Type::MergeFrom(from._internal_type());
  }
  if (from.direction() != 0) {
    _internal_set_direction(from._internal_direction());
  }
}

void FirrtlPB_Port::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Port::CopyFrom(const FirrtlPB_Port& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Port)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Port::IsInitialized() const {
  return true;
}

void FirrtlPB_Port::InternalSwap(FirrtlPB_Port* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(direction_, other->direction_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Port::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Expression_Reference::InitAsDefaultInstance() {
}
class FirrtlPB_Expression_Reference::_Internal {
 public:
};

FirrtlPB_Expression_Reference::FirrtlPB_Expression_Reference()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Expression.Reference)
}
FirrtlPB_Expression_Reference::FirrtlPB_Expression_Reference(const FirrtlPB_Expression_Reference& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Expression.Reference)
}

void FirrtlPB_Expression_Reference::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Expression_Reference_inou_2ffirrtl_2ffirrtl_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FirrtlPB_Expression_Reference::~FirrtlPB_Expression_Reference() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Expression.Reference)
  SharedDtor();
}

void FirrtlPB_Expression_Reference::SharedDtor() {
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FirrtlPB_Expression_Reference::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Expression_Reference& FirrtlPB_Expression_Reference::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Expression_Reference_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Expression_Reference::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Expression.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Expression_Reference::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Expression.Reference.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Expression_Reference::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Expression.Reference)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Expression.Reference.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Expression.Reference)
  return target;
}

size_t FirrtlPB_Expression_Reference::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Expression.Reference)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Expression_Reference::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Expression.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Expression_Reference* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Expression_Reference>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Expression.Reference)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Expression.Reference)
    MergeFrom(*source);
  }
}

void FirrtlPB_Expression_Reference::MergeFrom(const FirrtlPB_Expression_Reference& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Expression.Reference)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
}

void FirrtlPB_Expression_Reference::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Expression.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Expression_Reference::CopyFrom(const FirrtlPB_Expression_Reference& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Expression.Reference)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Expression_Reference::IsInitialized() const {
  return true;
}

void FirrtlPB_Expression_Reference::InternalSwap(FirrtlPB_Expression_Reference* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Expression_Reference::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Expression_IntegerLiteral::InitAsDefaultInstance() {
}
class FirrtlPB_Expression_IntegerLiteral::_Internal {
 public:
};

FirrtlPB_Expression_IntegerLiteral::FirrtlPB_Expression_IntegerLiteral()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Expression.IntegerLiteral)
}
FirrtlPB_Expression_IntegerLiteral::FirrtlPB_Expression_IntegerLiteral(const FirrtlPB_Expression_IntegerLiteral& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Expression.IntegerLiteral)
}

void FirrtlPB_Expression_IntegerLiteral::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Expression_IntegerLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FirrtlPB_Expression_IntegerLiteral::~FirrtlPB_Expression_IntegerLiteral() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Expression.IntegerLiteral)
  SharedDtor();
}

void FirrtlPB_Expression_IntegerLiteral::SharedDtor() {
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FirrtlPB_Expression_IntegerLiteral::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Expression_IntegerLiteral& FirrtlPB_Expression_IntegerLiteral::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Expression_IntegerLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Expression_IntegerLiteral::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Expression.IntegerLiteral)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Expression_IntegerLiteral::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Expression.IntegerLiteral.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Expression_IntegerLiteral::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Expression.IntegerLiteral)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Expression.IntegerLiteral.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Expression.IntegerLiteral)
  return target;
}

size_t FirrtlPB_Expression_IntegerLiteral::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Expression.IntegerLiteral)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Expression_IntegerLiteral::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Expression.IntegerLiteral)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Expression_IntegerLiteral* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Expression_IntegerLiteral>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Expression.IntegerLiteral)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Expression.IntegerLiteral)
    MergeFrom(*source);
  }
}

void FirrtlPB_Expression_IntegerLiteral::MergeFrom(const FirrtlPB_Expression_IntegerLiteral& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Expression.IntegerLiteral)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void FirrtlPB_Expression_IntegerLiteral::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Expression.IntegerLiteral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Expression_IntegerLiteral::CopyFrom(const FirrtlPB_Expression_IntegerLiteral& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Expression.IntegerLiteral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Expression_IntegerLiteral::IsInitialized() const {
  return true;
}

void FirrtlPB_Expression_IntegerLiteral::InternalSwap(FirrtlPB_Expression_IntegerLiteral* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Expression_IntegerLiteral::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Expression_UIntLiteral::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Expression_UIntLiteral_default_instance_._instance.get_mutable()->value_ = const_cast< ::firrtl::FirrtlPB_Expression_IntegerLiteral*>(
      ::firrtl::FirrtlPB_Expression_IntegerLiteral::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_UIntLiteral_default_instance_._instance.get_mutable()->width_ = const_cast< ::firrtl::FirrtlPB_Width*>(
      ::firrtl::FirrtlPB_Width::internal_default_instance());
}
class FirrtlPB_Expression_UIntLiteral::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression_IntegerLiteral& value(const FirrtlPB_Expression_UIntLiteral* msg);
  static const ::firrtl::FirrtlPB_Width& width(const FirrtlPB_Expression_UIntLiteral* msg);
};

const ::firrtl::FirrtlPB_Expression_IntegerLiteral&
FirrtlPB_Expression_UIntLiteral::_Internal::value(const FirrtlPB_Expression_UIntLiteral* msg) {
  return *msg->value_;
}
const ::firrtl::FirrtlPB_Width&
FirrtlPB_Expression_UIntLiteral::_Internal::width(const FirrtlPB_Expression_UIntLiteral* msg) {
  return *msg->width_;
}
FirrtlPB_Expression_UIntLiteral::FirrtlPB_Expression_UIntLiteral()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Expression.UIntLiteral)
}
FirrtlPB_Expression_UIntLiteral::FirrtlPB_Expression_UIntLiteral(const FirrtlPB_Expression_UIntLiteral& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::firrtl::FirrtlPB_Expression_IntegerLiteral(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_width()) {
    width_ = new ::firrtl::FirrtlPB_Width(*from.width_);
  } else {
    width_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Expression.UIntLiteral)
}

void FirrtlPB_Expression_UIntLiteral::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Expression_UIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&value_)) + sizeof(width_));
}

FirrtlPB_Expression_UIntLiteral::~FirrtlPB_Expression_UIntLiteral() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Expression.UIntLiteral)
  SharedDtor();
}

void FirrtlPB_Expression_UIntLiteral::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete width_;
}

void FirrtlPB_Expression_UIntLiteral::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Expression_UIntLiteral& FirrtlPB_Expression_UIntLiteral::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Expression_UIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Expression_UIntLiteral::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Expression.UIntLiteral)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Expression_UIntLiteral::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression.IntegerLiteral value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Width width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Expression_UIntLiteral::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Expression.UIntLiteral)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression.IntegerLiteral value = 1;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  // .firrtl.FirrtlPB.Width width = 2;
  if (this->has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::width(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Expression.UIntLiteral)
  return target;
}

size_t FirrtlPB_Expression_UIntLiteral::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Expression.UIntLiteral)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression.IntegerLiteral value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .firrtl.FirrtlPB.Width width = 2;
  if (this->has_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *width_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Expression_UIntLiteral::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Expression.UIntLiteral)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Expression_UIntLiteral* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Expression_UIntLiteral>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Expression.UIntLiteral)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Expression.UIntLiteral)
    MergeFrom(*source);
  }
}

void FirrtlPB_Expression_UIntLiteral::MergeFrom(const FirrtlPB_Expression_UIntLiteral& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Expression.UIntLiteral)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::firrtl::FirrtlPB_Expression_IntegerLiteral::MergeFrom(from._internal_value());
  }
  if (from.has_width()) {
    _internal_mutable_width()->::firrtl::FirrtlPB_Width::MergeFrom(from._internal_width());
  }
}

void FirrtlPB_Expression_UIntLiteral::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Expression.UIntLiteral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Expression_UIntLiteral::CopyFrom(const FirrtlPB_Expression_UIntLiteral& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Expression.UIntLiteral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Expression_UIntLiteral::IsInitialized() const {
  return true;
}

void FirrtlPB_Expression_UIntLiteral::InternalSwap(FirrtlPB_Expression_UIntLiteral* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Expression_UIntLiteral::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Expression_SIntLiteral::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Expression_SIntLiteral_default_instance_._instance.get_mutable()->value_ = const_cast< ::firrtl::FirrtlPB_Expression_IntegerLiteral*>(
      ::firrtl::FirrtlPB_Expression_IntegerLiteral::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_SIntLiteral_default_instance_._instance.get_mutable()->width_ = const_cast< ::firrtl::FirrtlPB_Width*>(
      ::firrtl::FirrtlPB_Width::internal_default_instance());
}
class FirrtlPB_Expression_SIntLiteral::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression_IntegerLiteral& value(const FirrtlPB_Expression_SIntLiteral* msg);
  static const ::firrtl::FirrtlPB_Width& width(const FirrtlPB_Expression_SIntLiteral* msg);
};

const ::firrtl::FirrtlPB_Expression_IntegerLiteral&
FirrtlPB_Expression_SIntLiteral::_Internal::value(const FirrtlPB_Expression_SIntLiteral* msg) {
  return *msg->value_;
}
const ::firrtl::FirrtlPB_Width&
FirrtlPB_Expression_SIntLiteral::_Internal::width(const FirrtlPB_Expression_SIntLiteral* msg) {
  return *msg->width_;
}
FirrtlPB_Expression_SIntLiteral::FirrtlPB_Expression_SIntLiteral()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Expression.SIntLiteral)
}
FirrtlPB_Expression_SIntLiteral::FirrtlPB_Expression_SIntLiteral(const FirrtlPB_Expression_SIntLiteral& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::firrtl::FirrtlPB_Expression_IntegerLiteral(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_width()) {
    width_ = new ::firrtl::FirrtlPB_Width(*from.width_);
  } else {
    width_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Expression.SIntLiteral)
}

void FirrtlPB_Expression_SIntLiteral::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Expression_SIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&width_) -
      reinterpret_cast<char*>(&value_)) + sizeof(width_));
}

FirrtlPB_Expression_SIntLiteral::~FirrtlPB_Expression_SIntLiteral() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Expression.SIntLiteral)
  SharedDtor();
}

void FirrtlPB_Expression_SIntLiteral::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete width_;
}

void FirrtlPB_Expression_SIntLiteral::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Expression_SIntLiteral& FirrtlPB_Expression_SIntLiteral::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Expression_SIntLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Expression_SIntLiteral::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Expression.SIntLiteral)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Expression_SIntLiteral::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression.IntegerLiteral value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Width width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Expression_SIntLiteral::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Expression.SIntLiteral)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression.IntegerLiteral value = 1;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  // .firrtl.FirrtlPB.Width width = 2;
  if (this->has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::width(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Expression.SIntLiteral)
  return target;
}

size_t FirrtlPB_Expression_SIntLiteral::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Expression.SIntLiteral)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression.IntegerLiteral value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .firrtl.FirrtlPB.Width width = 2;
  if (this->has_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *width_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Expression_SIntLiteral::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Expression.SIntLiteral)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Expression_SIntLiteral* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Expression_SIntLiteral>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Expression.SIntLiteral)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Expression.SIntLiteral)
    MergeFrom(*source);
  }
}

void FirrtlPB_Expression_SIntLiteral::MergeFrom(const FirrtlPB_Expression_SIntLiteral& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Expression.SIntLiteral)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::firrtl::FirrtlPB_Expression_IntegerLiteral::MergeFrom(from._internal_value());
  }
  if (from.has_width()) {
    _internal_mutable_width()->::firrtl::FirrtlPB_Width::MergeFrom(from._internal_width());
  }
}

void FirrtlPB_Expression_SIntLiteral::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Expression.SIntLiteral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Expression_SIntLiteral::CopyFrom(const FirrtlPB_Expression_SIntLiteral& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Expression.SIntLiteral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Expression_SIntLiteral::IsInitialized() const {
  return true;
}

void FirrtlPB_Expression_SIntLiteral::InternalSwap(FirrtlPB_Expression_SIntLiteral* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(width_, other->width_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Expression_SIntLiteral::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Expression_FixedLiteral::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Expression_FixedLiteral_default_instance_._instance.get_mutable()->value_ = const_cast< ::firrtl::FirrtlPB_BigInt*>(
      ::firrtl::FirrtlPB_BigInt::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_FixedLiteral_default_instance_._instance.get_mutable()->width_ = const_cast< ::firrtl::FirrtlPB_Width*>(
      ::firrtl::FirrtlPB_Width::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_FixedLiteral_default_instance_._instance.get_mutable()->point_ = const_cast< ::firrtl::FirrtlPB_Width*>(
      ::firrtl::FirrtlPB_Width::internal_default_instance());
}
class FirrtlPB_Expression_FixedLiteral::_Internal {
 public:
  static const ::firrtl::FirrtlPB_BigInt& value(const FirrtlPB_Expression_FixedLiteral* msg);
  static const ::firrtl::FirrtlPB_Width& width(const FirrtlPB_Expression_FixedLiteral* msg);
  static const ::firrtl::FirrtlPB_Width& point(const FirrtlPB_Expression_FixedLiteral* msg);
};

const ::firrtl::FirrtlPB_BigInt&
FirrtlPB_Expression_FixedLiteral::_Internal::value(const FirrtlPB_Expression_FixedLiteral* msg) {
  return *msg->value_;
}
const ::firrtl::FirrtlPB_Width&
FirrtlPB_Expression_FixedLiteral::_Internal::width(const FirrtlPB_Expression_FixedLiteral* msg) {
  return *msg->width_;
}
const ::firrtl::FirrtlPB_Width&
FirrtlPB_Expression_FixedLiteral::_Internal::point(const FirrtlPB_Expression_FixedLiteral* msg) {
  return *msg->point_;
}
FirrtlPB_Expression_FixedLiteral::FirrtlPB_Expression_FixedLiteral()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Expression.FixedLiteral)
}
FirrtlPB_Expression_FixedLiteral::FirrtlPB_Expression_FixedLiteral(const FirrtlPB_Expression_FixedLiteral& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_value()) {
    value_ = new ::firrtl::FirrtlPB_BigInt(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from._internal_has_width()) {
    width_ = new ::firrtl::FirrtlPB_Width(*from.width_);
  } else {
    width_ = nullptr;
  }
  if (from._internal_has_point()) {
    point_ = new ::firrtl::FirrtlPB_Width(*from.point_);
  } else {
    point_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Expression.FixedLiteral)
}

void FirrtlPB_Expression_FixedLiteral::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Expression_FixedLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&point_) -
      reinterpret_cast<char*>(&value_)) + sizeof(point_));
}

FirrtlPB_Expression_FixedLiteral::~FirrtlPB_Expression_FixedLiteral() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Expression.FixedLiteral)
  SharedDtor();
}

void FirrtlPB_Expression_FixedLiteral::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete width_;
  if (this != internal_default_instance()) delete point_;
}

void FirrtlPB_Expression_FixedLiteral::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Expression_FixedLiteral& FirrtlPB_Expression_FixedLiteral::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Expression_FixedLiteral_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Expression_FixedLiteral::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Expression.FixedLiteral)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && width_ != nullptr) {
    delete width_;
  }
  width_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && point_ != nullptr) {
    delete point_;
  }
  point_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Expression_FixedLiteral::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.BigInt value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Width width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_width(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Width point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_point(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Expression_FixedLiteral::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Expression.FixedLiteral)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.BigInt value = 1;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::value(this), target, stream);
  }

  // .firrtl.FirrtlPB.Width width = 2;
  if (this->has_width()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::width(this), target, stream);
  }

  // .firrtl.FirrtlPB.Width point = 3;
  if (this->has_point()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::point(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Expression.FixedLiteral)
  return target;
}

size_t FirrtlPB_Expression_FixedLiteral::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Expression.FixedLiteral)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.BigInt value = 1;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .firrtl.FirrtlPB.Width width = 2;
  if (this->has_width()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *width_);
  }

  // .firrtl.FirrtlPB.Width point = 3;
  if (this->has_point()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *point_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Expression_FixedLiteral::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Expression.FixedLiteral)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Expression_FixedLiteral* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Expression_FixedLiteral>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Expression.FixedLiteral)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Expression.FixedLiteral)
    MergeFrom(*source);
  }
}

void FirrtlPB_Expression_FixedLiteral::MergeFrom(const FirrtlPB_Expression_FixedLiteral& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Expression.FixedLiteral)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_value()) {
    _internal_mutable_value()->::firrtl::FirrtlPB_BigInt::MergeFrom(from._internal_value());
  }
  if (from.has_width()) {
    _internal_mutable_width()->::firrtl::FirrtlPB_Width::MergeFrom(from._internal_width());
  }
  if (from.has_point()) {
    _internal_mutable_point()->::firrtl::FirrtlPB_Width::MergeFrom(from._internal_point());
  }
}

void FirrtlPB_Expression_FixedLiteral::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Expression.FixedLiteral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Expression_FixedLiteral::CopyFrom(const FirrtlPB_Expression_FixedLiteral& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Expression.FixedLiteral)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Expression_FixedLiteral::IsInitialized() const {
  return true;
}

void FirrtlPB_Expression_FixedLiteral::InternalSwap(FirrtlPB_Expression_FixedLiteral* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(value_, other->value_);
  swap(width_, other->width_);
  swap(point_, other->point_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Expression_FixedLiteral::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Expression_ValidIf::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Expression_ValidIf_default_instance_._instance.get_mutable()->condition_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_ValidIf_default_instance_._instance.get_mutable()->value_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Expression_ValidIf::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& condition(const FirrtlPB_Expression_ValidIf* msg);
  static const ::firrtl::FirrtlPB_Expression& value(const FirrtlPB_Expression_ValidIf* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Expression_ValidIf::_Internal::condition(const FirrtlPB_Expression_ValidIf* msg) {
  return *msg->condition_;
}
const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Expression_ValidIf::_Internal::value(const FirrtlPB_Expression_ValidIf* msg) {
  return *msg->value_;
}
FirrtlPB_Expression_ValidIf::FirrtlPB_Expression_ValidIf()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Expression.ValidIf)
}
FirrtlPB_Expression_ValidIf::FirrtlPB_Expression_ValidIf(const FirrtlPB_Expression_ValidIf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_condition()) {
    condition_ = new ::firrtl::FirrtlPB_Expression(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::firrtl::FirrtlPB_Expression(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Expression.ValidIf)
}

void FirrtlPB_Expression_ValidIf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&condition_)) + sizeof(value_));
}

FirrtlPB_Expression_ValidIf::~FirrtlPB_Expression_ValidIf() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Expression.ValidIf)
  SharedDtor();
}

void FirrtlPB_Expression_ValidIf::SharedDtor() {
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete value_;
}

void FirrtlPB_Expression_ValidIf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Expression_ValidIf& FirrtlPB_Expression_ValidIf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Expression_ValidIf::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Expression.ValidIf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Expression_ValidIf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Expression_ValidIf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Expression.ValidIf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression condition = 1;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::condition(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression value = 2;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Expression.ValidIf)
  return target;
}

size_t FirrtlPB_Expression_ValidIf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Expression.ValidIf)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression condition = 1;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .firrtl.FirrtlPB.Expression value = 2;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Expression_ValidIf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Expression.ValidIf)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Expression_ValidIf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Expression_ValidIf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Expression.ValidIf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Expression.ValidIf)
    MergeFrom(*source);
  }
}

void FirrtlPB_Expression_ValidIf::MergeFrom(const FirrtlPB_Expression_ValidIf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Expression.ValidIf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_condition()) {
    _internal_mutable_condition()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_condition());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_value());
  }
}

void FirrtlPB_Expression_ValidIf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Expression.ValidIf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Expression_ValidIf::CopyFrom(const FirrtlPB_Expression_ValidIf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Expression.ValidIf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Expression_ValidIf::IsInitialized() const {
  return true;
}

void FirrtlPB_Expression_ValidIf::InternalSwap(FirrtlPB_Expression_ValidIf* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(condition_, other->condition_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Expression_ValidIf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Expression_Mux::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Expression_Mux_default_instance_._instance.get_mutable()->condition_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_Mux_default_instance_._instance.get_mutable()->t_value_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_Mux_default_instance_._instance.get_mutable()->f_value_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Expression_Mux::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& condition(const FirrtlPB_Expression_Mux* msg);
  static const ::firrtl::FirrtlPB_Expression& t_value(const FirrtlPB_Expression_Mux* msg);
  static const ::firrtl::FirrtlPB_Expression& f_value(const FirrtlPB_Expression_Mux* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Expression_Mux::_Internal::condition(const FirrtlPB_Expression_Mux* msg) {
  return *msg->condition_;
}
const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Expression_Mux::_Internal::t_value(const FirrtlPB_Expression_Mux* msg) {
  return *msg->t_value_;
}
const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Expression_Mux::_Internal::f_value(const FirrtlPB_Expression_Mux* msg) {
  return *msg->f_value_;
}
FirrtlPB_Expression_Mux::FirrtlPB_Expression_Mux()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Expression.Mux)
}
FirrtlPB_Expression_Mux::FirrtlPB_Expression_Mux(const FirrtlPB_Expression_Mux& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_condition()) {
    condition_ = new ::firrtl::FirrtlPB_Expression(*from.condition_);
  } else {
    condition_ = nullptr;
  }
  if (from._internal_has_t_value()) {
    t_value_ = new ::firrtl::FirrtlPB_Expression(*from.t_value_);
  } else {
    t_value_ = nullptr;
  }
  if (from._internal_has_f_value()) {
    f_value_ = new ::firrtl::FirrtlPB_Expression(*from.f_value_);
  } else {
    f_value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Expression.Mux)
}

void FirrtlPB_Expression_Mux::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&condition_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&f_value_) -
      reinterpret_cast<char*>(&condition_)) + sizeof(f_value_));
}

FirrtlPB_Expression_Mux::~FirrtlPB_Expression_Mux() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Expression.Mux)
  SharedDtor();
}

void FirrtlPB_Expression_Mux::SharedDtor() {
  if (this != internal_default_instance()) delete condition_;
  if (this != internal_default_instance()) delete t_value_;
  if (this != internal_default_instance()) delete f_value_;
}

void FirrtlPB_Expression_Mux::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Expression_Mux& FirrtlPB_Expression_Mux::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Expression_Mux::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Expression.Mux)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && condition_ != nullptr) {
    delete condition_;
  }
  condition_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && t_value_ != nullptr) {
    delete t_value_;
  }
  t_value_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && f_value_ != nullptr) {
    delete f_value_;
  }
  f_value_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Expression_Mux::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression condition = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression t_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_t_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression f_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_f_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Expression_Mux::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Expression.Mux)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression condition = 1;
  if (this->has_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::condition(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression t_value = 2;
  if (this->has_t_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::t_value(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression f_value = 3;
  if (this->has_f_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::f_value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Expression.Mux)
  return target;
}

size_t FirrtlPB_Expression_Mux::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Expression.Mux)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression condition = 1;
  if (this->has_condition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *condition_);
  }

  // .firrtl.FirrtlPB.Expression t_value = 2;
  if (this->has_t_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *t_value_);
  }

  // .firrtl.FirrtlPB.Expression f_value = 3;
  if (this->has_f_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *f_value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Expression_Mux::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Expression.Mux)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Expression_Mux* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Expression_Mux>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Expression.Mux)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Expression.Mux)
    MergeFrom(*source);
  }
}

void FirrtlPB_Expression_Mux::MergeFrom(const FirrtlPB_Expression_Mux& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Expression.Mux)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_condition()) {
    _internal_mutable_condition()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_condition());
  }
  if (from.has_t_value()) {
    _internal_mutable_t_value()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_t_value());
  }
  if (from.has_f_value()) {
    _internal_mutable_f_value()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_f_value());
  }
}

void FirrtlPB_Expression_Mux::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Expression.Mux)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Expression_Mux::CopyFrom(const FirrtlPB_Expression_Mux& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Expression.Mux)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Expression_Mux::IsInitialized() const {
  return true;
}

void FirrtlPB_Expression_Mux::InternalSwap(FirrtlPB_Expression_Mux* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(condition_, other->condition_);
  swap(t_value_, other->t_value_);
  swap(f_value_, other->f_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Expression_Mux::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Expression_SubField::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Expression_SubField_default_instance_._instance.get_mutable()->expression_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Expression_SubField::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& expression(const FirrtlPB_Expression_SubField* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Expression_SubField::_Internal::expression(const FirrtlPB_Expression_SubField* msg) {
  return *msg->expression_;
}
FirrtlPB_Expression_SubField::FirrtlPB_Expression_SubField()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Expression.SubField)
}
FirrtlPB_Expression_SubField::FirrtlPB_Expression_SubField(const FirrtlPB_Expression_SubField& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_field().empty()) {
    field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from._internal_has_expression()) {
    expression_ = new ::firrtl::FirrtlPB_Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Expression.SubField)
}

void FirrtlPB_Expression_SubField::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  field_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expression_ = nullptr;
}

FirrtlPB_Expression_SubField::~FirrtlPB_Expression_SubField() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Expression.SubField)
  SharedDtor();
}

void FirrtlPB_Expression_SubField::SharedDtor() {
  field_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expression_;
}

void FirrtlPB_Expression_SubField::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Expression_SubField& FirrtlPB_Expression_SubField::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Expression_SubField::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Expression.SubField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  field_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Expression_SubField::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_field();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "firrtl.FirrtlPB.Expression.SubField.field"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Expression_SubField::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Expression.SubField)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression expression = 1;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expression(this), target, stream);
  }

  // string field = 2;
  if (this->field().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_field().data(), static_cast<int>(this->_internal_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "firrtl.FirrtlPB.Expression.SubField.field");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_field(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Expression.SubField)
  return target;
}

size_t FirrtlPB_Expression_SubField::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Expression.SubField)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string field = 2;
  if (this->field().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_field());
  }

  // .firrtl.FirrtlPB.Expression expression = 1;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Expression_SubField::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Expression.SubField)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Expression_SubField* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Expression_SubField>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Expression.SubField)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Expression.SubField)
    MergeFrom(*source);
  }
}

void FirrtlPB_Expression_SubField::MergeFrom(const FirrtlPB_Expression_SubField& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Expression.SubField)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.field().size() > 0) {

    field_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.field_);
  }
  if (from.has_expression()) {
    _internal_mutable_expression()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_expression());
  }
}

void FirrtlPB_Expression_SubField::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Expression.SubField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Expression_SubField::CopyFrom(const FirrtlPB_Expression_SubField& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Expression.SubField)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Expression_SubField::IsInitialized() const {
  return true;
}

void FirrtlPB_Expression_SubField::InternalSwap(FirrtlPB_Expression_SubField* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  field_.Swap(&other->field_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expression_, other->expression_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Expression_SubField::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Expression_SubIndex::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Expression_SubIndex_default_instance_._instance.get_mutable()->expression_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_SubIndex_default_instance_._instance.get_mutable()->index_ = const_cast< ::firrtl::FirrtlPB_Expression_IntegerLiteral*>(
      ::firrtl::FirrtlPB_Expression_IntegerLiteral::internal_default_instance());
}
class FirrtlPB_Expression_SubIndex::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& expression(const FirrtlPB_Expression_SubIndex* msg);
  static const ::firrtl::FirrtlPB_Expression_IntegerLiteral& index(const FirrtlPB_Expression_SubIndex* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Expression_SubIndex::_Internal::expression(const FirrtlPB_Expression_SubIndex* msg) {
  return *msg->expression_;
}
const ::firrtl::FirrtlPB_Expression_IntegerLiteral&
FirrtlPB_Expression_SubIndex::_Internal::index(const FirrtlPB_Expression_SubIndex* msg) {
  return *msg->index_;
}
FirrtlPB_Expression_SubIndex::FirrtlPB_Expression_SubIndex()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Expression.SubIndex)
}
FirrtlPB_Expression_SubIndex::FirrtlPB_Expression_SubIndex(const FirrtlPB_Expression_SubIndex& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_expression()) {
    expression_ = new ::firrtl::FirrtlPB_Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  if (from._internal_has_index()) {
    index_ = new ::firrtl::FirrtlPB_Expression_IntegerLiteral(*from.index_);
  } else {
    index_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Expression.SubIndex)
}

void FirrtlPB_Expression_SubIndex::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&expression_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&expression_)) + sizeof(index_));
}

FirrtlPB_Expression_SubIndex::~FirrtlPB_Expression_SubIndex() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Expression.SubIndex)
  SharedDtor();
}

void FirrtlPB_Expression_SubIndex::SharedDtor() {
  if (this != internal_default_instance()) delete expression_;
  if (this != internal_default_instance()) delete index_;
}

void FirrtlPB_Expression_SubIndex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Expression_SubIndex& FirrtlPB_Expression_SubIndex::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Expression_SubIndex::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Expression.SubIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Expression_SubIndex::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression.IntegerLiteral index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Expression_SubIndex::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Expression.SubIndex)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression expression = 1;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expression(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression.IntegerLiteral index = 2;
  if (this->has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::index(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Expression.SubIndex)
  return target;
}

size_t FirrtlPB_Expression_SubIndex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Expression.SubIndex)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression expression = 1;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  // .firrtl.FirrtlPB.Expression.IntegerLiteral index = 2;
  if (this->has_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Expression_SubIndex::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Expression.SubIndex)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Expression_SubIndex* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Expression_SubIndex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Expression.SubIndex)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Expression.SubIndex)
    MergeFrom(*source);
  }
}

void FirrtlPB_Expression_SubIndex::MergeFrom(const FirrtlPB_Expression_SubIndex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Expression.SubIndex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expression()) {
    _internal_mutable_expression()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_expression());
  }
  if (from.has_index()) {
    _internal_mutable_index()->::firrtl::FirrtlPB_Expression_IntegerLiteral::MergeFrom(from._internal_index());
  }
}

void FirrtlPB_Expression_SubIndex::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Expression.SubIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Expression_SubIndex::CopyFrom(const FirrtlPB_Expression_SubIndex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Expression.SubIndex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Expression_SubIndex::IsInitialized() const {
  return true;
}

void FirrtlPB_Expression_SubIndex::InternalSwap(FirrtlPB_Expression_SubIndex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(expression_, other->expression_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Expression_SubIndex::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Expression_SubAccess::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Expression_SubAccess_default_instance_._instance.get_mutable()->expression_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_SubAccess_default_instance_._instance.get_mutable()->index_ = const_cast< ::firrtl::FirrtlPB_Expression*>(
      ::firrtl::FirrtlPB_Expression::internal_default_instance());
}
class FirrtlPB_Expression_SubAccess::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression& expression(const FirrtlPB_Expression_SubAccess* msg);
  static const ::firrtl::FirrtlPB_Expression& index(const FirrtlPB_Expression_SubAccess* msg);
};

const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Expression_SubAccess::_Internal::expression(const FirrtlPB_Expression_SubAccess* msg) {
  return *msg->expression_;
}
const ::firrtl::FirrtlPB_Expression&
FirrtlPB_Expression_SubAccess::_Internal::index(const FirrtlPB_Expression_SubAccess* msg) {
  return *msg->index_;
}
FirrtlPB_Expression_SubAccess::FirrtlPB_Expression_SubAccess()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Expression.SubAccess)
}
FirrtlPB_Expression_SubAccess::FirrtlPB_Expression_SubAccess(const FirrtlPB_Expression_SubAccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_expression()) {
    expression_ = new ::firrtl::FirrtlPB_Expression(*from.expression_);
  } else {
    expression_ = nullptr;
  }
  if (from._internal_has_index()) {
    index_ = new ::firrtl::FirrtlPB_Expression(*from.index_);
  } else {
    index_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Expression.SubAccess)
}

void FirrtlPB_Expression_SubAccess::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  ::memset(&expression_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&expression_)) + sizeof(index_));
}

FirrtlPB_Expression_SubAccess::~FirrtlPB_Expression_SubAccess() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Expression.SubAccess)
  SharedDtor();
}

void FirrtlPB_Expression_SubAccess::SharedDtor() {
  if (this != internal_default_instance()) delete expression_;
  if (this != internal_default_instance()) delete index_;
}

void FirrtlPB_Expression_SubAccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Expression_SubAccess& FirrtlPB_Expression_SubAccess::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Expression_SubAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Expression.SubAccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && expression_ != nullptr) {
    delete expression_;
  }
  expression_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && index_ != nullptr) {
    delete index_;
  }
  index_ = nullptr;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Expression_SubAccess::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression expression = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expression(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Expression_SubAccess::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Expression.SubAccess)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression expression = 1;
  if (this->has_expression()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expression(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression index = 2;
  if (this->has_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::index(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Expression.SubAccess)
  return target;
}

size_t FirrtlPB_Expression_SubAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Expression.SubAccess)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression expression = 1;
  if (this->has_expression()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expression_);
  }

  // .firrtl.FirrtlPB.Expression index = 2;
  if (this->has_index()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *index_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Expression_SubAccess::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Expression.SubAccess)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Expression_SubAccess* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Expression_SubAccess>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Expression.SubAccess)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Expression.SubAccess)
    MergeFrom(*source);
  }
}

void FirrtlPB_Expression_SubAccess::MergeFrom(const FirrtlPB_Expression_SubAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Expression.SubAccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_expression()) {
    _internal_mutable_expression()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_expression());
  }
  if (from.has_index()) {
    _internal_mutable_index()->::firrtl::FirrtlPB_Expression::MergeFrom(from._internal_index());
  }
}

void FirrtlPB_Expression_SubAccess::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Expression.SubAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Expression_SubAccess::CopyFrom(const FirrtlPB_Expression_SubAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Expression.SubAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Expression_SubAccess::IsInitialized() const {
  return true;
}

void FirrtlPB_Expression_SubAccess::InternalSwap(FirrtlPB_Expression_SubAccess* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(expression_, other->expression_);
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Expression_SubAccess::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Expression_PrimOp::InitAsDefaultInstance() {
}
class FirrtlPB_Expression_PrimOp::_Internal {
 public:
};

FirrtlPB_Expression_PrimOp::FirrtlPB_Expression_PrimOp()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Expression.PrimOp)
}
FirrtlPB_Expression_PrimOp::FirrtlPB_Expression_PrimOp(const FirrtlPB_Expression_PrimOp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      arg_(from.arg_),
      const__(from.const__) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_ = from.op_;
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Expression.PrimOp)
}

void FirrtlPB_Expression_PrimOp::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  op_ = 0;
}

FirrtlPB_Expression_PrimOp::~FirrtlPB_Expression_PrimOp() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Expression.PrimOp)
  SharedDtor();
}

void FirrtlPB_Expression_PrimOp::SharedDtor() {
}

void FirrtlPB_Expression_PrimOp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Expression_PrimOp& FirrtlPB_Expression_PrimOp::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Expression_PrimOp::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Expression.PrimOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_.Clear();
  const__.Clear();
  op_ = 0;
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Expression_PrimOp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression.PrimOp.Op op = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_op(static_cast<::firrtl::FirrtlPB_Expression_PrimOp_Op>(val));
        } else goto handle_unusual;
        continue;
      // repeated .firrtl.FirrtlPB.Expression arg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_arg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .firrtl.FirrtlPB.Expression.IntegerLiteral const = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_const_(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Expression_PrimOp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Expression.PrimOp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression.PrimOp.Op op = 1;
  if (this->op() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_op(), target);
  }

  // repeated .firrtl.FirrtlPB.Expression arg = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_arg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_arg(i), target, stream);
  }

  // repeated .firrtl.FirrtlPB.Expression.IntegerLiteral const = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_const__size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_const_(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Expression.PrimOp)
  return target;
}

size_t FirrtlPB_Expression_PrimOp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Expression.PrimOp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Expression arg = 2;
  total_size += 1UL * this->_internal_arg_size();
  for (const auto& msg : this->arg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .firrtl.FirrtlPB.Expression.IntegerLiteral const = 3;
  total_size += 1UL * this->_internal_const__size();
  for (const auto& msg : this->const__) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .firrtl.FirrtlPB.Expression.PrimOp.Op op = 1;
  if (this->op() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_op());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Expression_PrimOp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Expression.PrimOp)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Expression_PrimOp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Expression_PrimOp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Expression.PrimOp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Expression.PrimOp)
    MergeFrom(*source);
  }
}

void FirrtlPB_Expression_PrimOp::MergeFrom(const FirrtlPB_Expression_PrimOp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Expression.PrimOp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arg_.MergeFrom(from.arg_);
  const__.MergeFrom(from.const__);
  if (from.op() != 0) {
    _internal_set_op(from._internal_op());
  }
}

void FirrtlPB_Expression_PrimOp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Expression.PrimOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Expression_PrimOp::CopyFrom(const FirrtlPB_Expression_PrimOp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Expression.PrimOp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Expression_PrimOp::IsInitialized() const {
  return true;
}

void FirrtlPB_Expression_PrimOp::InternalSwap(FirrtlPB_Expression_PrimOp* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  arg_.InternalSwap(&other->arg_);
  const__.InternalSwap(&other->const__);
  swap(op_, other->op_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Expression_PrimOp::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB_Expression::InitAsDefaultInstance() {
  ::firrtl::_FirrtlPB_Expression_default_instance_.reference_ = const_cast< ::firrtl::FirrtlPB_Expression_Reference*>(
      ::firrtl::FirrtlPB_Expression_Reference::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_default_instance_.uint_literal_ = const_cast< ::firrtl::FirrtlPB_Expression_UIntLiteral*>(
      ::firrtl::FirrtlPB_Expression_UIntLiteral::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_default_instance_.sint_literal_ = const_cast< ::firrtl::FirrtlPB_Expression_SIntLiteral*>(
      ::firrtl::FirrtlPB_Expression_SIntLiteral::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_default_instance_.fixed_literal_ = const_cast< ::firrtl::FirrtlPB_Expression_FixedLiteral*>(
      ::firrtl::FirrtlPB_Expression_FixedLiteral::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_default_instance_.valid_if_ = const_cast< ::firrtl::FirrtlPB_Expression_ValidIf*>(
      ::firrtl::FirrtlPB_Expression_ValidIf::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_default_instance_.mux_ = const_cast< ::firrtl::FirrtlPB_Expression_Mux*>(
      ::firrtl::FirrtlPB_Expression_Mux::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_default_instance_.sub_field_ = const_cast< ::firrtl::FirrtlPB_Expression_SubField*>(
      ::firrtl::FirrtlPB_Expression_SubField::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_default_instance_.sub_index_ = const_cast< ::firrtl::FirrtlPB_Expression_SubIndex*>(
      ::firrtl::FirrtlPB_Expression_SubIndex::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_default_instance_.sub_access_ = const_cast< ::firrtl::FirrtlPB_Expression_SubAccess*>(
      ::firrtl::FirrtlPB_Expression_SubAccess::internal_default_instance());
  ::firrtl::_FirrtlPB_Expression_default_instance_.prim_op_ = const_cast< ::firrtl::FirrtlPB_Expression_PrimOp*>(
      ::firrtl::FirrtlPB_Expression_PrimOp::internal_default_instance());
}
class FirrtlPB_Expression::_Internal {
 public:
  static const ::firrtl::FirrtlPB_Expression_Reference& reference(const FirrtlPB_Expression* msg);
  static const ::firrtl::FirrtlPB_Expression_UIntLiteral& uint_literal(const FirrtlPB_Expression* msg);
  static const ::firrtl::FirrtlPB_Expression_SIntLiteral& sint_literal(const FirrtlPB_Expression* msg);
  static const ::firrtl::FirrtlPB_Expression_FixedLiteral& fixed_literal(const FirrtlPB_Expression* msg);
  static const ::firrtl::FirrtlPB_Expression_ValidIf& valid_if(const FirrtlPB_Expression* msg);
  static const ::firrtl::FirrtlPB_Expression_Mux& mux(const FirrtlPB_Expression* msg);
  static const ::firrtl::FirrtlPB_Expression_SubField& sub_field(const FirrtlPB_Expression* msg);
  static const ::firrtl::FirrtlPB_Expression_SubIndex& sub_index(const FirrtlPB_Expression* msg);
  static const ::firrtl::FirrtlPB_Expression_SubAccess& sub_access(const FirrtlPB_Expression* msg);
  static const ::firrtl::FirrtlPB_Expression_PrimOp& prim_op(const FirrtlPB_Expression* msg);
};

const ::firrtl::FirrtlPB_Expression_Reference&
FirrtlPB_Expression::_Internal::reference(const FirrtlPB_Expression* msg) {
  return *msg->expression_.reference_;
}
const ::firrtl::FirrtlPB_Expression_UIntLiteral&
FirrtlPB_Expression::_Internal::uint_literal(const FirrtlPB_Expression* msg) {
  return *msg->expression_.uint_literal_;
}
const ::firrtl::FirrtlPB_Expression_SIntLiteral&
FirrtlPB_Expression::_Internal::sint_literal(const FirrtlPB_Expression* msg) {
  return *msg->expression_.sint_literal_;
}
const ::firrtl::FirrtlPB_Expression_FixedLiteral&
FirrtlPB_Expression::_Internal::fixed_literal(const FirrtlPB_Expression* msg) {
  return *msg->expression_.fixed_literal_;
}
const ::firrtl::FirrtlPB_Expression_ValidIf&
FirrtlPB_Expression::_Internal::valid_if(const FirrtlPB_Expression* msg) {
  return *msg->expression_.valid_if_;
}
const ::firrtl::FirrtlPB_Expression_Mux&
FirrtlPB_Expression::_Internal::mux(const FirrtlPB_Expression* msg) {
  return *msg->expression_.mux_;
}
const ::firrtl::FirrtlPB_Expression_SubField&
FirrtlPB_Expression::_Internal::sub_field(const FirrtlPB_Expression* msg) {
  return *msg->expression_.sub_field_;
}
const ::firrtl::FirrtlPB_Expression_SubIndex&
FirrtlPB_Expression::_Internal::sub_index(const FirrtlPB_Expression* msg) {
  return *msg->expression_.sub_index_;
}
const ::firrtl::FirrtlPB_Expression_SubAccess&
FirrtlPB_Expression::_Internal::sub_access(const FirrtlPB_Expression* msg) {
  return *msg->expression_.sub_access_;
}
const ::firrtl::FirrtlPB_Expression_PrimOp&
FirrtlPB_Expression::_Internal::prim_op(const FirrtlPB_Expression* msg) {
  return *msg->expression_.prim_op_;
}
void FirrtlPB_Expression::set_allocated_reference(::firrtl::FirrtlPB_Expression_Reference* reference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_expression();
  if (reference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reference, submessage_arena);
    }
    set_has_reference();
    expression_.reference_ = reference;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.reference)
}
void FirrtlPB_Expression::set_allocated_uint_literal(::firrtl::FirrtlPB_Expression_UIntLiteral* uint_literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_expression();
  if (uint_literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      uint_literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, uint_literal, submessage_arena);
    }
    set_has_uint_literal();
    expression_.uint_literal_ = uint_literal;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.uint_literal)
}
void FirrtlPB_Expression::set_allocated_sint_literal(::firrtl::FirrtlPB_Expression_SIntLiteral* sint_literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_expression();
  if (sint_literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sint_literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sint_literal, submessage_arena);
    }
    set_has_sint_literal();
    expression_.sint_literal_ = sint_literal;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.sint_literal)
}
void FirrtlPB_Expression::set_allocated_fixed_literal(::firrtl::FirrtlPB_Expression_FixedLiteral* fixed_literal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_expression();
  if (fixed_literal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      fixed_literal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_literal, submessage_arena);
    }
    set_has_fixed_literal();
    expression_.fixed_literal_ = fixed_literal;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.fixed_literal)
}
void FirrtlPB_Expression::set_allocated_valid_if(::firrtl::FirrtlPB_Expression_ValidIf* valid_if) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_expression();
  if (valid_if) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      valid_if = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valid_if, submessage_arena);
    }
    set_has_valid_if();
    expression_.valid_if_ = valid_if;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.valid_if)
}
void FirrtlPB_Expression::set_allocated_mux(::firrtl::FirrtlPB_Expression_Mux* mux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_expression();
  if (mux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mux, submessage_arena);
    }
    set_has_mux();
    expression_.mux_ = mux;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.mux)
}
void FirrtlPB_Expression::set_allocated_sub_field(::firrtl::FirrtlPB_Expression_SubField* sub_field) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_expression();
  if (sub_field) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sub_field = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_field, submessage_arena);
    }
    set_has_sub_field();
    expression_.sub_field_ = sub_field;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.sub_field)
}
void FirrtlPB_Expression::set_allocated_sub_index(::firrtl::FirrtlPB_Expression_SubIndex* sub_index) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_expression();
  if (sub_index) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sub_index = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_index, submessage_arena);
    }
    set_has_sub_index();
    expression_.sub_index_ = sub_index;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.sub_index)
}
void FirrtlPB_Expression::set_allocated_sub_access(::firrtl::FirrtlPB_Expression_SubAccess* sub_access) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_expression();
  if (sub_access) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sub_access = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sub_access, submessage_arena);
    }
    set_has_sub_access();
    expression_.sub_access_ = sub_access;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.sub_access)
}
void FirrtlPB_Expression::set_allocated_prim_op(::firrtl::FirrtlPB_Expression_PrimOp* prim_op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_expression();
  if (prim_op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      prim_op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prim_op, submessage_arena);
    }
    set_has_prim_op();
    expression_.prim_op_ = prim_op;
  }
  // @@protoc_insertion_point(field_set_allocated:firrtl.FirrtlPB.Expression.prim_op)
}
FirrtlPB_Expression::FirrtlPB_Expression()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB.Expression)
}
FirrtlPB_Expression::FirrtlPB_Expression(const FirrtlPB_Expression& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_expression();
  switch (from.expression_case()) {
    case kReference: {
      _internal_mutable_reference()->::firrtl::FirrtlPB_Expression_Reference::MergeFrom(from._internal_reference());
      break;
    }
    case kUintLiteral: {
      _internal_mutable_uint_literal()->::firrtl::FirrtlPB_Expression_UIntLiteral::MergeFrom(from._internal_uint_literal());
      break;
    }
    case kSintLiteral: {
      _internal_mutable_sint_literal()->::firrtl::FirrtlPB_Expression_SIntLiteral::MergeFrom(from._internal_sint_literal());
      break;
    }
    case kFixedLiteral: {
      _internal_mutable_fixed_literal()->::firrtl::FirrtlPB_Expression_FixedLiteral::MergeFrom(from._internal_fixed_literal());
      break;
    }
    case kValidIf: {
      _internal_mutable_valid_if()->::firrtl::FirrtlPB_Expression_ValidIf::MergeFrom(from._internal_valid_if());
      break;
    }
    case kMux: {
      _internal_mutable_mux()->::firrtl::FirrtlPB_Expression_Mux::MergeFrom(from._internal_mux());
      break;
    }
    case kSubField: {
      _internal_mutable_sub_field()->::firrtl::FirrtlPB_Expression_SubField::MergeFrom(from._internal_sub_field());
      break;
    }
    case kSubIndex: {
      _internal_mutable_sub_index()->::firrtl::FirrtlPB_Expression_SubIndex::MergeFrom(from._internal_sub_index());
      break;
    }
    case kSubAccess: {
      _internal_mutable_sub_access()->::firrtl::FirrtlPB_Expression_SubAccess::MergeFrom(from._internal_sub_access());
      break;
    }
    case kPrimOp: {
      _internal_mutable_prim_op()->::firrtl::FirrtlPB_Expression_PrimOp::MergeFrom(from._internal_prim_op());
      break;
    }
    case EXPRESSION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB.Expression)
}

void FirrtlPB_Expression::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  clear_has_expression();
}

FirrtlPB_Expression::~FirrtlPB_Expression() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB.Expression)
  SharedDtor();
}

void FirrtlPB_Expression::SharedDtor() {
  if (has_expression()) {
    clear_expression();
  }
}

void FirrtlPB_Expression::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB_Expression& FirrtlPB_Expression::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_Expression_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB_Expression::clear_expression() {
// @@protoc_insertion_point(one_of_clear_start:firrtl.FirrtlPB.Expression)
  switch (expression_case()) {
    case kReference: {
      delete expression_.reference_;
      break;
    }
    case kUintLiteral: {
      delete expression_.uint_literal_;
      break;
    }
    case kSintLiteral: {
      delete expression_.sint_literal_;
      break;
    }
    case kFixedLiteral: {
      delete expression_.fixed_literal_;
      break;
    }
    case kValidIf: {
      delete expression_.valid_if_;
      break;
    }
    case kMux: {
      delete expression_.mux_;
      break;
    }
    case kSubField: {
      delete expression_.sub_field_;
      break;
    }
    case kSubIndex: {
      delete expression_.sub_index_;
      break;
    }
    case kSubAccess: {
      delete expression_.sub_access_;
      break;
    }
    case kPrimOp: {
      delete expression_.prim_op_;
      break;
    }
    case EXPRESSION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXPRESSION_NOT_SET;
}


void FirrtlPB_Expression::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_expression();
  _internal_metadata_.Clear();
}

const char* FirrtlPB_Expression::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .firrtl.FirrtlPB.Expression.Reference reference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reference(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression.UIntLiteral uint_literal = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_uint_literal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression.SIntLiteral sint_literal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sint_literal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression.ValidIf valid_if = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_valid_if(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression.Mux mux = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_mux(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression.SubField sub_field = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_field(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression.SubIndex sub_index = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_index(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression.SubAccess sub_access = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_sub_access(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression.PrimOp prim_op = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_prim_op(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .firrtl.FirrtlPB.Expression.FixedLiteral fixed_literal = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_literal(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB_Expression::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB.Expression)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .firrtl.FirrtlPB.Expression.Reference reference = 1;
  if (_internal_has_reference()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reference(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression.UIntLiteral uint_literal = 2;
  if (_internal_has_uint_literal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::uint_literal(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression.SIntLiteral sint_literal = 3;
  if (_internal_has_sint_literal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sint_literal(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression.ValidIf valid_if = 4;
  if (_internal_has_valid_if()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::valid_if(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression.Mux mux = 6;
  if (_internal_has_mux()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::mux(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression.SubField sub_field = 7;
  if (_internal_has_sub_field()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::sub_field(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression.SubIndex sub_index = 8;
  if (_internal_has_sub_index()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::sub_index(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression.SubAccess sub_access = 9;
  if (_internal_has_sub_access()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::sub_access(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression.PrimOp prim_op = 10;
  if (_internal_has_prim_op()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::prim_op(this), target, stream);
  }

  // .firrtl.FirrtlPB.Expression.FixedLiteral fixed_literal = 11;
  if (_internal_has_fixed_literal()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::fixed_literal(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB.Expression)
  return target;
}

size_t FirrtlPB_Expression::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB.Expression)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (expression_case()) {
    // .firrtl.FirrtlPB.Expression.Reference reference = 1;
    case kReference: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expression_.reference_);
      break;
    }
    // .firrtl.FirrtlPB.Expression.UIntLiteral uint_literal = 2;
    case kUintLiteral: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expression_.uint_literal_);
      break;
    }
    // .firrtl.FirrtlPB.Expression.SIntLiteral sint_literal = 3;
    case kSintLiteral: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expression_.sint_literal_);
      break;
    }
    // .firrtl.FirrtlPB.Expression.FixedLiteral fixed_literal = 11;
    case kFixedLiteral: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expression_.fixed_literal_);
      break;
    }
    // .firrtl.FirrtlPB.Expression.ValidIf valid_if = 4;
    case kValidIf: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expression_.valid_if_);
      break;
    }
    // .firrtl.FirrtlPB.Expression.Mux mux = 6;
    case kMux: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expression_.mux_);
      break;
    }
    // .firrtl.FirrtlPB.Expression.SubField sub_field = 7;
    case kSubField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expression_.sub_field_);
      break;
    }
    // .firrtl.FirrtlPB.Expression.SubIndex sub_index = 8;
    case kSubIndex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expression_.sub_index_);
      break;
    }
    // .firrtl.FirrtlPB.Expression.SubAccess sub_access = 9;
    case kSubAccess: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expression_.sub_access_);
      break;
    }
    // .firrtl.FirrtlPB.Expression.PrimOp prim_op = 10;
    case kPrimOp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *expression_.prim_op_);
      break;
    }
    case EXPRESSION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB_Expression::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB.Expression)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB_Expression* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB_Expression>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB.Expression)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB.Expression)
    MergeFrom(*source);
  }
}

void FirrtlPB_Expression::MergeFrom(const FirrtlPB_Expression& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB.Expression)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.expression_case()) {
    case kReference: {
      _internal_mutable_reference()->::firrtl::FirrtlPB_Expression_Reference::MergeFrom(from._internal_reference());
      break;
    }
    case kUintLiteral: {
      _internal_mutable_uint_literal()->::firrtl::FirrtlPB_Expression_UIntLiteral::MergeFrom(from._internal_uint_literal());
      break;
    }
    case kSintLiteral: {
      _internal_mutable_sint_literal()->::firrtl::FirrtlPB_Expression_SIntLiteral::MergeFrom(from._internal_sint_literal());
      break;
    }
    case kFixedLiteral: {
      _internal_mutable_fixed_literal()->::firrtl::FirrtlPB_Expression_FixedLiteral::MergeFrom(from._internal_fixed_literal());
      break;
    }
    case kValidIf: {
      _internal_mutable_valid_if()->::firrtl::FirrtlPB_Expression_ValidIf::MergeFrom(from._internal_valid_if());
      break;
    }
    case kMux: {
      _internal_mutable_mux()->::firrtl::FirrtlPB_Expression_Mux::MergeFrom(from._internal_mux());
      break;
    }
    case kSubField: {
      _internal_mutable_sub_field()->::firrtl::FirrtlPB_Expression_SubField::MergeFrom(from._internal_sub_field());
      break;
    }
    case kSubIndex: {
      _internal_mutable_sub_index()->::firrtl::FirrtlPB_Expression_SubIndex::MergeFrom(from._internal_sub_index());
      break;
    }
    case kSubAccess: {
      _internal_mutable_sub_access()->::firrtl::FirrtlPB_Expression_SubAccess::MergeFrom(from._internal_sub_access());
      break;
    }
    case kPrimOp: {
      _internal_mutable_prim_op()->::firrtl::FirrtlPB_Expression_PrimOp::MergeFrom(from._internal_prim_op());
      break;
    }
    case EXPRESSION_NOT_SET: {
      break;
    }
  }
}

void FirrtlPB_Expression::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB_Expression::CopyFrom(const FirrtlPB_Expression& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB.Expression)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB_Expression::IsInitialized() const {
  return true;
}

void FirrtlPB_Expression::InternalSwap(FirrtlPB_Expression* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(expression_, other->expression_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB_Expression::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FirrtlPB::InitAsDefaultInstance() {
}
class FirrtlPB::_Internal {
 public:
};

FirrtlPB::FirrtlPB()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:firrtl.FirrtlPB)
}
FirrtlPB::FirrtlPB(const FirrtlPB& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      circuit_(from.circuit_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:firrtl.FirrtlPB)
}

void FirrtlPB::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FirrtlPB_inou_2ffirrtl_2ffirrtl_2eproto.base);
}

FirrtlPB::~FirrtlPB() {
  // @@protoc_insertion_point(destructor:firrtl.FirrtlPB)
  SharedDtor();
}

void FirrtlPB::SharedDtor() {
}

void FirrtlPB::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FirrtlPB& FirrtlPB::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FirrtlPB_inou_2ffirrtl_2ffirrtl_2eproto.base);
  return *internal_default_instance();
}


void FirrtlPB::Clear() {
// @@protoc_insertion_point(message_clear_start:firrtl.FirrtlPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  circuit_.Clear();
  _internal_metadata_.Clear();
}

const char* FirrtlPB::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .firrtl.FirrtlPB.Circuit circuit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_circuit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FirrtlPB::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:firrtl.FirrtlPB)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Circuit circuit = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_circuit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_circuit(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:firrtl.FirrtlPB)
  return target;
}

size_t FirrtlPB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:firrtl.FirrtlPB)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .firrtl.FirrtlPB.Circuit circuit = 1;
  total_size += 1UL * this->_internal_circuit_size();
  for (const auto& msg : this->circuit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FirrtlPB::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:firrtl.FirrtlPB)
  GOOGLE_DCHECK_NE(&from, this);
  const FirrtlPB* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FirrtlPB>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:firrtl.FirrtlPB)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:firrtl.FirrtlPB)
    MergeFrom(*source);
  }
}

void FirrtlPB::MergeFrom(const FirrtlPB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:firrtl.FirrtlPB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  circuit_.MergeFrom(from.circuit_);
}

void FirrtlPB::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:firrtl.FirrtlPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirrtlPB::CopyFrom(const FirrtlPB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:firrtl.FirrtlPB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirrtlPB::IsInitialized() const {
  return true;
}

void FirrtlPB::InternalSwap(FirrtlPB* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  circuit_.InternalSwap(&other->circuit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FirrtlPB::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace firrtl
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_SourceInfo_None* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_SourceInfo_None >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_SourceInfo_None >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_SourceInfo_Position* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_SourceInfo_Position >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_SourceInfo_Position >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_SourceInfo* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_SourceInfo >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_SourceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_BigInt* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_BigInt >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_BigInt >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Top* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Top >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Top >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Circuit* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Circuit >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Circuit >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Module_ExternalModule_Parameter* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Module_ExternalModule_Parameter >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Module_ExternalModule_Parameter >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Module_ExternalModule* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Module_ExternalModule >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Module_ExternalModule >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Module_UserModule* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Module_UserModule >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Module_UserModule >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Module* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Module >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Module >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_Wire* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Wire >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_Wire >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_Register* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Register >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_Register >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_Memory* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Memory >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_Memory >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_CMemory_TypeAndDepth >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_CMemory* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_CMemory >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_CMemory >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_Instance* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Instance >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_Instance >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_Node* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Node >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_Node >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_When* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_When >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_When >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_Stop* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Stop >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_Stop >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_Printf* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Printf >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_Printf >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_Skip* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Skip >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_Skip >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_Connect* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Connect >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_Connect >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_PartialConnect* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_PartialConnect >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_PartialConnect >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_IsInvalid* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_IsInvalid >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_IsInvalid >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_MemoryPort* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_MemoryPort >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_MemoryPort >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement_Attach* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement_Attach >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement_Attach >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Statement* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Statement >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Statement >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Width* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Width >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Width >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Type_UIntType* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Type_UIntType >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Type_UIntType >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Type_SIntType* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Type_SIntType >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Type_SIntType >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Type_ClockType* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Type_ClockType >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Type_ClockType >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Type_AsyncResetType* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Type_AsyncResetType >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Type_AsyncResetType >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Type_ResetType* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Type_ResetType >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Type_ResetType >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Type_BundleType_Field* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Type_BundleType_Field >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Type_BundleType_Field >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Type_BundleType* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Type_BundleType >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Type_BundleType >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Type_VectorType* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Type_VectorType >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Type_VectorType >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Type_FixedType* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Type_FixedType >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Type_FixedType >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Type_AnalogType* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Type_AnalogType >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Type_AnalogType >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Type* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Type >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Type >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Port* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Port >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Port >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Expression_Reference* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_Reference >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Expression_Reference >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Expression_IntegerLiteral* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_IntegerLiteral >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Expression_IntegerLiteral >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Expression_UIntLiteral* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_UIntLiteral >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Expression_UIntLiteral >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Expression_SIntLiteral* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_SIntLiteral >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Expression_SIntLiteral >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Expression_FixedLiteral* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_FixedLiteral >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Expression_FixedLiteral >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Expression_ValidIf* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_ValidIf >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Expression_ValidIf >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Expression_Mux* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_Mux >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Expression_Mux >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Expression_SubField* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_SubField >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Expression_SubField >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Expression_SubIndex* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_SubIndex >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Expression_SubIndex >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Expression_SubAccess* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_SubAccess >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Expression_SubAccess >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Expression_PrimOp* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Expression_PrimOp >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Expression_PrimOp >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB_Expression* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB_Expression >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB_Expression >(arena);
}
template<> PROTOBUF_NOINLINE ::firrtl::FirrtlPB* Arena::CreateMaybeMessage< ::firrtl::FirrtlPB >(Arena* arena) {
  return Arena::CreateInternal< ::firrtl::FirrtlPB >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
